# This workflow will install Python dependencies, run tests and lint with a single version of Python

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  SYSTEM_ENV: ci
  MEILI_HOST: 127.0.0.1
  UV_VERSION: "0.9.0"
  FORCE_COLOR: 1

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Run Ruff
        uses: astral-sh/ruff-action@v3
        with:
          args: "format --check"
  testing:
    needs: quality
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        db: [ postgres ]
        meilisearch-version: [ 1.22.3 ]
        include:
          - db: postgres
            db_port: 5432
            db_user: postgres
            db_password: postgres

    services:
      db:
        image: postgres:16
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: --mount type=tmpfs,destination=/var/lib/postgresql/data --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      meilisearch:
        image: getmeili/meilisearch:v${{ matrix.meilisearch-version }}
        ports:
          - 7700:7700
        env:
          MEILI_HTTP_ADDR: meilisearch:7700
          MEILI_LOG_LEVEL: INFO
          MEILI_MASTER_KEY: ${{ secrets.MEILI_MASTER_KEY }}
          MEILI_ENV: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install psycopg prerequisites
        run: sudo apt-get install libpq-dev

      - name: Install Dependencies
        run: |
          uv sync --locked --all-extras
          uv add apprise braintree coverage coveralls

      - name: Run migrations
        run: |
          uv run python manage.py makemigrations
          uv run python manage.py migrate
        env:
          DB: ${{ matrix.db }}
          DB_PORT: ${{ matrix.db_port }}
          DB_USER: ${{ matrix.db_user }}
          DB_PASSWORD: ${{ matrix.db_password }}
          MEILI_HTTP_ADDR: meilisearch:7700
          MEILI_LOG_LEVEL: INFO
          MEILI_MASTER_KEY: ${{ secrets.MEILI_MASTER_KEY }}
          MEILI_ENV: production

      - name: Run Tests
        env:
          DB: ${{ matrix.db }}
          DB_PORT: ${{ matrix.db_port }}
          DB_USER: ${{ matrix.db_user }}
          DB_PASSWORD: ${{ matrix.db_password }}
          MEILI_HTTP_ADDR: meilisearch:7700
          MEILI_LOG_LEVEL: INFO
          MEILI_MASTER_KEY: ${{ secrets.MEILI_MASTER_KEY }}
          MEILI_ENV: production
        run: |
          uv run pytest --cov=. --cov-report=term --cov-report=html --cov-config=pyproject.toml
        timeout-minutes: 15

      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@v4
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt

  release:
    needs: testing
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    concurrency: release
    environment: release
    permissions:
      id-token: write
      contents: write
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Clear dist_build directory
        run: rm -rf dist_build/

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.DJANGO_TOKEN }}

      - name: Install pypa/build
        run: uv add build

      - name: Build a binary wheel and a source tarball
        run: uv run -m build --sdist --outdir dist_build/ --installer uv

      - uses: actions/upload-artifact@v4
        with:
          name: dist_build
          path: dist_build/

      - uses: actions/download-artifact@v4
        with:
          name: dist_build
          path: dist_build/

      - name: Remove non-distribution files
        run: |
          find dist_build/ -type f ! -name '*.whl' ! -name '*.tar.gz' -delete

      - name: Publish package distributions ðŸ“¦ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist_build/
          attestations: false  # Added this line
        if: steps.release.outputs.released == 'true'

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist_build/
          attestations: false  # Added this line
        if: steps.release.outputs.released == 'true'
