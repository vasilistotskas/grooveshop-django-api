[tool.poetry]
name = "grooveshop-django-api"
version = "0.10.1"
description = "GrooveShop Django Backend"
license = "MIT"
readme = "README.md"
repository = "https://github.com/vasilistotskas/grooveshop-django-api"
authors = ["Vasilis Totskas"]
packages = [
    { include = "*", from = "." },
]
[tool.poetry.dependencies]
python = ">=3.8.1,<4.0.0"
django = "4.2.3"
psycopg2-binary = "*"
djangorestframework = "3.14.0"
django-cors-headers = "4.2.0"
pillow = "10.0.0"
django-admin-thumbnails = "0.2.8"
django-mptt = "0.14.0"
django-js-asset = "2.1.0"
django-redis = "*"
Faker = "19.2.0"
django-environ = "0.10.0"
django-tinymce = "3.6.1"
gunicorn = "21.2.0"
whitenoise = "*"
django-filter = "23.2"
python-semantic-release = "8.0.3"
flake8 = "6.0.0"
coverage = "7.2.7"
pylint = "2.17.4"
pre-commit = "3.3.3"
django-allauth = "0.54.0"
django-allauth-2fa = "0.11.1"
django-celery-beat = "2.5.0"
django-celery-results = "2.5.1"
flower = "2.0.0"
django-rosetta = "0.9.9"
django-parler = "2.3.0"
django-parler-rest = "2.2.0"
charset_normalizer = "3.2.0"
chardet = "5.1.0"
djangorestframework-camel-case = "1.4.2"
djangoql = "*"
urllib3 = "2.0.4"
click = "8.1.6"
dotty-dict = "1.3.1"
gitpython = "3.1.32"
importlib-resources = "5.7.0"
jinja2 = "3.1.2"
pydantic = "1.10.2"
python-gitlab = "3.15.0"
rich = "13.4.2"
pydocstyle = "6.3.0"
django-extensions = "*"
pytest = "*"
pytest-cov = "*"
sentry-sdk = "*"
shortuuid = "*"
unittest-xml-reporting = "*"
werkzeug = "*"
[tool.poetry.dependencies.celery]
version = ">=5.2.7,<6.0.0"
extras = ["redis"]
[tool.poetry.dev-dependencies]
ipython = "*"
bpython = "*"
pudb = "*"
black = "23.3.0"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.coverage.paths]
source = ["*"]
[tool.coverage.run]
branch = true
omit = [
    "*/migrations/*",
    "*/management/*",
    "*/manage.py",
    "*/setup.py",
    "*/asgi.py",
    "*/wsgi.py",
]
source = ["*"]
relative_files = true
[tool.coverage.report]
precision = 2
skip_covered = true
fail_under = 50
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "return NotImplemented",
    "if TYPE_CHECKING:",
]

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = ["setup.py:__version__"]
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "pip install poetry && poetry build"
commit_message = 'chore(release): release version {version} [skip ci]'
[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false
[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*", "dist_build/*"]
[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"

[tool.pydocstyle]
inherit = false
match-dir = "^(?!migrations|node_modules|static|templates|venv).*$"
ignore = ["E203", "D100", "D101", "D102", "D103", "D104", "D105", "D106", "D107", "D203", "D213", "D407", "D202"]
