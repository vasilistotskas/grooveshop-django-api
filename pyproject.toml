[tool.poetry]
name = "grooveshop-django-api"
version = "0.187.2"
description = "GrooveShop Django Backend"
license = "MIT"
readme = ["README.md"]
repository = "https://github.com/vasilistotskas/grooveshop-django-api"
authors = ["Vasilis Totskas"]
packages = [
    { include = "*", from = "." },
]

[build-system]
requires = ["poetry>=2.0.0"]
build-backend = "poetry.masonry.api"

[tool.poetry.dependencies]
asgiref = "3.8.1"
boto3 = "1.35.93"
python = ">=3.11,<4.0.0"
charset_normalizer = "3.4.1"
channels = "4.2.0"
channels-redis = "4.2.1"
cryptography = "44.0.0"
django = "5.1.4"
django-admin-thumbnails = "0.2.9"
django-allauth = "65.3.1"
django-csp = "4.0b2"
django-dbbackup = "4.2.1"
django-extra-settings = "0.12.0"
django-celery-beat = "2.7.0"
django-celery-results = "2.5.1"
django-cors-headers = "4.6.0"
django-simple-history = "3.7.0"
django-filter = "24.3"
django-money = "3.5.3"
django-mptt = "0.16.0"
django-parler = "2.3.0"
django-parler-rest = "2.2.0"
django-phonenumber-field = "8.0.0"
django-rosetta = "0.10.1"
django-rest-knox = "5.0.2"
django-storages = "1.14.4"
django-tinymce = "4.1.0"
djangorestframework = "3.15.2"
djangorestframework-camel-case = "1.4.2"
drf-spectacular = "0.28.0"
fido2 = "1.2.0"
flower = "2.0.1"
gunicorn = "23.0.0"
importlib-resources = "6.5.2"
measurement = "3.2.2"
meilisearch = "0.33.0"
phonenumbers = "8.13.51"
pillow = "11.1.0"
psycopg = { version = "3.2.3", extras = ["binary", "pool"] }
python-dotenv = "1.0.1"
urllib3 = "2.3.0"
uvicorn = "0.34.0"

[tool.poetry.group.dev.dependencies]
coverage = "7.6.10"
djangorestframework-stubs = "3.15.2"
django-debug-toolbar = "4.4.6"
django-stubs = "5.1.1"
Faker = "33.3.0"
factory-boy = "3.3.1"
gitpython = "3.1.44"
pre-commit = "4.0.1"
pip-upgrader = "1.4.15"
pylint = "3.3.3"
pyjwt = "2.10.1"
pytest = "8.3.4"
pytest-asyncio = "0.25.1"
python-semantic-release = "9.15.2"
pytest-django = "4.9.0"
ruff = "0.8.6"

[tool.poetry.dependencies.celery]
version = ">=5.4.0,<6.0.0"
extras = ["redis"]

[tool.coverage.paths]
source = ["*"]

[tool.coverage.run]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/management/*",
    "*/manage.py",
    "*/setup.py",
    "asgi/gunicorn_worker.py",
    "core/storages.py",
    "*/wsgi/*",
]
source = ["*"]
relative_files = true

[tool.coverage.report]
precision = 2
skip_covered = true
fail_under = 50
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "return NotImplemented",
    "if TYPE_CHECKING:",
    "if getattr(self, 'swagger_fake_view', False):",
]

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = ["setup.py:__version__"]
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "pip install poetry && poetry build"
commit_message = 'chore(release): release version {version} [skip ci]'

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*", "dist_build/*"]

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "settings"
python_files = ["test_*.py", "*_test.py", "testing/python/*.py"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
plugins = ["mypy_django_plugin.main"]
python_version = 3.13
warn_unused_configs = true
check_untyped_defs = true

[tool.django-stubs]
django_settings_module = "settings"

[tool.ruff]
line-length = 80
exclude = ["**/migrations/**"]

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # pyflakes,
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # ruff specific
    "RUF",
    # type checking
    "TC",
    # pylint
    "PL",
    # django's stuff
    "DJ",
    # datetime
    "DTZ",
    # simplify lint
    "SIM",
]
ignore = [
    # I don't agree that Optional should be deprecated
    "UP007",
    # use f-string instead of .format
    # I know they both exist, now shut up
    "UP032",
    # ok, ClassVar is great, but... no
    # it's pedantic and messes up with Django too much
    "RUF012",
    # ruff should re-format long lines anyway, if possible
    "E501",
    # because this one is annoying
    # if I want a lambda, I want a lambda
    "E731",
    # move type imports under TYPE_CHECKING
    # ok, this one is a bit insane, sorry
    "TC003"
]

[tool.ruff.lint.pylint]
max-args = 6
