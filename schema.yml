openapi: 3.0.3
info:
  title: Grooveshop API
  version: 1.0.0
  description: Grooveshop API description
paths:
  /api/v1/blog/author:
    get:
      operationId: listBlogAuthor
      description: Retrieve a list of Blog Authors with filtering and search capabilities.
      summary: List Blog Authors
      parameters:
      - in: query
        name: bio
        schema:
          type: string
        description: Filter by bio content (partial match)
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter authors who have/don't have likes on their posts
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter authors who have/don't have posts
      - in: query
        name: hasWebsite
        schema:
          type: boolean
        description: Filter authors who have/don't have a website
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: maxPosts
        schema:
          type: number
        description: Filter authors with at most X posts
      - in: query
        name: minPosts
        schema:
          type: number
        description: Filter authors with at least X posts
      - in: query
        name: minTotalLikes
        schema:
          type: number
        description: Filter authors with at least X total likes across all posts
      - in: query
        name: mostActive
        schema:
          type: boolean
        description: Get most active authors (top 10 by post count)
      - in: query
        name: mostLiked
        schema:
          type: boolean
        description: Get most liked authors (top 10 by total likes)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      - in: query
        name: website
        schema:
          type: string
        description: Filter by website URL (partial match)
      tags:
      - Blog Authors
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogAuthorList'
          description: ''
    post:
      operationId: createBlogAuthor
      description: Create a new Blog Author. Requires authentication.
      summary: Create a Blog Author
      tags:
      - Blog Authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthorWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthorWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthorWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorDetail'
          description: ''
  /api/v1/blog/author/{id}:
    get:
      operationId: retrieveBlogAuthor
      description: Get detailed information about a specific Blog Author.
      summary: Retrieve a Blog Author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorDetail'
          description: ''
    put:
      operationId: updateBlogAuthor
      description: Update Blog Author information. Requires authentication.
      summary: Update a Blog Author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthorWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthorWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthorWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorDetail'
          description: ''
    patch:
      operationId: partialUpdateBlogAuthor
      description: Partially update Blog Author information. Requires authentication.
      summary: Partially update a Blog Author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthorWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthorWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthorWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorDetail'
          description: ''
    delete:
      operationId: destroyBlogAuthor
      description: Delete a Blog Author. Requires authentication.
      summary: Delete a Blog Author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/author/{id}/posts:
    get:
      operationId: getBlogAuthorPosts
      description: Retrieve all blog posts written by this author with proper pagination.
      summary: Get author's blog posts
      parameters:
      - in: query
        name: bio
        schema:
          type: string
        description: Filter by bio content (partial match)
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter authors who have/don't have likes on their posts
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter authors who have/don't have posts
      - in: query
        name: hasWebsite
        schema:
          type: boolean
        description: Filter authors who have/don't have a website
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: maxPosts
        schema:
          type: number
        description: Filter authors with at most X posts
      - in: query
        name: minPosts
        schema:
          type: number
        description: Filter authors with at least X posts
      - in: query
        name: minTotalLikes
        schema:
          type: number
        description: Filter authors with at least X total likes across all posts
      - in: query
        name: mostActive
        schema:
          type: boolean
        description: Get most active authors (top 10 by post count)
      - in: query
        name: mostLiked
        schema:
          type: boolean
        description: Get most liked authors (top 10 by total likes)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      - in: query
        name: website
        schema:
          type: string
        description: Filter by website URL (partial match)
      tags:
      - Blog Authors
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category:
    get:
      operationId: listBlogCategory
      description: Retrieve a list of Blog Categories with filtering and search capabilities.
      summary: List Blog Categories
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
    post:
      operationId: createBlogCategory
      description: Create a new Blog Category. Requires authentication.
      summary: Create a Blog Category
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategoryWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategoryWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryDetail'
          description: ''
  /api/v1/blog/category/{id}:
    get:
      operationId: retrieveBlogCategory
      description: Get detailed information about a specific Blog Category.
      summary: Retrieve a Blog Category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryDetail'
          description: ''
    put:
      operationId: updateBlogCategory
      description: Update Blog Category information. Requires authentication.
      summary: Update a Blog Category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategoryWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategoryWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryDetail'
          description: ''
    patch:
      operationId: partialUpdateBlogCategory
      description: Partially update Blog Category information. Requires authentication.
      summary: Partially update a Blog Category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategoryWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategoryWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategoryWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryDetail'
          description: ''
    delete:
      operationId: destroyBlogCategory
      description: Delete a Blog Category. Requires authentication.
      summary: Delete a Blog Category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/category/{id}/ancestors:
    get:
      operationId: listBlogCategoryAncestors
      description: Get all ancestors (parent, grandparent, etc.) of this category.
      summary: Get category ancestors
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/children:
    get:
      operationId: listBlogCategoryChildren
      description: Get direct children of this category.
      summary: Get category children
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/descendants:
    get:
      operationId: listBlogCategoryDescendants
      description: Get all descendants (children, grandchildren, etc.) of this category.
      summary: Get category descendants
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/posts:
    get:
      operationId: listBlogCategoryPosts
      description: Retrieve all blog posts in this category and its subcategories.
        Use 'recursive=true' to include posts from all descendant categories.
      summary: Get category's blog posts
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - in: query
        name: recursive
        schema:
          type: boolean
          default: false
        description: Include posts from all descendant categories
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/siblings:
    get:
      operationId: listBlogCategorySiblings
      description: Get sibling categories (same parent level).
      summary: Get category siblings
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/reorder:
    post:
      operationId: reorderBlogCategories
      description: Batch reorder categories by updating their sort_order values.
      summary: Reorder categories
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequestRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequestRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryReorderResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/tree:
    get:
      operationId: getBlogCategoryTree
      description: Get the complete category tree structure with nested relationships.
        This is more efficient than using list?tree=true for displaying navigation
        menus or category hierarchies.
      summary: Get complete category tree
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
  /api/v1/blog/comment:
    get:
      operationId: listBlogComment
      description: Retrieve a list of Blog Comments with filtering and search capabilities.
      summary: List Blog Comments
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: createBlogComment
      description: Create a new Blog Comment. Requires authentication.
      summary: Create a Blog Comment
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}:
    get:
      operationId: retrieveBlogComment
      description: Get detailed information about a specific Blog Comment.
      summary: Retrieve a Blog Comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: updateBlogComment
      description: Update Blog Comment information. Requires authentication.
      summary: Update a Blog Comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: partialUpdateBlogComment
      description: Partially update Blog Comment information. Requires authentication.
      summary: Partially update a Blog Comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogCommentWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogCommentWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogCommentWriteRequest'
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: destroyBlogComment
      description: Delete a Blog Comment. Requires authentication.
      summary: Delete a Blog Comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      security:
      - knoxApiToken: []
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/post:
    get:
      operationId: getBlogCommentPost
      description: Get the blog post that this comment belongs to.
      summary: Get comment's blog post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/replies:
    get:
      operationId: listBlogCommentReplies
      description: Get all replies (children) of this comment in threaded structure.
      summary: Get comment replies
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/thread:
    get:
      operationId: getBlogCommentThread
      description: Get the complete thread (all ancestors and descendants) of this
        comment.
      summary: Get comment thread
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
  /api/v1/blog/comment/{id}/update_likes:
    post:
      operationId: toggleBlogCommentLike
      description: Like or unlike a comment. Toggles the like status.
      summary: Toggle comment like
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentDetailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentDetailRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/liked_comments:
    post:
      operationId: checkBlogCommentLikes
      description: Check which comments from a list are liked by the current user.
      summary: Check bulk like status
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentLikedCommentsRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentLikedCommentsRequestRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentLikedCommentsRequestRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentLikedCommentsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/my_comment:
    post:
      operationId: getMyBlogComment
      description: Get the comment made by the currently authenticated user for a
        specific post.
      summary: Get current user's comment
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentMyCommentRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentMyCommentRequestRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentMyCommentRequestRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/my_comments:
    get:
      operationId: listMyBlogComments
      description: Get all comments made by the currently authenticated user.
      summary: Get current user's comments
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post:
    get:
      operationId: listBlogPost
      description: Retrieve a list of Blog Posts with filtering and search capabilities.
      summary: List Blog Posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - Blog Post
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: createBlogPost
      description: Create a new Blog Post. Requires authentication.
      summary: Create a Blog Post
      tags:
      - Blog Post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}:
    get:
      operationId: retrieveBlogPost
      description: Get detailed information about a specific Blog Post.
      summary: Retrieve a Blog Post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Post
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: updateBlogPost
      description: Update Blog Post information. Requires authentication.
      summary: Update a Blog Post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: partialUpdateBlogPost
      description: Partially update Blog Post information. Requires authentication.
      summary: Partially update a Blog Post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogPostWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogPostWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogPostWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: destroyBlogPost
      description: Delete a Blog Post. Requires authentication.
      summary: Delete a Blog Post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Post
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/comments:
    get:
      operationId: listBlogPostComments
      description: Get all comments for a blog post.
      summary: Get post comments
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - Blog Posts
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/related_posts:
    get:
      operationId: listBlogPostRelated
      description: Get related posts for a blog post.
      summary: Get related posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - Blog Posts
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/update_likes:
    post:
      operationId: toggleBlogPostLike
      description: Like or unlike a blog post. Toggles the like status.
      summary: Toggle post like
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequestRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequestRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostLikedPostsResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/update_view_count:
    post:
      operationId: incrementBlogPostViews
      description: Increment the view count for a blog post.
      summary: Increment post view count
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostDetailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostDetailRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/featured:
    get:
      operationId: listFeaturedBlogPosts
      description: Get posts marked as featured, ordered by publication date.
      summary: Get featured posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - Blog Posts
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/liked_posts:
    post:
      operationId: checkBlogPostLikes
      description: Get all posts that the authenticated user has liked.
      summary: Get liked posts
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequestRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequestRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostLikedPostsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/popular:
    get:
      operationId: listPopularBlogPosts
      description: Get most popular blog posts based on all-time engagement metrics.
      summary: Get popular posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - Blog Posts
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/trending:
    get:
      operationId: listTrendingBlogPosts
      description: Get trending blog posts based on recent engagement metrics. Combines
        views, likes, and comments from recent time period.
      summary: Get trending posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: days
        schema:
          type: integer
          default: 7
        description: Number of days to look back for trending calculation
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - Blog Posts
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/tag:
    get:
      operationId: listBlogTag
      description: Retrieve a list of Blog Tags with filtering and search capabilities.
      summary: List Blog Tags
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
        description: Filter by active status
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter tags that have/don't have posts
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by tag ID
      - in: query
        name: maxPosts
        schema:
          type: number
        description: Filter tags with at most X posts
      - in: query
        name: minPosts
        schema:
          type: number
        description: Filter tags with at least X posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by tag name (partial match)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Blog Tags
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogTagList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: createBlogTag
      description: Create a new Blog Tag. Requires authentication.
      summary: Create a Blog Tag
      tags:
      - Blog Tags
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTagWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTagWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTagWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/tag/{id}:
    get:
      operationId: retrieveBlogTag
      description: Get detailed information about a specific Blog Tag.
      summary: Retrieve a Blog Tag
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: updateBlogTag
      description: Update Blog Tag information. Requires authentication.
      summary: Update a Blog Tag
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTagWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTagWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTagWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: partialUpdateBlogTag
      description: Partially update Blog Tag information. Requires authentication.
      summary: Partially update a Blog Tag
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogTagWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogTagWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogTagWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: destroyBlogTag
      description: Delete a Blog Tag. Requires authentication.
      summary: Delete a Blog Tag
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart:
    get:
      operationId: retrieveCart
      description: Get a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Get cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - Cart
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: updateCart
      description: Update a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Update cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - Cart
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CartWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: partialUpdateCart
      description: Update a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Update cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - Cart
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: destroyCart
      description: Delete a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Delete cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - Cart
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart/item:
    get:
      operationId: listCartItem
      description: Retrieve a list of cart items with filtering and search capabilities.
        For guest users, include X-Cart-Id and X-Session-Key headers to maintain cart
        session.
      summary: List cart items
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: query
        name: cart
        schema:
          type: integer
        description: Filter by cart ID
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by cart item ID
      - in: query
        name: inActiveCarts
        schema:
          type: boolean
        description: Filter items in active carts
      - in: query
        name: maxPrice
        schema:
          type: number
        description: Filter by maximum product price
      - in: query
        name: maxQuantity
        schema:
          type: integer
        description: Filter by maximum quantity
      - in: query
        name: minPrice
        schema:
          type: number
        description: Filter by minimum product price
      - in: query
        name: minQuantity
        schema:
          type: integer
        description: Filter by minimum quantity
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product
        schema:
          type: integer
        description: Filter by product ID
      - in: query
        name: productName
        schema:
          type: string
        description: Filter by product name (partial match)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      - in: query
        name: withDiscounts
        schema:
          type: boolean
        description: Filter items with product discounts
      tags:
      - Cart Items
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: createCartItem
      description: Create a new cart item. Requires authentication. For guest users,
        include X-Cart-Id and X-Session-Key headers to maintain cart session.
      summary: Create a cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - Cart Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart/item/{id}:
    get:
      operationId: retrieveCartItem
      description: Get detailed information about a specific cart item. For guest
        users, include X-Cart-Id and X-Session-Key headers to maintain cart session.
      summary: Retrieve a cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: updateCartItem
      description: Update cart item information. Requires authentication. For guest
        users, include X-Cart-Id and X-Session-Key headers to maintain cart session.
      summary: Update a cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: partialUpdateCartItem
      description: Partially update cart item information. Requires authentication.
        For guest users, include X-Cart-Id and X-Session-Key headers to maintain cart
        session.
      summary: Partially update a cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartItemWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartItemWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartItemWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: destroyCartItem
      description: Delete a cart item. Requires authentication. For guest users, include
        X-Cart-Id and X-Session-Key headers to maintain cart session.
      summary: Delete a cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/contact:
    post:
      operationId: createContact
      description: Send a contact message to the site administrators.
      summary: Create a contact message
      tags:
      - Contact
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ContactWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContactWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ContactWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactWrite'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/country:
    get:
      operationId: listCountry
      description: Retrieve a list of Countries with filtering and search capabilities.
      summary: List Countries
      parameters:
      - in: query
        name: alpha2
        schema:
          type: string
        description: Filter by 2-letter country code (partial match)
      - in: query
        name: alpha3
        schema:
          type: string
        description: Filter by 3-letter country code (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter countries created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter countries created before this date
      - in: query
        name: hasFlagImage
        schema:
          type: boolean
        description: Filter countries that have flag image
      - in: query
        name: hasIsoCc
        schema:
          type: boolean
        description: Filter countries that have ISO country code
      - in: query
        name: hasPhoneCode
        schema:
          type: boolean
        description: Filter countries that have phone code
      - in: query
        name: id
        schema:
          type: string
          format: uuid
        description: Filter by country UUID
      - in: query
        name: isoCc
        schema:
          type: integer
        description: Filter by ISO country code
      - in: query
        name: isoCcMax
        schema:
          type: integer
        description: Filter countries with ISO code less than or equal to
      - in: query
        name: isoCcMin
        schema:
          type: integer
        description: Filter countries with ISO code greater than or equal to
      - in: query
        name: name
        schema:
          type: string
        description: Filter by country name (partial match)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phoneCode
        schema:
          type: integer
        description: Filter by phone code
      - in: query
        name: phoneCodeMax
        schema:
          type: integer
        description: Filter countries with phone code less than or equal to
      - in: query
        name: phoneCodeMin
        schema:
          type: integer
        description: Filter countries with phone code greater than or equal to
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Countries
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCountryList'
          description: ''
    post:
      operationId: createCountry
      description: Create a new Country. Requires authentication.
      summary: Create a Country
      tags:
      - Countries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CountryWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CountryWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CountryWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetail'
          description: ''
  /api/v1/country/{alpha_2}:
    get:
      operationId: retrieveCountry
      description: Get detailed information about a specific Country.
      summary: Retrieve a Country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - Countries
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetail'
          description: ''
    put:
      operationId: updateCountry
      description: Update Country information. Requires authentication.
      summary: Update a Country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - Countries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CountryWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CountryWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/CountryWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetail'
          description: ''
    patch:
      operationId: partialUpdateCountry
      description: Partially update Country information. Requires authentication.
      summary: Partially update a Country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - Countries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCountryWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCountryWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCountryWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDetail'
          description: ''
    delete:
      operationId: destroyCountry
      description: Delete a Country. Requires authentication.
      summary: Delete a Country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - Countries
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/health:
    get:
      operationId: api_v1_health_retrieve
      description: Check the health status of database, Redis, and Celery
      summary: Check the health status of database, Redis, and Celery
      tags:
      - Health
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
          description: ''
  /api/v1/notification/ids:
    post:
      operationId: getNotificationsByIds
      description: Returns the notifications for a list of ids.
      summary: Returns the notifications for a list of ids.
      tags:
      - Notifications
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
  /api/v1/notification/user/:
    get:
      operationId: listNotificationUser
      description: Retrieve a list of Notification Users with filtering and search
        capabilities.
      summary: List Notification Users
      parameters:
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
      - in: query
        name: hasSeenAt
        schema:
          type: boolean
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: notification
        schema:
          type: integer
      - in: query
        name: notificationCategory
        schema:
          type: string
      - in: query
        name: notificationKind
        schema:
          type: string
      - in: query
        name: notificationPriority
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: seen
        schema:
          type: boolean
      - in: query
        name: seenAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: seenBefore
        schema:
          type: string
          format: date-time
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - Notification Users
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationUserList'
          description: ''
    post:
      operationId: createNotificationUser
      description: Create a new Notification User. Requires authentication.
      summary: Create a Notification User
      tags:
      - Notification Users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUserDetail'
          description: ''
  /api/v1/notification/user/{id}/:
    get:
      operationId: retrieveNotificationUser
      description: Get detailed information about a specific Notification User.
      summary: Retrieve a Notification User
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notification Users
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUserDetail'
          description: ''
    put:
      operationId: updateNotificationUser
      description: Update Notification User information. Requires authentication.
      summary: Update a Notification User
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notification Users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUserDetail'
          description: ''
    patch:
      operationId: partialUpdateNotificationUser
      description: Partially update Notification User information. Requires authentication.
      summary: Partially update a Notification User
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notification Users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUserWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUserWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUserWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUserDetail'
          description: ''
    delete:
      operationId: destroyNotificationUser
      description: Delete a Notification User. Requires authentication.
      summary: Delete a Notification User
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notification Users
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/notification/user/mark_all_as_seen/:
    post:
      operationId: markAllNotificationUsersAsSeen
      description: Mark all of the authenticated user's notifications as seen.
      summary: Mark all notifications as seen
      tags:
      - Notification Users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserDetailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserDetailRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/mark_all_as_unseen/:
    post:
      operationId: markAllNotificationUsersAsUnseen
      description: Mark all of the authenticated user's notifications as unseen.
      summary: Mark all notifications as unseen
      tags:
      - Notification Users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserDetailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserDetailRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/mark_as_seen/:
    post:
      operationId: markNotificationUsersAsSeen
      description: Mark specific notifications as seen for the authenticated user.
      summary: Mark specific notifications as seen
      tags:
      - Notification Users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserActionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserActionRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserActionRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/mark_as_unseen/:
    post:
      operationId: markNotificationUsersAsUnseen
      description: Mark specific notifications as unseen for the authenticated user.
      summary: Mark specific notifications as unseen
      tags:
      - Notification Users
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserActionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserActionRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserActionRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/unseen_count/:
    get:
      operationId: getNotificationUserUnseenCount
      description: Get the count of unseen notifications for the authenticated user.
      summary: Get unseen notifications count
      tags:
      - Notification Users
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationCountResponse'
          description: ''
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationInfoResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order:
    get:
      operationId: listOrder
      description: Retrieve a list of Orders with filtering and search capabilities.
      summary: List Orders
      parameters:
      - in: query
        name: city
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: number
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
      - in: query
        name: documentType
        schema:
          type: string
      - in: query
        name: floor
        schema:
          type: string
      - in: query
        name: hasCustomerNotes
        schema:
          type: boolean
      - in: query
        name: hasMobilePhone
        schema:
          type: boolean
      - in: query
        name: hasPaymentId
        schema:
          type: boolean
      - in: query
        name: hasTracking
        schema:
          type: boolean
      - in: query
        name: hasUser
        schema:
          type: boolean
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: locationType
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: paidAmountMax
        schema:
          type: number
      - in: query
        name: paidAmountMin
        schema:
          type: number
      - in: query
        name: payWay
        schema:
          type: integer
      - in: query
        name: paymentStatus
        schema:
          type: string
      - in: query
        name: place
        schema:
          type: string
      - in: query
        name: region
        schema:
          type: number
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: shippingPriceMax
        schema:
          type: number
      - in: query
        name: shippingPriceMin
        schema:
          type: number
      - in: query
        name: status
        schema:
          type: string
      - in: query
        name: statusUpdatedAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: statusUpdatedBefore
        schema:
          type: string
          format: date-time
      - in: query
        name: user
        schema:
          type: integer
      - in: query
        name: userId
        schema:
          type: number
      - in: query
        name: zipcode
        schema:
          type: string
      tags:
      - Orders
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
    post:
      operationId: createOrder
      description: Create a new Ταξινόμηση. Requires authentication.
      summary: Create a Ταξινόμηση
      tags:
      - Orders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/v1/order-items:
    get:
      operationId: listOrderItem
      description: Retrieve a list of Order Items with filtering and search capabilities.
      summary: List Order Items
      parameters:
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter items created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter items created before this date
      - in: query
        name: hasNotes
        schema:
          type: boolean
        description: Filter items that have/don't have notes
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by order item ID
      - in: query
        name: isRefunded
        schema:
          type: boolean
        description: Filter by refund status
      - in: query
        name: order
        schema:
          type: integer
        description: Filter by order ID
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: priceMax
        schema:
          type: number
        description: Filter by maximum price
      - in: query
        name: priceMin
        schema:
          type: number
        description: Filter by minimum price
      - in: query
        name: product
        schema:
          type: integer
        description: Filter by product ID
      - in: query
        name: productName
        schema:
          type: string
        description: Filter by product name (partial match)
      - in: query
        name: quantityMax
        schema:
          type: integer
        description: Filter by maximum quantity
      - in: query
        name: quantityMin
        schema:
          type: integer
        description: Filter by minimum quantity
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Order Items
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderItemList'
          description: ''
    post:
      operationId: createOrderItem
      description: Create a new Order Item. Requires authentication.
      summary: Create a Order Item
      tags:
      - Order Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItemWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItemWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
          description: ''
  /api/v1/order-items/{id}:
    get:
      operationId: retrieveOrderItem
      description: Get detailed information about a specific Order Item.
      summary: Retrieve a Order Item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order Items
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
          description: ''
    put:
      operationId: updateOrderItem
      description: Update Order Item information. Requires authentication.
      summary: Update a Order Item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItemWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItemWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
          description: ''
    patch:
      operationId: partialUpdateOrderItem
      description: Partially update Order Item information. Requires authentication.
      summary: Partially update a Order Item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderItemWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderItemWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderItemWriteRequest'
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
          description: ''
    delete:
      operationId: destroyOrderItem
      description: Delete a Order Item. Requires authentication.
      summary: Delete a Order Item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order Items
      security:
      - knoxApiToken: []
      responses:
        '204':
          description: No response body
  /api/v1/order-items/{id}/refund:
    post:
      operationId: refundOrderItem
      description: Process a refund for an order item.
      summary: Process a refund for an order item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItemRefundRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItemRefundRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemRefundRequest'
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}:
    get:
      operationId: retrieveOrder
      description: Get detailed information about a specific Ταξινόμηση.
      summary: Retrieve a Ταξινόμηση
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Orders
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
    put:
      operationId: updateOrder
      description: Update Ταξινόμηση information. Requires authentication.
      summary: Update a Ταξινόμηση
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Orders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
    patch:
      operationId: partialUpdateOrder
      description: Partially update Ταξινόμηση information. Requires authentication.
      summary: Partially update a Ταξινόμηση
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Orders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderWriteRequest'
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
    delete:
      operationId: destroyOrder
      description: Delete a Ταξινόμηση. Requires authentication.
      summary: Delete a Ταξινόμηση
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Orders
      security:
      - knoxApiToken: []
      responses:
        '204':
          description: No response body
  /api/v1/order/{id}/add_tracking:
    post:
      operationId: addOrderTracking
      description: Add tracking information to an existing order
      summary: Add tracking information to an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Orders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}/cancel:
    post:
      operationId: cancelOrder
      description: Cancel an existing order and restore product stock
      summary: Cancel an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Orders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}/payment_status:
    get:
      operationId: checkOrderPaymentStatus
      description: Retrieves the current payment status for the specified order.
      summary: Check payment status
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order Payment
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatusResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}/process_payment:
    post:
      operationId: processOrderPayment
      description: Initiates payment processing for the specified order using the
        provided payment method.
      summary: Process payment for an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order Payment
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProcessPaymentRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProcessPaymentRequestRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessPaymentRequestRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessPaymentResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}/refund:
    post:
      operationId: refundOrderPayment
      description: Initiates a refund for the specified order. Requires admin permissions.
      summary: Refund payment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order Payment
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefundRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefundRequestRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequestRequest'
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}/update_status:
    post:
      operationId: updateOrderStatus
      description: Update the status of an existing order
      summary: Update the status of an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Orders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/my_orders:
    get:
      operationId: listMyOrders
      description: Returns a list of the authenticated user's orders
      summary: List current user's orders
      parameters:
      - in: query
        name: city
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: number
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
      - in: query
        name: documentType
        schema:
          type: string
      - in: query
        name: floor
        schema:
          type: string
      - in: query
        name: hasCustomerNotes
        schema:
          type: boolean
      - in: query
        name: hasMobilePhone
        schema:
          type: boolean
      - in: query
        name: hasPaymentId
        schema:
          type: boolean
      - in: query
        name: hasTracking
        schema:
          type: boolean
      - in: query
        name: hasUser
        schema:
          type: boolean
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: locationType
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: paidAmountMax
        schema:
          type: number
      - in: query
        name: paidAmountMin
        schema:
          type: number
      - in: query
        name: payWay
        schema:
          type: integer
      - in: query
        name: paymentStatus
        schema:
          type: string
      - in: query
        name: place
        schema:
          type: string
      - in: query
        name: region
        schema:
          type: number
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: shippingPriceMax
        schema:
          type: number
      - in: query
        name: shippingPriceMin
        schema:
          type: number
      - in: query
        name: status
        schema:
          type: string
      - in: query
        name: statusUpdatedAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: statusUpdatedBefore
        schema:
          type: string
          format: date-time
      - in: query
        name: user
        schema:
          type: integer
      - in: query
        name: userId
        schema:
          type: number
      - in: query
        name: zipcode
        schema:
          type: string
      tags:
      - Orders
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/uuid/{uuid}:
    get:
      operationId: retrieveOrderByUuid
      description: Get detailed information about a specific order using its UUID
      summary: Retrieve an order by UUID
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Orders
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/pay_way:
    get:
      operationId: listPayWay
      description: Retrieve a list of Pay Ways with filtering and search capabilities.
      summary: List Pay Ways
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
        description: Filter by active status
      - in: query
        name: costMax
        schema:
          type: number
        description: Filter by maximum cost
      - in: query
        name: costMin
        schema:
          type: number
        description: Filter by minimum cost
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description (partial match)
      - in: query
        name: freeThresholdMax
        schema:
          type: number
        description: Filter by maximum free threshold
      - in: query
        name: freeThresholdMin
        schema:
          type: number
        description: Filter by minimum free threshold
      - in: query
        name: hasConfiguration
        schema:
          type: boolean
        description: Filter payment methods that have/don't have configuration
      - in: query
        name: hasIcon
        schema:
          type: boolean
        description: Filter payment methods that have/don't have an icon
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by payment method ID
      - in: query
        name: isOnlinePayment
        schema:
          type: boolean
        description: Filter by online payment status
      - in: query
        name: name
        schema:
          type: string
        description: Filter by name (partial match)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: providerCode
        schema:
          type: string
        description: Filter by provider code (partial match)
      - in: query
        name: requiresConfirmation
        schema:
          type: boolean
        description: Filter by confirmation requirement
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Payment methods
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPayWayList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: createPayWay
      description: Create a new Pay Way. Requires authentication.
      summary: Create a Pay Way
      tags:
      - Payment methods
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayWayWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayWayWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PayWayWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWayDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/pay_way/{id}:
    get:
      operationId: retrievePayWay
      description: Get detailed information about a specific Pay Way.
      summary: Retrieve a Pay Way
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Payment methods
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWayDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: updatePayWay
      description: Update Pay Way information. Requires authentication.
      summary: Update a Pay Way
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Payment methods
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayWayWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayWayWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PayWayWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWayDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: partialUpdatePayWay
      description: Partially update Pay Way information. Requires authentication.
      summary: Partially update a Pay Way
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Payment methods
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPayWayWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPayWayWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPayWayWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWayDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: destroyPayWay
      description: Delete a Pay Way. Requires authentication.
      summary: Delete a Pay Way
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Payment methods
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product:
    get:
      operationId: listProduct
      description: Retrieve a list of Products with filtering and search capabilities.
      summary: List Products
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: createProduct
      description: Create a new Product. Requires authentication.
      summary: Create a Product
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
  /api/v1/product/{id}:
    get:
      operationId: retrieveProduct
      description: Get detailed information about a specific Product.
      summary: Retrieve a Product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
    put:
      operationId: updateProduct
      description: Update Product information. Requires authentication.
      summary: Update a Product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
    patch:
      operationId: partialUpdateProduct
      description: Partially update Product information. Requires authentication.
      summary: Partially update a Product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
    delete:
      operationId: destroyProduct
      description: Delete a Product. Requires authentication.
      summary: Delete a Product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/{id}/images:
    get:
      operationId: listProductImages
      description: Get all images for a product.
      summary: Get product images
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductImageList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}/reviews:
    get:
      operationId: listProductReviews
      description: Get all reviews for a product.
      summary: Get product reviews
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}/tags:
    get:
      operationId: listProductTags
      description: Get all tags associated with a product.
      summary: Get product tags
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTagList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}/update_view_count:
    post:
      operationId: incrementProductViews
      description: Increment the view count for a product.
      summary: Increment product view count
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductDetailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetailRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/category:
    get:
      operationId: listProductCategory
      description: Retrieve a list of Product Categories with filtering and search
        capabilities.
      summary: List Product Categories
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      tags:
      - Product Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductCategoryList'
          description: ''
    post:
      operationId: createProductCategory
      description: Create a new Product Category. Requires authentication.
      summary: Create a Product Category
      tags:
      - Product Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategoryWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategoryWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategoryWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryDetail'
          description: ''
  /api/v1/product/category/{id}:
    get:
      operationId: retrieveProductCategory
      description: Get detailed information about a specific Product Category.
      summary: Retrieve a Product Category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryDetail'
          description: ''
    put:
      operationId: updateProductCategory
      description: Update Product Category information. Requires authentication.
      summary: Update a Product Category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategoryWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategoryWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategoryWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryDetail'
          description: ''
    patch:
      operationId: partialUpdateProductCategory
      description: Partially update Product Category information. Requires authentication.
      summary: Partially update a Product Category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductCategoryWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductCategoryWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductCategoryWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryDetail'
          description: ''
    delete:
      operationId: destroyProductCategory
      description: Delete a Product Category. Requires authentication.
      summary: Delete a Product Category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/category/image:
    get:
      operationId: listProductCategoryImage
      description: Retrieve a list of Product Category Images with filtering and search
        capabilities.
      summary: List Product Category Images
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: imageType
        schema:
          type: string
          enum:
          - BACKGROUND
          - BANNER
          - FEATURE
          - GALLERY
          - HERO
          - ICON
          - MAIN
          - PROMOTIONAL
          - SEASONAL
          - THUMBNAIL
        description: |-
          * `MAIN` - Main Image
          * `BANNER` - Banner Image
          * `ICON` - Icon Image
          * `THUMBNAIL` - Thumbnail Image
          * `GALLERY` - Gallery Image
          * `BACKGROUND` - Background Image
          * `HERO` - Hero Image
          * `FEATURE` - Feature Image
          * `PROMOTIONAL` - Promotional Image
          * `SEASONAL` - Seasonal Image
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Product Category Images
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductCategoryImageList'
          description: ''
    post:
      operationId: createProductCategoryImage
      description: Create a new Product Category Image. Requires authentication.
      summary: Create a Product Category Image
      tags:
      - Product Category Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategoryImageWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategoryImageWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategoryImageWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryImageDetail'
          description: ''
  /api/v1/product/category/image/{id}:
    get:
      operationId: retrieveProductCategoryImage
      description: Get detailed information about a specific Product Category Image.
      summary: Retrieve a Product Category Image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Category Images
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryImageDetail'
          description: ''
    put:
      operationId: updateProductCategoryImage
      description: Update Product Category Image information. Requires authentication.
      summary: Update a Product Category Image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Category Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategoryImageWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategoryImageWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategoryImageWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryImageDetail'
          description: ''
    patch:
      operationId: partialUpdateProductCategoryImage
      description: Partially update Product Category Image information. Requires authentication.
      summary: Partially update a Product Category Image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Category Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductCategoryImageWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductCategoryImageWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductCategoryImageWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryImageDetail'
          description: ''
    delete:
      operationId: destroyProductCategoryImage
      description: Delete a Product Category Image. Requires authentication.
      summary: Delete a Product Category Image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Category Images
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/category/image/bulk_update:
    patch:
      operationId: bulkUpdateProductCategoryImages
      description: Update multiple category images at once. Can update active status
        and sort order.
      summary: Bulk update category images
      tags:
      - Product Category Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductCategoryImageBulkUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductCategoryImageBulkUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductCategoryImageBulkUpdateRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategoryImageBulkResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/category/image/by_category:
    get:
      operationId: getProductCategoryImagesByCategory
      description: Retrieve all images for a specific category.
      summary: Get images by category
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: imageType
        schema:
          type: string
          enum:
          - BACKGROUND
          - BANNER
          - FEATURE
          - GALLERY
          - HERO
          - ICON
          - MAIN
          - PROMOTIONAL
          - SEASONAL
          - THUMBNAIL
        description: |-
          * `MAIN` - Main Image
          * `BANNER` - Banner Image
          * `ICON` - Icon Image
          * `THUMBNAIL` - Thumbnail Image
          * `GALLERY` - Gallery Image
          * `BACKGROUND` - Background Image
          * `HERO` - Hero Image
          * `FEATURE` - Feature Image
          * `PROMOTIONAL` - Promotional Image
          * `SEASONAL` - Seasonal Image
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Product Category Images
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductCategoryImageList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/category/image/by_type:
    get:
      operationId: getProductCategoryImagesByType
      description: Retrieve all images of a specific type (main, banner, icon, etc.).
      summary: Get images by type
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: imageType
        schema:
          type: string
          enum:
          - BACKGROUND
          - BANNER
          - FEATURE
          - GALLERY
          - HERO
          - ICON
          - MAIN
          - PROMOTIONAL
          - SEASONAL
          - THUMBNAIL
        description: |-
          * `MAIN` - Main Image
          * `BANNER` - Banner Image
          * `ICON` - Icon Image
          * `THUMBNAIL` - Thumbnail Image
          * `GALLERY` - Gallery Image
          * `BACKGROUND` - Background Image
          * `HERO` - Hero Image
          * `FEATURE` - Feature Image
          * `PROMOTIONAL` - Promotional Image
          * `SEASONAL` - Seasonal Image
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Product Category Images
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductCategoryImageList'
          description: ''
  /api/v1/product/favourite:
    get:
      operationId: listProductFavourite
      description: Retrieve a list of Product Favourites with filtering and search
        capabilities.
      summary: List Product Favourites
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - Product Favourite
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
    post:
      operationId: createProductFavourite
      description: Create a new Product Favourite. Requires authentication.
      summary: Create a Product Favourite
      tags:
      - Product Favourite
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavouriteWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavouriteWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavouriteWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavouriteDetail'
          description: ''
  /api/v1/product/favourite/{id}:
    get:
      operationId: retrieveProductFavourite
      description: Get detailed information about a specific Product Favourite.
      summary: Retrieve a Product Favourite
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourite
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavouriteDetail'
          description: ''
    put:
      operationId: updateProductFavourite
      description: Update Product Favourite information. Requires authentication.
      summary: Update a Product Favourite
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourite
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavouriteWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavouriteWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavouriteWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavouriteDetail'
          description: ''
    patch:
      operationId: partialUpdateProductFavourite
      description: Partially update Product Favourite information. Requires authentication.
      summary: Partially update a Product Favourite
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourite
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductFavouriteWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductFavouriteWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductFavouriteWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavouriteDetail'
          description: ''
    delete:
      operationId: destroyProductFavourite
      description: Delete a Product Favourite. Requires authentication.
      summary: Delete a Product Favourite
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourite
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/favourite/{id}/product:
    get:
      operationId: getProductFavouriteProduct
      description: Get detailed information about the product in this favourite entry.
      summary: Get favourite product details
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourites
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailResponse'
          description: ''
  /api/v1/product/favourite/favourites_by_products:
    post:
      operationId: getProductFavouritesByProducts
      description: Get favourite entries for the specified product IDs. Requires authentication.
      summary: Get favourites by product IDs
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - Product Favourites
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavouriteByProductsRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavouriteByProductsRequestRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavouriteByProductsRequestRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteByProductsResponseList'
          description: ''
  /api/v1/product/image:
    get:
      operationId: listProductImage
      description: Retrieve a list of Product Images with filtering and search capabilities.
      summary: List Product Images
      parameters:
      - in: query
        name: createdAt
        schema:
          type: string
          format: date-time
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isMain
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: updatedAt
        schema:
          type: string
          format: date-time
      tags:
      - Product Images
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductImageList'
          description: ''
    post:
      operationId: createProductImage
      description: Create a new Product Image. Requires authentication.
      summary: Create a Product Image
      tags:
      - Product Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImageWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImageWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImageWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageDetail'
          description: ''
  /api/v1/product/image/{id}:
    get:
      operationId: retrieveProductImage
      description: Get detailed information about a specific Product Image.
      summary: Retrieve a Product Image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageDetail'
          description: ''
    put:
      operationId: updateProductImage
      description: Update Product Image information. Requires authentication.
      summary: Update a Product Image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImageWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImageWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImageWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageDetail'
          description: ''
    patch:
      operationId: partialUpdateProductImage
      description: Partially update Product Image information. Requires authentication.
      summary: Partially update a Product Image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductImageWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductImageWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductImageWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImageDetail'
          description: ''
    delete:
      operationId: destroyProductImage
      description: Delete a Product Image. Requires authentication.
      summary: Delete a Product Image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/review:
    get:
      operationId: listProductReview
      description: Retrieve a list of Product Reviews with filtering and search capabilities.
      summary: List Product Reviews
      parameters:
      - in: query
        name: comment
        schema:
          type: string
        description: Filter by comment content (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter reviews created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter reviews created before this date
      - in: query
        name: hasComment
        schema:
          type: boolean
        description: Filter reviews that have/don't have comments
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by review ID
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: isVisible
        schema:
          type: boolean
        description: Filter by visibility status
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product
        schema:
          type: number
        description: Filter by product ID
      - in: query
        name: productName
        schema:
          type: string
        description: Filter by product name (partial match)
      - in: query
        name: publishedAfter
        schema:
          type: string
          format: date-time
        description: Filter reviews published after this date
      - in: query
        name: publishedBefore
        schema:
          type: string
          format: date-time
        description: Filter reviews published before this date
      - in: query
        name: rate
        schema:
          type: integer
          enum:
          - 1
          - 10
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
        description: |-
          Filter by rating

          * `1` - One
          * `2` - Two
          * `3` - Three
          * `4` - Four
          * `5` - Five
          * `6` - Six
          * `7` - Seven
          * `8` - Eight
          * `9` - Nine
          * `10` - Ten
      - in: query
        name: rateMax
        schema:
          type: integer
        description: Filter by maximum rating
      - in: query
        name: rateMin
        schema:
          type: integer
        description: Filter by minimum rating
      - in: query
        name: recentDays
        schema:
          type: number
        description: Filter reviews from the last N days
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - 'FALSE'
          - NEW
          - 'TRUE'
        description: |-
          Filter by review status

          * `NEW` - New
          * `TRUE` - True
          * `FALSE` - False
      - in: query
        name: user
        schema:
          type: number
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      tags:
      - Product Reviews
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: createProductReview
      description: Create a new Product Review. Requires authentication.
      summary: Create a Product Review
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReviewWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReviewWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReviewWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReviewDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/review/{id}:
    get:
      operationId: retrieveProductReview
      description: Get detailed information about a specific Product Review.
      summary: Retrieve a Product Review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReviewDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: updateProductReview
      description: Update Product Review information. Requires authentication.
      summary: Update a Product Review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReviewWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReviewWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReviewWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReviewDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: partialUpdateProductReview
      description: Partially update Product Review information. Requires authentication.
      summary: Partially update a Product Review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductReviewWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductReviewWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductReviewWriteRequest'
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReviewDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: destroyProductReview
      description: Delete a Product Review. Requires authentication.
      summary: Delete a Product Review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      security:
      - knoxApiToken: []
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/review/{id}/product:
    get:
      operationId: getProductReviewProduct
      description: Get detailed information about the product this review is for.
      summary: Get reviewed product details
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Reviews
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/review/user_product_review:
    post:
      operationId: getUserProductReview
      description: Get the current user's review for a specific product. Requires
        authentication.
      summary: Get user's review for a product
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProductReviewRequestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProductReviewRequestRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserProductReviewRequestRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReviewDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/region:
    get:
      operationId: listRegion
      description: Retrieve a list of Regions with filtering and search capabilities.
      summary: List Regions
      parameters:
      - in: query
        name: alpha
        schema:
          type: string
        description: Filter by region alpha code (partial match)
      - in: query
        name: alpha_Icontains
        schema:
          type: string
      - in: query
        name: alphaExact
        schema:
          type: string
        description: Filter by exact region alpha code
      - in: query
        name: country
        schema:
          type: string
        description: Filter by country alpha-2 code
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter regions created after this date
      - in: query
        name: createdAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter regions created before this date
      - in: query
        name: name
        schema:
          type: string
        description: Filter by region name (partial match)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
        description: Filter regions updated after this date
      - in: query
        name: updatedAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
        description: Filter regions updated before this date
      tags:
      - Regions
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegionList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: createRegion
      description: Create a new Region. Requires authentication.
      summary: Create a Region
      tags:
      - Regions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegionWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegionWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/region/{alpha}:
    get:
      operationId: retrieveRegion
      description: Get detailed information about a specific Region.
      summary: Retrieve a Region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - Regions
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: updateRegion
      description: Update Region information. Requires authentication.
      summary: Update a Region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - Regions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegionWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegionWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: partialUpdateRegion
      description: Partially update Region information. Requires authentication.
      summary: Partially update a Region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - Regions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegionWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegionWriteRequest'
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: destroyRegion
      description: Delete a Region. Requires authentication.
      summary: Delete a Region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - Regions
      security:
      - knoxApiToken: []
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/region/{alpha}/get_regions_by_country_alpha_2:
    get:
      operationId: listRegionsByCountry
      description: Get all regions for a specific country using its alpha-2 code.
      summary: Get regions by country
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: query
        name: alpha
        schema:
          type: string
        description: Filter by region alpha code (partial match)
      - in: query
        name: alpha_Icontains
        schema:
          type: string
      - in: query
        name: alphaExact
        schema:
          type: string
        description: Filter by exact region alpha code
      - in: query
        name: country
        schema:
          type: string
        description: Filter by country alpha-2 code
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter regions created after this date
      - in: query
        name: createdAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter regions created before this date
      - in: query
        name: name
        schema:
          type: string
        description: Filter by region name (partial match)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
        description: Filter regions updated after this date
      - in: query
        name: updatedAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
        description: Filter regions updated before this date
      tags:
      - Geography
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/search/blog/post:
    get:
      operationId: api_v1_search_blog_post_retrieve
      description: Search blog posts using MeiliSearch. Provides full-text search
        with highlighting, ranking, and faceting capabilities.
      summary: Search blog posts
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
          default: 10
        description: Maximum number of results to return
      - in: query
        name: offset
        schema:
          type: integer
          default: 0
        description: Number of results to skip
      - in: query
        name: query
        schema:
          type: string
        description: Search query string
        required: true
      tags:
      - Search
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostMeiliSearchResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/search/product:
    get:
      operationId: api_v1_search_product_retrieve
      description: Search products using MeiliSearch. Provides full-text search with
        highlighting, ranking, and faceting capabilities.
      summary: Search products
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
          default: 10
        description: Maximum number of results to return
      - in: query
        name: offset
        schema:
          type: integer
          default: 0
        description: Number of results to skip
      - in: query
        name: query
        schema:
          type: string
        description: Search query string
        required: true
      tags:
      - Search
      security:
      - knoxApiToken: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMeiliSearchResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account:
    get:
      operationId: listUserAccount
      description: Retrieve a list of User Accounts with filtering and search capabilities.
      summary: List User Accounts
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city (partial match)
      - in: query
        name: city_Icontains
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
        description: Filter by country alpha-2 code
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter users created after this date
      - in: query
        name: createdAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter users created before this date
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (partial match)
      - in: query
        name: email_Icontains
        schema:
          type: string
      - in: query
        name: emailExact
        schema:
          type: string
        description: Filter by exact email
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: firstName_Icontains
        schema:
          type: string
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by user account ID
      - in: query
        name: isActive
        schema:
          type: boolean
        description: Filter by active status
      - in: query
        name: isStaff
        schema:
          type: boolean
        description: Filter by staff status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: lastName_Icontains
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: region
        schema:
          type: string
        description: Filter by region alpha code
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
        description: Filter users updated after this date
      - in: query
        name: updatedAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
        description: Filter users updated before this date
      - in: query
        name: username
        schema:
          type: string
        description: Filter by username (partial match)
      - in: query
        name: username_Icontains
        schema:
          type: string
      - in: query
        name: usernameExact
        schema:
          type: string
        description: Filter by exact username
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcode_Icontains
        schema:
          type: string
      tags:
      - User Accounts
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuthenticationList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: createUserAccount
      description: Create a new User Account. Requires authentication.
      summary: Create a User Account
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}:
    get:
      operationId: retrieveUserAccount
      description: Get detailed information about a specific User Account.
      summary: Retrieve a User Account
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: updateUserAccount
      description: Update User Account information. Requires authentication.
      summary: Update a User Account
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: partialUpdateUserAccount
      description: Partially update User Account information. Requires authentication.
      summary: Partially update a User Account
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAuthenticationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAuthenticationRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAuthenticationRequest'
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: destroyUserAccount
      description: Delete a User Account. Requires authentication.
      summary: Delete a User Account
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      security:
      - knoxApiToken: []
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/addresses:
    get:
      operationId: getUserAccountAddresses
      description: Get all addresses for a specific user.
      summary: Get user's addresses
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city (partial match)
      - in: query
        name: city_Icontains
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
        description: Filter by country alpha-2 code
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter users created after this date
      - in: query
        name: createdAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter users created before this date
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (partial match)
      - in: query
        name: email_Icontains
        schema:
          type: string
      - in: query
        name: emailExact
        schema:
          type: string
        description: Filter by exact email
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: firstName_Icontains
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by user account ID
      - in: query
        name: isActive
        schema:
          type: boolean
        description: Filter by active status
      - in: query
        name: isStaff
        schema:
          type: boolean
        description: Filter by staff status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: lastName_Icontains
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: region
        schema:
          type: string
        description: Filter by region alpha code
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
        description: Filter users updated after this date
      - in: query
        name: updatedAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
        description: Filter users updated before this date
      - in: query
        name: username
        schema:
          type: string
        description: Filter by username (partial match)
      - in: query
        name: username_Icontains
        schema:
          type: string
      - in: query
        name: usernameExact
        schema:
          type: string
        description: Filter by exact username
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcode_Icontains
        schema:
          type: string
      tags:
      - User Accounts
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAddressList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/blog_post_comments:
    get:
      operationId: getUserAccountBlogPostComments
      description: Get all blog post comments written by a specific user.
      summary: Get user's blog comments
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city (partial match)
      - in: query
        name: city_Icontains
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
        description: Filter by country alpha-2 code
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter users created after this date
      - in: query
        name: createdAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter users created before this date
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (partial match)
      - in: query
        name: email_Icontains
        schema:
          type: string
      - in: query
        name: emailExact
        schema:
          type: string
        description: Filter by exact email
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: firstName_Icontains
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by user account ID
      - in: query
        name: isActive
        schema:
          type: boolean
        description: Filter by active status
      - in: query
        name: isStaff
        schema:
          type: boolean
        description: Filter by staff status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: lastName_Icontains
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: region
        schema:
          type: string
        description: Filter by region alpha code
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
        description: Filter users updated after this date
      - in: query
        name: updatedAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
        description: Filter users updated before this date
      - in: query
        name: username
        schema:
          type: string
        description: Filter by username (partial match)
      - in: query
        name: username_Icontains
        schema:
          type: string
      - in: query
        name: usernameExact
        schema:
          type: string
        description: Filter by exact username
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcode_Icontains
        schema:
          type: string
      tags:
      - User Accounts
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/change_username:
    post:
      operationId: changeUserAccountUsername
      description: Change the username for a specific user.
      summary: Change username
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameUpdateRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameUpdateResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/favourite_products:
    get:
      operationId: getUserAccountFavouriteProducts
      description: Get all favourite products for a specific user.
      summary: Get user's favourite products
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city (partial match)
      - in: query
        name: city_Icontains
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
        description: Filter by country alpha-2 code
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter users created after this date
      - in: query
        name: createdAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter users created before this date
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (partial match)
      - in: query
        name: email_Icontains
        schema:
          type: string
      - in: query
        name: emailExact
        schema:
          type: string
        description: Filter by exact email
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: firstName_Icontains
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by user account ID
      - in: query
        name: isActive
        schema:
          type: boolean
        description: Filter by active status
      - in: query
        name: isStaff
        schema:
          type: boolean
        description: Filter by staff status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: lastName_Icontains
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: region
        schema:
          type: string
        description: Filter by region alpha code
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
        description: Filter users updated after this date
      - in: query
        name: updatedAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
        description: Filter users updated before this date
      - in: query
        name: username
        schema:
          type: string
        description: Filter by username (partial match)
      - in: query
        name: username_Icontains
        schema:
          type: string
      - in: query
        name: usernameExact
        schema:
          type: string
        description: Filter by exact username
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcode_Icontains
        schema:
          type: string
      tags:
      - User Accounts
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/liked_blog_posts:
    get:
      operationId: getUserAccountLikedBlogPosts
      description: Get all blog posts liked by a specific user.
      summary: Get user's liked blog posts
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city (partial match)
      - in: query
        name: city_Icontains
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
        description: Filter by country alpha-2 code
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter users created after this date
      - in: query
        name: createdAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter users created before this date
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (partial match)
      - in: query
        name: email_Icontains
        schema:
          type: string
      - in: query
        name: emailExact
        schema:
          type: string
        description: Filter by exact email
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: firstName_Icontains
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by user account ID
      - in: query
        name: isActive
        schema:
          type: boolean
        description: Filter by active status
      - in: query
        name: isStaff
        schema:
          type: boolean
        description: Filter by staff status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: lastName_Icontains
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: region
        schema:
          type: string
        description: Filter by region alpha code
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
        description: Filter users updated after this date
      - in: query
        name: updatedAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
        description: Filter users updated before this date
      - in: query
        name: username
        schema:
          type: string
        description: Filter by username (partial match)
      - in: query
        name: username_Icontains
        schema:
          type: string
      - in: query
        name: usernameExact
        schema:
          type: string
        description: Filter by exact username
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcode_Icontains
        schema:
          type: string
      tags:
      - User Accounts
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/notifications:
    get:
      operationId: getUserAccountNotifications
      description: Get all notifications for a specific user.
      summary: Get user's notifications
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city (partial match)
      - in: query
        name: city_Icontains
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
        description: Filter by country alpha-2 code
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter users created after this date
      - in: query
        name: createdAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter users created before this date
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (partial match)
      - in: query
        name: email_Icontains
        schema:
          type: string
      - in: query
        name: emailExact
        schema:
          type: string
        description: Filter by exact email
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: firstName_Icontains
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by user account ID
      - in: query
        name: isActive
        schema:
          type: boolean
        description: Filter by active status
      - in: query
        name: isStaff
        schema:
          type: boolean
        description: Filter by staff status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: lastName_Icontains
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: region
        schema:
          type: string
        description: Filter by region alpha code
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
        description: Filter users updated after this date
      - in: query
        name: updatedAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
        description: Filter users updated before this date
      - in: query
        name: username
        schema:
          type: string
        description: Filter by username (partial match)
      - in: query
        name: username_Icontains
        schema:
          type: string
      - in: query
        name: usernameExact
        schema:
          type: string
        description: Filter by exact username
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcode_Icontains
        schema:
          type: string
      tags:
      - User Accounts
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationUserList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/orders:
    get:
      operationId: getUserAccountOrders
      description: Get all orders for a specific user.
      summary: Get user's orders
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city (partial match)
      - in: query
        name: city_Icontains
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
        description: Filter by country alpha-2 code
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter users created after this date
      - in: query
        name: createdAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter users created before this date
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (partial match)
      - in: query
        name: email_Icontains
        schema:
          type: string
      - in: query
        name: emailExact
        schema:
          type: string
        description: Filter by exact email
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: firstName_Icontains
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by user account ID
      - in: query
        name: isActive
        schema:
          type: boolean
        description: Filter by active status
      - in: query
        name: isStaff
        schema:
          type: boolean
        description: Filter by staff status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: lastName_Icontains
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: region
        schema:
          type: string
        description: Filter by region alpha code
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
        description: Filter users updated after this date
      - in: query
        name: updatedAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
        description: Filter users updated before this date
      - in: query
        name: username
        schema:
          type: string
        description: Filter by username (partial match)
      - in: query
        name: username_Icontains
        schema:
          type: string
      - in: query
        name: usernameExact
        schema:
          type: string
        description: Filter by exact username
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcode_Icontains
        schema:
          type: string
      tags:
      - User Accounts
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/product_reviews:
    get:
      operationId: getUserAccountProductReviews
      description: Get all product reviews written by a specific user.
      summary: Get user's product reviews
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city (partial match)
      - in: query
        name: city_Icontains
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
        description: Filter by country alpha-2 code
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter users created after this date
      - in: query
        name: createdAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter users created before this date
      - in: query
        name: email
        schema:
          type: string
        description: Filter by email (partial match)
      - in: query
        name: email_Icontains
        schema:
          type: string
      - in: query
        name: emailExact
        schema:
          type: string
        description: Filter by exact email
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: firstName_Icontains
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
        description: Filter by user account ID
      - in: query
        name: isActive
        schema:
          type: boolean
        description: Filter by active status
      - in: query
        name: isStaff
        schema:
          type: boolean
        description: Filter by staff status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: lastName_Icontains
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: region
        schema:
          type: string
        description: Filter by region alpha code
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
        description: Filter users updated after this date
      - in: query
        name: updatedAt_Gte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedAt_Lte
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
        description: Filter users updated before this date
      - in: query
        name: username
        schema:
          type: string
        description: Filter by username (partial match)
      - in: query
        name: username_Icontains
        schema:
          type: string
      - in: query
        name: usernameExact
        schema:
          type: string
        description: Filter by exact username
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcode_Icontains
        schema:
          type: string
      tags:
      - User Accounts
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address:
    get:
      operationId: listUserAddress
      description: Retrieve a list of User Addresses with filtering and search capabilities.
      summary: List User Addresses
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city name (partial match)
      - in: query
        name: country
        schema:
          type: number
        description: Filter by country ID
      - in: query
        name: countryCode
        schema:
          type: string
        description: Filter by country code (e.g., 'US', 'CA')
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date
        description: Filter addresses created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date
        description: Filter addresses created before this date
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isMain
        schema:
          type: boolean
        description: Filter by main address status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: locationType
        schema:
          type: string
        description: Filter by location type (exact match, case insensitive)
      - in: query
        name: locationTypeContains
        schema:
          type: string
        description: Filter by location type (partial match)
      - in: query
        name: mobilePhone
        schema:
          type: string
        description: Filter by mobile phone number (partial match)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phone
        schema:
          type: string
        description: Filter by phone number (partial match)
      - in: query
        name: region
        schema:
          type: number
        description: Filter by region ID
      - in: query
        name: regionName
        schema:
          type: string
        description: Filter by region name (partial match)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: street
        schema:
          type: string
        description: Filter by street name (partial match)
      - in: query
        name: streetNumber
        schema:
          type: string
        description: Filter by street number
      - in: query
        name: title
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date
        description: Filter addresses updated after this date
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date
        description: Filter addresses updated before this date
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcodeExact
        schema:
          type: string
        description: Filter by exact zipcode
      tags:
      - User Addresses
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAddressList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: createUserAddress
      description: Create a new User Address. Requires authentication.
      summary: Create a User Address
      tags:
      - User Addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddressDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address/{id}:
    get:
      operationId: retrieveUserAddress
      description: Get detailed information about a specific User Address.
      summary: Retrieve a User Address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddressDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: updateUserAddress
      description: Update User Address information. Requires authentication.
      summary: Update a User Address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddressDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: partialUpdateUserAddress
      description: Partially update User Address information. Requires authentication.
      summary: Partially update a User Address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressWriteRequest'
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddressDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: destroyUserAddress
      description: Delete a User Address. Requires authentication.
      summary: Delete a User Address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      security:
      - knoxApiToken: []
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address/{id}/set_main:
    post:
      operationId: setMainUserAddress
      description: Set this address as the user's main address.
      summary: Set address as main
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddressDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/subscription:
    get:
      operationId: listUserSubscription
      description: Retrieve a list of User Subscriptions with filtering and search
        capabilities.
      summary: List User Subscriptions
      parameters:
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - ACTIVE
          - BOUNCED
          - PENDING
          - UNSUBSCRIBED
        description: |-
          * `ACTIVE` - Active
          * `PENDING` - Pending Confirmation
          * `UNSUBSCRIBED` - Unsubscribed
          * `BOUNCED` - Bounced
      - in: query
        name: subscribedAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: subscribedBefore
        schema:
          type: string
          format: date-time
      - in: query
        name: topic
        schema:
          type: integer
      - in: query
        name: topic_Category
        schema:
          type: string
          enum:
          - ACCOUNT
          - MARKETING
          - NEWSLETTER
          - OTHER
          - PRODUCT
          - PROMOTIONAL
          - SYSTEM
        description: |-
          Category of the subscription topic

          * `MARKETING` - Marketing Campaigns
          * `PRODUCT` - Product Updates
          * `ACCOUNT` - Account Updates
          * `SYSTEM` - System Notifications
          * `NEWSLETTER` - Newsletter
          * `PROMOTIONAL` - Promotional
          * `OTHER` - Other
      - in: query
        name: topic_Slug
        schema:
          type: string
      - in: query
        name: topic_SlugExact
        schema:
          type: string
      - in: query
        name: topicDescription
        schema:
          type: string
      - in: query
        name: topicName
        schema:
          type: string
      - in: query
        name: unsubscribedAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: unsubscribedBefore
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
      tags:
      - User Subscription
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserSubscriptionList'
          description: ''
    post:
      operationId: createUserSubscription
      description: Create a new User Subscription. Requires authentication.
      summary: Create a User Subscription
      tags:
      - User Subscription
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSubscriptionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSubscriptionWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscriptionWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscriptionDetail'
          description: ''
  /api/v1/user/subscription/{id}:
    get:
      operationId: retrieveUserSubscription
      description: Get detailed information about a specific User Subscription.
      summary: Retrieve a User Subscription
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Subscription
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscriptionDetail'
          description: ''
    put:
      operationId: updateUserSubscription
      description: Update User Subscription information. Requires authentication.
      summary: Update a User Subscription
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Subscription
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSubscriptionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSubscriptionWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscriptionWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscriptionDetail'
          description: ''
    patch:
      operationId: partialUpdateUserSubscription
      description: Partially update User Subscription information. Requires authentication.
      summary: Partially update a User Subscription
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Subscription
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserSubscriptionWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserSubscriptionWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserSubscriptionWriteRequest'
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscriptionDetail'
          description: ''
    delete:
      operationId: destroyUserSubscription
      description: Delete a User Subscription. Requires authentication.
      summary: Delete a User Subscription
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Subscription
      security:
      - knoxApiToken: []
      responses:
        '204':
          description: No response body
  /api/v1/user/subscription/{id}/confirm:
    post:
      operationId: confirmUserSubscription
      description: Confirm a pending subscription using the confirmation token.
      summary: Confirm a user subscription
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Subscriptions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSubscriptionDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSubscriptionDetailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscriptionDetailRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscriptionDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/subscription/bulk_update:
    post:
      operationId: bulkUpdateUserSubscriptions
      description: Subscribe or unsubscribe from multiple topics at once.
      summary: Bulk update user subscriptions
      tags:
      - User Subscriptions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BulkSubscriptionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BulkSubscriptionRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BulkSubscriptionRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          description: No response body
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/subscription/topic:
    get:
      operationId: listSubscriptionTopic
      description: Retrieve a list of Subscription Topics with filtering and search
        capabilities.
      summary: List Subscription Topics
      parameters:
      - in: query
        name: category
        schema:
          type: string
          enum:
          - ACCOUNT
          - MARKETING
          - NEWSLETTER
          - OTHER
          - PRODUCT
          - PROMOTIONAL
          - SYSTEM
        description: |-
          Category of the subscription topic

          * `MARKETING` - Marketing Campaigns
          * `PRODUCT` - Product Updates
          * `ACCOUNT` - Account Updates
          * `SYSTEM` - System Notifications
          * `NEWSLETTER` - Newsletter
          * `PROMOTIONAL` - Promotional
          * `OTHER` - Other
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
      - in: query
        name: description
        schema:
          type: string
      - in: query
        name: isActive
        schema:
          type: boolean
      - in: query
        name: isDefault
        schema:
          type: boolean
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: requiresConfirmation
        schema:
          type: boolean
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slugExact
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
      tags:
      - Subscription Topics
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSubscriptionTopicList'
          description: ''
    post:
      operationId: createSubscriptionTopic
      description: Create a new Subscription Topic. Requires authentication.
      summary: Create a Subscription Topic
      tags:
      - Subscription Topics
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopicDetail'
          description: ''
  /api/v1/user/subscription/topic/{id}:
    get:
      operationId: retrieveSubscriptionTopic
      description: Get detailed information about a specific Subscription Topic.
      summary: Retrieve a Subscription Topic
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Subscription Topics
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopicDetail'
          description: ''
    put:
      operationId: updateSubscriptionTopic
      description: Update Subscription Topic information. Requires authentication.
      summary: Update a Subscription Topic
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Subscription Topics
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicWriteRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopicDetail'
          description: ''
    patch:
      operationId: partialUpdateSubscriptionTopic
      description: Partially update Subscription Topic information. Requires authentication.
      summary: Partially update a Subscription Topic
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Subscription Topics
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSubscriptionTopicWriteRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSubscriptionTopicWriteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSubscriptionTopicWriteRequest'
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopicDetail'
          description: ''
    delete:
      operationId: destroySubscriptionTopic
      description: Delete a Subscription Topic. Requires authentication.
      summary: Delete a Subscription Topic
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Subscription Topics
      security:
      - knoxApiToken: []
      responses:
        '204':
          description: No response body
  /api/v1/user/subscription/topic/{id}/subscribe:
    post:
      operationId: subscribeToTopic
      description: Subscribe the current user to a specific subscription topic.
      summary: Subscribe to a topic
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Subscription Topics
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicDetailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicDetailRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/subscription/topic/{id}/unsubscribe:
    post:
      operationId: unsubscribeFromTopic
      description: Unsubscribe the current user from a specific subscription topic.
      summary: Unsubscribe from a topic
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Subscription Topics
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicDetailRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopicDetailRequest'
        required: true
      security:
      - knoxApiToken: []
      responses:
        '200':
          description: No response body
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/subscription/topic/my_subscriptions:
    get:
      operationId: getMySubscriptionTopics
      description: Get the current user's subscribed and available subscription topics.
      summary: Get my subscriptions
      parameters:
      - in: query
        name: category
        schema:
          type: string
          enum:
          - ACCOUNT
          - MARKETING
          - NEWSLETTER
          - OTHER
          - PRODUCT
          - PROMOTIONAL
          - SYSTEM
        description: |-
          Category of the subscription topic

          * `MARKETING` - Marketing Campaigns
          * `PRODUCT` - Product Updates
          * `ACCOUNT` - Account Updates
          * `SYSTEM` - System Notifications
          * `NEWSLETTER` - Newsletter
          * `PROMOTIONAL` - Promotional
          * `OTHER` - Other
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
      - in: query
        name: description
        schema:
          type: string
      - in: query
        name: isActive
        schema:
          type: boolean
      - in: query
        name: isDefault
        schema:
          type: boolean
      - in: query
        name: name
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: requiresConfirmation
        schema:
          type: boolean
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slugExact
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date-time
      tags:
      - Subscription Topics
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSubscriptionTopicList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/unsubscribe/{uidb64}/{token}/{topic_slug}:
    get:
      operationId: unsubscribeViaLink
      description: Unsubscribe from a subscription topic using an email unsubscribe
        link.
      summary: Unsubscribe via email link
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: topicSlug
        schema:
          type: string
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        required: true
      tags:
      - User Subscriptions
      security:
      - knoxApiToken: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unsubscribe'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
components:
  schemas:
    ActionEnum:
      enum:
      - subscribe
      - unsubscribe
      type: string
      description: |-
        * `subscribe` - subscribe
        * `unsubscribe` - unsubscribe
    Authentication:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
          title: Id
        email:
          type: string
          format: email
          title: Διεύθυνση ηλεκτρονικού ταχυδρομείου
          maxLength: 254
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        id:
          type: integer
          readOnly: true
        username:
          type: string
          nullable: true
          title: Όνομα χρήστη
          description: Required. 30 characters or fewer.Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 30
        image:
          type: string
          format: uri
          nullable: true
          title: Εικόνα
        phone:
          type: string
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        address:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        country:
          type: string
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          title: Region Code
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
        twitter:
          type: string
          format: uri
          title: Twitter Profile
          maxLength: 200
        linkedin:
          type: string
          format: uri
          title: LinkedIn Profile
          maxLength: 200
        facebook:
          type: string
          format: uri
          title: Facebook Profile
          maxLength: 200
        instagram:
          type: string
          format: uri
          title: Instagram Profile
          maxLength: 200
        website:
          type: string
          format: uri
          maxLength: 200
        youtube:
          type: string
          format: uri
          title: Youtube Profile
          maxLength: 200
        github:
          type: string
          format: uri
          title: Github Profile
          maxLength: 200
        bio:
          type: string
        isActive:
          type: boolean
          readOnly: true
          title: Active
        isStaff:
          type: boolean
          readOnly: true
          title: Staff
        isSuperuser:
          type: boolean
          readOnly: true
          title: Κατάσταση υπερχρήστη
          description: Υποδηλώνει ότι ο συγκεκριμένος χρήστης έχει όλα τα δικαιώματα
            χωρίς να χρειάζεται να τα παραχωρήσετε ξεχωριστά.
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
      required:
      - createdAt
      - email
      - id
      - isActive
      - isStaff
      - isSuperuser
      - mainImagePath
      - pk
      - updatedAt
      - uuid
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Διεύθυνση ηλεκτρονικού ταχυδρομείου
          maxLength: 254
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        username:
          type: string
          nullable: true
          title: Όνομα χρήστη
          description: Required. 30 characters or fewer.Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 30
        image:
          type: string
          format: binary
          nullable: true
          title: Εικόνα
        phone:
          type: string
          minLength: 1
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        address:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        country:
          type: string
          minLength: 1
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          minLength: 1
          title: Region Code
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
        twitter:
          type: string
          format: uri
          title: Twitter Profile
          maxLength: 200
        linkedin:
          type: string
          format: uri
          title: LinkedIn Profile
          maxLength: 200
        facebook:
          type: string
          format: uri
          title: Facebook Profile
          maxLength: 200
        instagram:
          type: string
          format: uri
          title: Instagram Profile
          maxLength: 200
        website:
          type: string
          format: uri
          maxLength: 200
        youtube:
          type: string
          format: uri
          title: Youtube Profile
          maxLength: 200
        github:
          type: string
          format: uri
          title: Github Profile
          maxLength: 200
        bio:
          type: string
      required:
      - email
    BlankEnum:
      enum:
      - ''
    BlogAuthor:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                bio:
                  type: string
            en:
              type: object
              properties:
                bio:
                  type: string
            de:
              type: object
              properties:
                bio:
                  type: string
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        user:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        numberOfPosts:
          type: integer
          readOnly: true
        totalLikesReceived:
          oneOf:
          - type: integer
          - enum:
            - 0
            type: integer
          readOnly: true
      required:
      - createdAt
      - id
      - numberOfPosts
      - totalLikesReceived
      - translations
      - updatedAt
      - user
      - uuid
    BlogAuthorDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                bio:
                  type: string
            en:
              type: object
              properties:
                bio:
                  type: string
            de:
              type: object
              properties:
                bio:
                  type: string
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/Authentication'
          readOnly: true
        website:
          type: string
          format: uri
          maxLength: 200
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        numberOfPosts:
          type: integer
          readOnly: true
        totalLikesReceived:
          oneOf:
          - type: integer
          - enum:
            - 0
            type: integer
          readOnly: true
        recentPosts:
          type: array
          items:
            $ref: '#/components/schemas/BlogPost'
          readOnly: true
        topPosts:
          type: array
          items:
            $ref: '#/components/schemas/BlogPost'
          readOnly: true
      required:
      - createdAt
      - id
      - numberOfPosts
      - recentPosts
      - topPosts
      - totalLikesReceived
      - translations
      - updatedAt
      - user
      - uuid
    BlogAuthorWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                bio:
                  type: string
            en:
              type: object
              properties:
                bio:
                  type: string
            de:
              type: object
              properties:
                bio:
                  type: string
        user:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
      required:
      - translations
      - user
    BlogCategory:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        postCount:
          type: integer
          readOnly: true
        hasChildren:
          type: boolean
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
      - createdAt
      - hasChildren
      - id
      - level
      - mainImagePath
      - postCount
      - slug
      - sortOrder
      - translations
      - updatedAt
    BlogCategoryDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        postCount:
          type: integer
          readOnly: true
        hasChildren:
          type: boolean
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        children:
          type: array
          items:
            $ref: '#/components/schemas/BlogCategory'
          readOnly: true
        ancestors:
          type: array
          items:
            $ref: '#/components/schemas/BlogCategory'
          readOnly: true
        siblingsCount:
          type: integer
          readOnly: true
        descendantsCount:
          type: integer
          readOnly: true
        recursivePostCount:
          type: integer
          readOnly: true
        categoryPath:
          type: string
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - ancestors
      - categoryPath
      - children
      - createdAt
      - descendantsCount
      - hasChildren
      - id
      - level
      - mainImagePath
      - postCount
      - recursivePostCount
      - siblingsCount
      - slug
      - sortOrder
      - translations
      - treeId
      - updatedAt
      - uuid
    BlogCategoryReorderItemRequest:
      type: object
      properties:
        id:
          type: integer
          description: Category ID
        sortOrder:
          type: integer
          description: New sort order value
      required:
      - id
      - sortOrder
    BlogCategoryReorderRequestRequest:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/BlogCategoryReorderItemRequest'
          description: List of categories with new sort orders
      required:
      - categories
    BlogCategoryReorderResponse:
      type: object
      properties:
        updatedCount:
          type: integer
          description: Number of categories updated
        message:
          type: string
          description: Success message
      required:
      - message
      - updatedCount
    BlogCategoryWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
          title: Εικόνα
      required:
      - slug
      - translations
    BlogComment:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
        user:
          allOf:
          - $ref: '#/components/schemas/Authentication'
          readOnly: true
        contentPreview:
          type: string
          nullable: true
          readOnly: true
          description: First 150 characters of the comment content
        isReply:
          type: boolean
          readOnly: true
          description: Whether this comment is a reply to another comment
        parent:
          type: integer
          readOnly: true
          nullable: true
        hasReplies:
          type: boolean
          readOnly: true
          description: Whether this comment has replies
        isApproved:
          type: boolean
          readOnly: true
        isEdited:
          type: boolean
          readOnly: true
          description: Whether this comment has been edited
        likesCount:
          type: integer
          readOnly: true
        repliesCount:
          type: integer
          readOnly: true
        userHasLiked:
          type: boolean
          readOnly: true
          description: Whether the current user has liked this comment
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - contentPreview
      - createdAt
      - hasReplies
      - id
      - isApproved
      - isEdited
      - isReply
      - likesCount
      - parent
      - repliesCount
      - translations
      - updatedAt
      - user
      - userHasLiked
      - uuid
    BlogCommentDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
        user:
          allOf:
          - $ref: '#/components/schemas/Authentication'
          readOnly: true
        contentPreview:
          type: string
          nullable: true
          readOnly: true
          description: First 150 characters of the comment content
        isReply:
          type: boolean
          readOnly: true
          description: Whether this comment is a reply to another comment
        parent:
          type: integer
          readOnly: true
          nullable: true
        hasReplies:
          type: boolean
          readOnly: true
          description: Whether this comment has replies
        isApproved:
          type: boolean
          readOnly: true
        isEdited:
          type: boolean
          readOnly: true
          description: Whether this comment has been edited
        likesCount:
          type: integer
          readOnly: true
        repliesCount:
          type: integer
          readOnly: true
        userHasLiked:
          type: boolean
          readOnly: true
          description: Whether the current user has liked this comment
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        post:
          allOf:
          - $ref: '#/components/schemas/BlogPost'
          readOnly: true
          description: Basic information about the blog post
        parentComment:
          type: object
          nullable: true
          properties:
            id:
              type: integer
            contentPreview:
              type: string
            user:
              $ref: '#/components/schemas/Authentication'
            createdAt:
              type: string
              format: date-time
          required:
          - id
          - contentPreview
          - user
          - createdAt
          readOnly: true
          description: Parent comment if this is a reply
        childrenComments:
          type: array
          items:
            $ref: '#/components/schemas/BlogComment'
          readOnly: true
          description: Direct child comments (replies)
        ancestorsPath:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              contentPreview:
                type: string
              user:
                $ref: '#/components/schemas/Authentication'
            required:
            - id
            - contentPreview
            - user
          readOnly: true
          description: Path from root comment to this comment
        treePosition:
          type: object
          properties:
            level:
              type: integer
            treeId:
              type: integer
            positionInTree:
              type: integer
            siblingsCount:
              type: integer
          required:
          - level
          - treeId
          - positionInTree
          - siblingsCount
          readOnly: true
          description: Position information in the comment tree
      required:
      - ancestorsPath
      - childrenComments
      - contentPreview
      - createdAt
      - hasReplies
      - id
      - isApproved
      - isEdited
      - isReply
      - likesCount
      - parent
      - parentComment
      - post
      - repliesCount
      - translations
      - treePosition
      - updatedAt
      - user
      - userHasLiked
      - uuid
    BlogCommentDetailRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
      required:
      - translations
    BlogCommentLikedCommentsRequestRequest:
      type: object
      properties:
        commentIds:
          type: array
          items:
            type: integer
          description: List of comment IDs to check like status for
      required:
      - commentIds
    BlogCommentLikedCommentsResponse:
      type: object
      properties:
        likedCommentIds:
          type: array
          items:
            type: integer
          description: List of comment IDs that are liked by the current user
      required:
      - likedCommentIds
    BlogCommentMyCommentRequestRequest:
      type: object
      properties:
        post:
          type: integer
          description: Blog post ID to find comment for
      required:
      - post
    BlogCommentWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
        user:
          type: integer
        post:
          type: integer
        parent:
          type: integer
          nullable: true
      required:
      - post
      - translations
    BlogPost:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        likes:
          type: array
          items:
            type: integer
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        author:
          type: integer
        category:
          type: integer
        tags:
          type: array
          items:
            type: integer
        featured:
          type: boolean
        viewCount:
          type: integer
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        commentsCount:
          type: integer
          readOnly: true
        tagsCount:
          type: integer
          readOnly: true
        isPublished:
          type: boolean
        publishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        readingTime:
          type: integer
          readOnly: true
        contentPreview:
          type: string
          readOnly: true
      required:
      - author
      - category
      - commentsCount
      - contentPreview
      - createdAt
      - id
      - likes
      - likesCount
      - mainImagePath
      - publishedAt
      - readingTime
      - slug
      - tags
      - tagsCount
      - translations
      - updatedAt
      - uuid
      - viewCount
    BlogPostDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        likes:
          type: array
          items:
            type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        author:
          allOf:
          - $ref: '#/components/schemas/BlogAuthorDetail'
          readOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/BlogCategoryDetail'
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/BlogTagDetail'
          readOnly: true
        featured:
          type: boolean
        viewCount:
          type: integer
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        commentsCount:
          type: integer
          readOnly: true
        tagsCount:
          type: integer
          readOnly: true
        isPublished:
          type: boolean
        publishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        readingTime:
          type: integer
          readOnly: true
        contentPreview:
          type: string
          readOnly: true
        userHasLiked:
          type: boolean
          readOnly: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
      required:
      - author
      - category
      - commentsCount
      - contentPreview
      - createdAt
      - id
      - likes
      - likesCount
      - mainImagePath
      - publishedAt
      - readingTime
      - slug
      - tags
      - tagsCount
      - translations
      - updatedAt
      - userHasLiked
      - uuid
      - viewCount
    BlogPostDetailRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        featured:
          type: boolean
        isPublished:
          type: boolean
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
      required:
      - slug
      - translations
    BlogPostLikedPostsRequestRequest:
      type: object
      properties:
        postIds:
          type: array
          items:
            type: integer
          description: List of post IDs to check for likes
      required:
      - postIds
    BlogPostLikedPostsResponse:
      type: object
      properties:
        postIds:
          type: array
          items:
            type: integer
          description: List of liked post IDs
      required:
      - postIds
    BlogPostMeiliSearchResponse:
      type: object
      properties:
        limit:
          type: integer
        offset:
          type: integer
        estimatedTotalHits:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogPostMeiliSearchResult'
      required:
      - estimatedTotalHits
      - limit
      - offset
      - results
    BlogPostMeiliSearchResult:
      type: object
      properties:
        id:
          type: integer
        languageCode:
          type: string
        title:
          type: string
        subtitle:
          type: string
        body:
          type: string
        master:
          type: integer
        mainImagePath:
          type: string
        matchesPosition: {}
        rankingScore:
          type: number
          format: double
          nullable: true
        formatted: {}
      required:
      - body
      - formatted
      - id
      - languageCode
      - mainImagePath
      - master
      - matchesPosition
      - rankingScore
      - subtitle
      - title
    BlogPostWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        tags:
          type: array
          items:
            type: integer
        author:
          type: integer
        featured:
          type: boolean
        isPublished:
          type: boolean
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
      required:
      - author
      - category
      - slug
      - translations
    BlogTag:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        postsCount:
          type: string
          readOnly: true
          description: Number of blog posts using this tag
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - postsCount
      - sortOrder
      - translations
      - updatedAt
      - uuid
    BlogTagDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        postsCount:
          type: string
          readOnly: true
          description: Number of blog posts using this tag
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - postsCount
      - sortOrder
      - translations
      - updatedAt
      - uuid
    BlogTagWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        active:
          type: boolean
      required:
      - translations
    BulkSubscriptionRequest:
      type: object
      properties:
        topicIds:
          type: array
          items:
            type: integer
          description: List of topic IDs to subscribe/unsubscribe
        action:
          allOf:
          - $ref: '#/components/schemas/ActionEnum'
          description: |-
            Action to perform on the topics

            * `subscribe` - subscribe
            * `unsubscribe` - unsubscribe
      required:
      - action
      - topicIds
    CartDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        sessionKey:
          type: string
          description: Session key for guest users
          maxLength: 40
        uuid:
          type: string
          format: uuid
          readOnly: true
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalDiscountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalVatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalItems:
          oneOf:
          - type: integer
          - enum:
            - 0
            type: integer
          readOnly: true
        totalItemsUnique:
          type: integer
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        lastActivity:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemDetail'
          readOnly: true
        recommendations:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          readOnly: true
          description: Product recommendations based on cart contents
      required:
      - createdAt
      - id
      - items
      - lastActivity
      - recommendations
      - totalDiscountValue
      - totalItems
      - totalItemsUnique
      - totalPrice
      - totalVatValue
      - updatedAt
      - uuid
    CartItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cartId:
          type: integer
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        weightInfo:
          type: object
          properties:
            unitWeight:
              type: number
            totalWeight:
              type: number
            weightUnit:
              type: string
          required:
          - unitWeight
          - totalWeight
          - weightUnit
          readOnly: true
          description: Weight information for shipping calculations
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        priceSavePercent:
          type: number
          format: double
          readOnly: true
        discountPercent:
          type: number
          format: double
          readOnly: true
        vatPercent:
          type: number
          format: double
          readOnly: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalDiscountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - cartId
      - createdAt
      - discountPercent
      - discountValue
      - finalPrice
      - id
      - price
      - priceSavePercent
      - product
      - totalDiscountValue
      - totalPrice
      - updatedAt
      - uuid
      - vatPercent
      - vatValue
      - weightInfo
    CartItemDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cartId:
          type: integer
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        weightInfo:
          type: object
          properties:
            unitWeight:
              type: number
            totalWeight:
              type: number
            weightUnit:
              type: string
          required:
          - unitWeight
          - totalWeight
          - weightUnit
          readOnly: true
          description: Weight information for shipping calculations
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        priceSavePercent:
          type: number
          format: double
          readOnly: true
        discountPercent:
          type: number
          format: double
          readOnly: true
        vatPercent:
          type: number
          format: double
          readOnly: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalDiscountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        recommendations:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          readOnly: true
          description: Related products that might interest the customer
      required:
      - cartId
      - createdAt
      - discountPercent
      - discountValue
      - finalPrice
      - id
      - price
      - priceSavePercent
      - product
      - recommendations
      - totalDiscountValue
      - totalPrice
      - updatedAt
      - uuid
      - vatPercent
      - vatValue
      - weightInfo
    CartItemWriteRequest:
      type: object
      properties:
        cart:
          type: integer
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - cart
      - product
    CartWriteRequest:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        sessionKey:
          type: string
          description: Session key for guest users
          maxLength: 40
    CategoryEnum:
      enum:
      - MARKETING
      - PRODUCT
      - ACCOUNT
      - SYSTEM
      - NEWSLETTER
      - PROMOTIONAL
      - OTHER
      type: string
      description: |-
        * `MARKETING` - Marketing Campaigns
        * `PRODUCT` - Product Updates
        * `ACCOUNT` - Account Updates
        * `SYSTEM` - System Notifications
        * `NEWSLETTER` - Newsletter
        * `PROMOTIONAL` - Promotional
        * `OTHER` - Other
    ContactWrite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 254
        message:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - email
      - id
      - message
      - name
      - updatedAt
      - uuid
    ContactWriteRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 254
        message:
          type: string
          minLength: 1
      required:
      - email
      - message
      - name
    Country:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha2:
          type: string
          title: Country Code Alpha 2
          pattern: ^[A-Z]{2}$
          maxLength: 2
        alpha3:
          type: string
          title: Country Code Alpha 3
          pattern: ^[A-Z]{3}$
          maxLength: 3
        isoCc:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: ISO Country Code
        phoneCode:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
      required:
      - alpha2
      - alpha3
      - createdAt
      - mainImagePath
      - sortOrder
      - translations
      - updatedAt
      - uuid
    CountryDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha2:
          type: string
          title: Country Code Alpha 2
          pattern: ^[A-Z]{2}$
          maxLength: 2
        alpha3:
          type: string
          title: Country Code Alpha 3
          pattern: ^[A-Z]{3}$
          maxLength: 3
        isoCc:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: ISO Country Code
        phoneCode:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        regions:
          type: array
          items:
            type: string
            title: Region Code
          readOnly: true
      required:
      - alpha2
      - alpha3
      - createdAt
      - mainImagePath
      - regions
      - sortOrder
      - translations
      - updatedAt
      - uuid
    CountryWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha2:
          type: string
          minLength: 1
          title: Country Code Alpha 2
          pattern: ^[A-Z]{2}$
          maxLength: 2
        alpha3:
          type: string
          minLength: 1
          title: Country Code Alpha 3
          pattern: ^[A-Z]{3}$
          maxLength: 3
        isoCc:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: ISO Country Code
        phoneCode:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
      required:
      - alpha2
      - alpha3
      - translations
    DocumentTypeEnum:
      enum:
      - RECEIPT
      - INVOICE
      - PROFORMA
      - SHIPPING_LABEL
      - RETURN_LABEL
      - CREDIT_NOTE
      type: string
      description: |-
        * `RECEIPT` - Receipt
        * `INVOICE` - Invoice
        * `PROFORMA` - Proforma Invoice
        * `SHIPPING_LABEL` - Shipping Label
        * `RETURN_LABEL` - Return Label
        * `CREDIT_NOTE` - Credit Note
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
        error:
          type: string
      required:
      - detail
    FloorEnum:
      enum:
      - BASEMENT
      - GROUND_FLOOR
      - FIRST_FLOOR
      - SECOND_FLOOR
      - THIRD_FLOOR
      - FOURTH_FLOOR
      - FIFTH_FLOOR
      - SIXTH_FLOOR_PLUS
      type: string
      description: |-
        * `BASEMENT` - Basement
        * `GROUND_FLOOR` - Ground Floor
        * `FIRST_FLOOR` - First Floor
        * `SECOND_FLOOR` - Second Floor
        * `THIRD_FLOOR` - Third Floor
        * `FOURTH_FLOOR` - Fourth Floor
        * `FIFTH_FLOOR` - Fifth Floor
        * `SIXTH_FLOOR_PLUS` - Sixth Floor Plus
    HealthCheckResponse:
      type: object
      properties:
        database:
          type: boolean
        redis:
          type: boolean
        celery:
          type: boolean
      required:
      - celery
      - database
      - redis
    ImageTypeEnum:
      enum:
      - MAIN
      - BANNER
      - ICON
      - THUMBNAIL
      - GALLERY
      - BACKGROUND
      - HERO
      - FEATURE
      - PROMOTIONAL
      - SEASONAL
      type: string
      description: |-
        * `MAIN` - Main Image
        * `BANNER` - Banner Image
        * `ICON` - Icon Image
        * `THUMBNAIL` - Thumbnail Image
        * `GALLERY` - Gallery Image
        * `BACKGROUND` - Background Image
        * `HERO` - Hero Image
        * `FEATURE` - Feature Image
        * `PROMOTIONAL` - Promotional Image
        * `SEASONAL` - Seasonal Image
    KindEnum:
      enum:
      - ERROR
      - SUCCESS
      - INFO
      - WARNING
      - DANGER
      type: string
      description: |-
        * `ERROR` - Error
        * `SUCCESS` - Success
        * `INFO` - Info
        * `WARNING` - Warning
        * `DANGER` - Danger
    LocationTypeEnum:
      enum:
      - HOME
      - OFFICE
      - OTHER
      type: string
      description: |-
        * `HOME` - Αρχική
        * `OFFICE` - Office
        * `OTHER` - Other
    Notification:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
        id:
          type: integer
          readOnly: true
        link:
          type: string
          format: uri
          maxLength: 200
        kind:
          $ref: '#/components/schemas/KindEnum'
        expiryDate:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - translations
      - updatedAt
      - uuid
    NotificationCountResponse:
      type: object
      properties:
        count:
          type: integer
          description: Number of unseen notifications
      required:
      - count
    NotificationInfoResponse:
      type: object
      properties:
        info:
          type: string
          description: Information message about notifications
      required:
      - info
    NotificationRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
        link:
          type: string
          format: uri
          maxLength: 200
        kind:
          $ref: '#/components/schemas/KindEnum'
        expiryDate:
          type: string
          format: date-time
          nullable: true
      required:
      - translations
    NotificationSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
      required:
      - success
    NotificationUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        notification:
          type: integer
        seen:
          type: boolean
        seenAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - notification
      - updatedAt
      - user
      - uuid
    NotificationUserActionRequest:
      type: object
      properties:
        notificationUserIds:
          type: array
          items:
            type: integer
          description: List of notification user IDs to mark as seen/unseen
      required:
      - notificationUserIds
    NotificationUserDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/Authentication'
          readOnly: true
        notification:
          allOf:
          - $ref: '#/components/schemas/Notification'
          readOnly: true
        seen:
          type: boolean
        seenAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - notification
      - updatedAt
      - user
      - uuid
    NotificationUserDetailRequest:
      type: object
      properties:
        seen:
          type: boolean
        seenAt:
          type: string
          format: date-time
          nullable: true
    NotificationUserWriteRequest:
      type: object
      properties:
        user:
          type: integer
        notification:
          type: integer
        seen:
          type: boolean
      required:
      - notification
      - user
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        payWay:
          type: integer
        status:
          $ref: '#/components/schemas/OrderStatus'
        statusDisplay:
          type: string
          readOnly: true
        statusUpdatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        zipcode:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        phone:
          type: string
        mobilePhone:
          type: string
        customerNotes:
          type: string
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        totalPriceItems:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceExtra:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        fullAddress:
          type: string
          readOnly: true
        paymentId:
          type: string
          maxLength: 255
        paymentStatus:
          oneOf:
          - $ref: '#/components/schemas/PaymentStatusEnum'
          - $ref: '#/components/schemas/BlankEnum'
        paymentMethod:
          type: string
          maxLength: 50
        canBeCanceled:
          type: boolean
          readOnly: true
        isPaid:
          type: boolean
          readOnly: true
      required:
      - canBeCanceled
      - city
      - country
      - createdAt
      - email
      - firstName
      - fullAddress
      - id
      - isPaid
      - items
      - lastName
      - paidAmount
      - payWay
      - phone
      - region
      - shippingPrice
      - statusDisplay
      - statusUpdatedAt
      - street
      - streetNumber
      - totalPriceExtra
      - totalPriceItems
      - updatedAt
      - uuid
      - zipcode
    OrderDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        payWay:
          type: integer
        status:
          $ref: '#/components/schemas/OrderStatus'
        statusDisplay:
          type: string
          readOnly: true
        statusUpdatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        zipcode:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        phone:
          type: string
          readOnly: true
        mobilePhone:
          type: string
          readOnly: true
        customerNotes:
          type: string
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        totalPriceItems:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceExtra:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        fullAddress:
          type: string
          readOnly: true
        paymentId:
          type: string
          maxLength: 255
        paymentStatus:
          oneOf:
          - $ref: '#/components/schemas/PaymentStatusEnum'
          - $ref: '#/components/schemas/BlankEnum'
        paymentMethod:
          type: string
          maxLength: 50
        canBeCanceled:
          type: boolean
          readOnly: true
        isPaid:
          type: boolean
          readOnly: true
        orderTimeline:
          type: array
          items:
            type: object
            properties:
              changeType:
                type: string
              timestamp:
                type: string
              description:
                type: string
              user:
                type: string
                nullable: true
              previousValue:
                type: object
                nullable: true
              newValue:
                type: object
                nullable: true
          readOnly: true
          description: Order status timeline and history
        pricingBreakdown:
          type: object
          properties:
            itemsSubtotal:
              type: number
            shippingCost:
              type: number
            extrasTotal:
              type: number
            grandTotal:
              type: number
            currency:
              type: string
            paidAmount:
              type: number
            remainingAmount:
              type: number
          readOnly: true
          description: Detailed pricing breakdown
        trackingDetails:
          type: object
          properties:
            trackingNumber:
              type: string
            shippingCarrier:
              type: string
            hasTracking:
              type: boolean
            estimatedDelivery:
              type: string
            trackingUrl:
              type: string
          readOnly: true
          description: Tracking and shipping details
        trackingNumber:
          type: string
          maxLength: 255
        shippingCarrier:
          type: string
          maxLength: 255
        customerFullName:
          type: string
          readOnly: true
        isCompleted:
          type: boolean
          readOnly: true
        isCanceled:
          type: boolean
          readOnly: true
      required:
      - canBeCanceled
      - city
      - country
      - createdAt
      - customerFullName
      - email
      - firstName
      - fullAddress
      - id
      - isCanceled
      - isCompleted
      - isPaid
      - items
      - lastName
      - mobilePhone
      - orderTimeline
      - paidAmount
      - payWay
      - phone
      - pricingBreakdown
      - region
      - shippingPrice
      - statusDisplay
      - statusUpdatedAt
      - street
      - streetNumber
      - totalPriceExtra
      - totalPriceItems
      - trackingDetails
      - updatedAt
      - uuid
      - zipcode
    OrderDetailRequest:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        country:
          type: string
          minLength: 1
          title: Country Code Alpha 2
        region:
          type: string
          minLength: 1
          title: Region Code
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        street:
          type: string
          minLength: 1
          maxLength: 255
        streetNumber:
          type: string
          minLength: 1
          maxLength: 255
        payWay:
          type: integer
        status:
          $ref: '#/components/schemas/OrderStatus'
        firstName:
          type: string
          minLength: 1
          maxLength: 255
        lastName:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 255
        zipcode:
          type: string
          minLength: 1
          maxLength: 255
        place:
          type: string
          maxLength: 255
        city:
          type: string
          minLength: 1
          maxLength: 255
        customerNotes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRequest'
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        paymentId:
          type: string
          maxLength: 255
        paymentStatus:
          oneOf:
          - $ref: '#/components/schemas/PaymentStatusEnum'
          - $ref: '#/components/schemas/BlankEnum'
        paymentMethod:
          type: string
          maxLength: 50
        trackingNumber:
          type: string
          maxLength: 255
        shippingCarrier:
          type: string
          maxLength: 255
      required:
      - city
      - country
      - email
      - firstName
      - items
      - lastName
      - payWay
      - region
      - street
      - streetNumber
      - zipcode
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        order:
          type: integer
        product:
          type: integer
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        isRefunded:
          type: boolean
          readOnly: true
        refundedQuantity:
          type: integer
          readOnly: true
        netQuantity:
          type: integer
          readOnly: true
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
      - createdAt
      - id
      - isRefunded
      - netQuantity
      - order
      - price
      - product
      - refundedQuantity
      - totalPrice
      - updatedAt
      - uuid
    OrderItemCreateRequest:
      type: object
      properties:
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        notes:
          type: string
      required:
      - product
    OrderItemDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        order:
          type: integer
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        isRefunded:
          type: boolean
          readOnly: true
        refundedQuantity:
          type: integer
          readOnly: true
        netQuantity:
          type: integer
          readOnly: true
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        originalQuantity:
          type: integer
          readOnly: true
          nullable: true
        refundedAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        netPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        notes:
          type: string
      required:
      - createdAt
      - id
      - isRefunded
      - netPrice
      - netQuantity
      - order
      - originalQuantity
      - price
      - product
      - refundedAmount
      - refundedQuantity
      - sortOrder
      - totalPrice
      - updatedAt
      - uuid
    OrderItemRefundRequest:
      type: object
      properties:
        quantity:
          type: integer
          minimum: 1
          description: Quantity to refund. If not provided, refunds all.
        reason:
          type: string
          description: Optional reason for the refund
          maxLength: 255
    OrderItemRequest:
      type: object
      properties:
        order:
          type: integer
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
      required:
      - order
      - product
    OrderItemWriteRequest:
      type: object
      properties:
        order:
          type: integer
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        notes:
          type: string
      required:
      - order
      - product
    OrderStatus:
      enum:
      - PENDING
      - PROCESSING
      - SHIPPED
      - DELIVERED
      - COMPLETED
      - CANCELED
      - RETURNED
      - REFUNDED
      type: string
      description: |-
        * `PENDING` - Pending
        * `PROCESSING` - Processing
        * `SHIPPED` - Shipped
        * `DELIVERED` - Delivered
        * `COMPLETED` - Completed
        * `CANCELED` - Canceled
        * `RETURNED` - Returned
        * `REFUNDED` - Refunded
    OrderWriteRequest:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        country:
          type: string
          minLength: 1
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          minLength: 1
          title: Region Code
          nullable: true
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        street:
          type: string
          minLength: 1
          maxLength: 255
        streetNumber:
          type: string
          minLength: 1
          maxLength: 255
        payWay:
          type: integer
          nullable: true
        status:
          $ref: '#/components/schemas/OrderStatus'
        firstName:
          type: string
          minLength: 1
          maxLength: 255
        lastName:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 255
        zipcode:
          type: string
          minLength: 1
          maxLength: 255
        place:
          type: string
          maxLength: 255
        city:
          type: string
          minLength: 1
          maxLength: 255
        phone:
          type: string
          minLength: 1
        mobilePhone:
          type: string
          minLength: 1
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        customerNotes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreateRequest'
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        paymentId:
          type: string
          minLength: 1
        paymentStatus:
          type: string
          minLength: 1
        paymentMethod:
          type: string
          minLength: 1
        trackingNumber:
          type: string
          maxLength: 255
        shippingCarrier:
          type: string
          maxLength: 255
      required:
      - city
      - email
      - firstName
      - items
      - lastName
      - phone
      - shippingPrice
      - street
      - streetNumber
      - zipcode
    PaginatedAuthenticationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Authentication'
    PaginatedBlogAuthorList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogAuthor'
    PaginatedBlogCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogCategory'
    PaginatedBlogCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogComment'
    PaginatedBlogPostList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogPost'
    PaginatedBlogTagList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogTag'
    PaginatedCartItemList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    PaginatedCountryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Country'
    PaginatedNotificationUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/NotificationUser'
    PaginatedOrderItemList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    PaginatedOrderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PaginatedPayWayList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PayWay'
    PaginatedProductCategoryImageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategoryImage'
    PaginatedProductCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'
    PaginatedProductFavouriteByProductsResponseList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductFavouriteByProductsResponse'
    PaginatedProductFavouriteList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductFavourite'
    PaginatedProductImageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
    PaginatedProductList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaginatedProductReviewList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductReview'
    PaginatedRegionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Region'
    PaginatedSubscriptionTopicList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionTopic'
    PaginatedTagList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    PaginatedUserAddressList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserAddress'
    PaginatedUserSubscriptionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserSubscription'
    PatchedAuthenticationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
          title: Διεύθυνση ηλεκτρονικού ταχυδρομείου
          maxLength: 254
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        username:
          type: string
          nullable: true
          title: Όνομα χρήστη
          description: Required. 30 characters or fewer.Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 30
        image:
          type: string
          format: binary
          nullable: true
          title: Εικόνα
        phone:
          type: string
          minLength: 1
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        address:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        country:
          type: string
          minLength: 1
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          minLength: 1
          title: Region Code
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
        twitter:
          type: string
          format: uri
          title: Twitter Profile
          maxLength: 200
        linkedin:
          type: string
          format: uri
          title: LinkedIn Profile
          maxLength: 200
        facebook:
          type: string
          format: uri
          title: Facebook Profile
          maxLength: 200
        instagram:
          type: string
          format: uri
          title: Instagram Profile
          maxLength: 200
        website:
          type: string
          format: uri
          maxLength: 200
        youtube:
          type: string
          format: uri
          title: Youtube Profile
          maxLength: 200
        github:
          type: string
          format: uri
          title: Github Profile
          maxLength: 200
        bio:
          type: string
    PatchedBlogAuthorWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                bio:
                  type: string
            en:
              type: object
              properties:
                bio:
                  type: string
            de:
              type: object
              properties:
                bio:
                  type: string
        user:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
    PatchedBlogCategoryWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
          title: Εικόνα
    PatchedBlogCommentWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
        user:
          type: integer
        post:
          type: integer
        parent:
          type: integer
          nullable: true
    PatchedBlogPostWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        tags:
          type: array
          items:
            type: integer
        author:
          type: integer
        featured:
          type: boolean
        isPublished:
          type: boolean
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
    PatchedBlogTagWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        active:
          type: boolean
    PatchedCartItemWriteRequest:
      type: object
      properties:
        cart:
          type: integer
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
    PatchedCartWriteRequest:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        sessionKey:
          type: string
          description: Session key for guest users
          maxLength: 40
    PatchedCountryWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha2:
          type: string
          minLength: 1
          title: Country Code Alpha 2
          pattern: ^[A-Z]{2}$
          maxLength: 2
        alpha3:
          type: string
          minLength: 1
          title: Country Code Alpha 3
          pattern: ^[A-Z]{3}$
          maxLength: 3
        isoCc:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: ISO Country Code
        phoneCode:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
    PatchedNotificationUserWriteRequest:
      type: object
      properties:
        user:
          type: integer
        notification:
          type: integer
        seen:
          type: boolean
    PatchedOrderItemWriteRequest:
      type: object
      properties:
        order:
          type: integer
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        notes:
          type: string
    PatchedOrderWriteRequest:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        country:
          type: string
          minLength: 1
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          minLength: 1
          title: Region Code
          nullable: true
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        street:
          type: string
          minLength: 1
          maxLength: 255
        streetNumber:
          type: string
          minLength: 1
          maxLength: 255
        payWay:
          type: integer
          nullable: true
        status:
          $ref: '#/components/schemas/OrderStatus'
        firstName:
          type: string
          minLength: 1
          maxLength: 255
        lastName:
          type: string
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 255
        zipcode:
          type: string
          minLength: 1
          maxLength: 255
        place:
          type: string
          maxLength: 255
        city:
          type: string
          minLength: 1
          maxLength: 255
        phone:
          type: string
          minLength: 1
        mobilePhone:
          type: string
          minLength: 1
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        customerNotes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreateRequest'
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        paymentId:
          type: string
          minLength: 1
        paymentStatus:
          type: string
          minLength: 1
        paymentMethod:
          type: string
          minLength: 1
        trackingNumber:
          type: string
          maxLength: 255
        shippingCarrier:
          type: string
          maxLength: 255
    PatchedPayWayWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
        active:
          type: boolean
        cost:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        freeThreshold:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        icon:
          type: string
          format: binary
          nullable: true
        providerCode:
          type: string
          description: Code used to identify the payment provider in the system (e.g.,
            'stripe', 'paypal')
          maxLength: 50
        isOnlinePayment:
          type: boolean
          description: Whether this payment method is processed online
        requiresConfirmation:
          type: boolean
          description: Whether this payment method requires manual confirmation (e.g.,
            bank transfer)
        configuration:
          nullable: true
          title: Provider Configuration
          description: Provider-specific configuration (API keys, webhooks, etc.)
    PatchedProductCategoryImageBulkUpdateRequest:
      type: object
      properties:
        imageIds:
          type: array
          items:
            type: integer
        active:
          type: boolean
        sortOrder:
          type: integer
    PatchedProductCategoryImageWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        category:
          type: integer
        image:
          type: string
          format: binary
          title: Εικόνα
        imageType:
          allOf:
          - $ref: '#/components/schemas/ImageTypeEnum'
          default: MAIN
        active:
          type: boolean
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
    PatchedProductCategoryWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        active:
          type: boolean
        parent:
          type: integer
          nullable: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
    PatchedProductFavouriteWriteRequest:
      type: object
      properties:
        product:
          type: integer
    PatchedProductImageWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        product:
          type: integer
        image:
          type: string
          format: binary
          title: Εικόνα
        isMain:
          type: boolean
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
    PatchedProductReviewWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        product:
          type: integer
        rate:
          allOf:
          - $ref: '#/components/schemas/RateEnum'
          minimum: 0
          maximum: 32767
        status:
          $ref: '#/components/schemas/ReviewStatus'
        isPublished:
          type: boolean
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                comment:
                  type: string
            en:
              type: object
              properties:
                comment:
                  type: string
            de:
              type: object
              properties:
                comment:
                  type: string
    PatchedProductWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vat:
          type: integer
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        active:
          type: boolean
    PatchedRegionWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha:
          type: string
          minLength: 1
          title: Region Code
          maxLength: 10
        country:
          type: string
          minLength: 1
          title: Country Code Alpha 2
    PatchedSubscriptionTopicWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          minLength: 1
          description: Unique identifier for the topic (e.g., 'weekly-newsletter')
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          allOf:
          - $ref: '#/components/schemas/CategoryEnum'
          description: |-
            Category of the subscription topic

            * `MARKETING` - Marketing Campaigns
            * `PRODUCT` - Product Updates
            * `ACCOUNT` - Account Updates
            * `SYSTEM` - System Notifications
            * `NEWSLETTER` - Newsletter
            * `PROMOTIONAL` - Promotional
            * `OTHER` - Other
        isActive:
          type: boolean
          title: Active
          description: Whether this topic is currently available for subscription
        isDefault:
          type: boolean
          title: Default Subscription
          description: Whether new users are automatically subscribed to this topic
        requiresConfirmation:
          type: boolean
          description: Whether subscription to this topic requires email confirmation
    PatchedUserAddressWriteRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        firstName:
          type: string
          minLength: 1
          maxLength: 255
        lastName:
          type: string
          minLength: 1
          maxLength: 255
        street:
          type: string
          minLength: 1
          maxLength: 255
        streetNumber:
          type: string
          minLength: 1
          maxLength: 255
        city:
          type: string
          minLength: 1
          maxLength: 255
        zipcode:
          type: string
          minLength: 1
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
          minLength: 1
        mobilePhone:
          type: string
          minLength: 1
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
        country:
          type: string
          minLength: 1
          title: Country Code Alpha 2
        region:
          type: string
          minLength: 1
          title: Region Code
    PatchedUserSubscriptionWriteRequest:
      type: object
      properties:
        topic:
          type: integer
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
        metadata:
          description: Additional subscription preferences or data
    PayWay:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
        id:
          type: integer
          readOnly: true
        active:
          type: boolean
        cost:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        freeThreshold:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        icon:
          type: string
          format: uri
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        iconFilename:
          type: string
          readOnly: true
        providerCode:
          type: string
          description: Code used to identify the payment provider in the system (e.g.,
            'stripe', 'paypal')
          maxLength: 50
        isOnlinePayment:
          type: boolean
          description: Whether this payment method is processed online
        requiresConfirmation:
          type: boolean
          description: Whether this payment method requires manual confirmation (e.g.,
            bank transfer)
      required:
      - cost
      - createdAt
      - freeThreshold
      - iconFilename
      - id
      - sortOrder
      - translations
      - updatedAt
      - uuid
    PayWayDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
        id:
          type: integer
          readOnly: true
        active:
          type: boolean
        cost:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        freeThreshold:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        icon:
          type: string
          format: uri
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        iconFilename:
          type: string
          readOnly: true
        providerCode:
          type: string
          description: Code used to identify the payment provider in the system (e.g.,
            'stripe', 'paypal')
          maxLength: 50
        isOnlinePayment:
          type: boolean
          description: Whether this payment method is processed online
        requiresConfirmation:
          type: boolean
          description: Whether this payment method requires manual confirmation (e.g.,
            bank transfer)
        configuration:
          nullable: true
          title: Provider Configuration
          description: Provider-specific configuration (API keys, webhooks, etc.)
      required:
      - cost
      - createdAt
      - freeThreshold
      - iconFilename
      - id
      - sortOrder
      - translations
      - updatedAt
      - uuid
    PayWayWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
        active:
          type: boolean
        cost:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        freeThreshold:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        icon:
          type: string
          format: binary
          nullable: true
        providerCode:
          type: string
          description: Code used to identify the payment provider in the system (e.g.,
            'stripe', 'paypal')
          maxLength: 50
        isOnlinePayment:
          type: boolean
          description: Whether this payment method is processed online
        requiresConfirmation:
          type: boolean
          description: Whether this payment method requires manual confirmation (e.g.,
            bank transfer)
        configuration:
          nullable: true
          title: Provider Configuration
          description: Provider-specific configuration (API keys, webhooks, etc.)
      required:
      - cost
      - translations
    PaymentStatusEnum:
      enum:
      - PENDING
      - PROCESSING
      - COMPLETED
      - FAILED
      - REFUNDED
      - PARTIALLY_REFUNDED
      - CANCELED
      type: string
      description: |-
        * `PENDING` - Pending
        * `PROCESSING` - Processing
        * `COMPLETED` - Completed
        * `FAILED` - Failed
        * `REFUNDED` - Refunded
        * `PARTIALLY_REFUNDED` - Partially Refunded
        * `CANCELED` - Canceled
    PaymentStatusResponse:
      type: object
      properties:
        orderId:
          type: integer
        paymentStatus:
          type: string
        isPaid:
          type: boolean
        statusDetails:
          type: object
          additionalProperties: {}
      required:
      - isPaid
      - orderId
      - paymentStatus
      - statusDetails
    ProcessPaymentRequestRequest:
      type: object
      properties:
        payWayId:
          type: integer
          description: ID of the payment method to use
        paymentData:
          type: object
          additionalProperties: {}
          description: Additional payment data required by the payment provider
      required:
      - payWayId
    ProcessPaymentResponse:
      type: object
      properties:
        detail:
          type: string
        orderId:
          type: integer
        paymentStatus:
          type: string
        paymentId:
          type: string
        requiresConfirmation:
          type: boolean
        isOnlinePayment:
          type: boolean
        providerData:
          type: object
          additionalProperties: {}
      required:
      - detail
      - isOnlinePayment
      - orderId
      - paymentId
      - paymentStatus
      - providerData
      - requiresConfirmation
    Product:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vat:
          type: integer
        viewCount:
          type: integer
          readOnly: true
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        active:
          type: boolean
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        priceSavePercent:
          type: number
          format: double
          readOnly: true
        vatPercent:
          type: number
          format: double
          readOnly: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        reviewAverage:
          type: number
          format: double
          readOnly: true
        reviewCount:
          type: integer
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
      required:
      - category
      - createdAt
      - discountValue
      - finalPrice
      - id
      - likesCount
      - mainImagePath
      - price
      - priceSavePercent
      - reviewAverage
      - reviewCount
      - slug
      - translations
      - updatedAt
      - uuid
      - vat
      - vatPercent
      - vatValue
      - viewCount
    ProductCategory:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        active:
          type: boolean
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        recursiveProductCount:
          type: integer
          readOnly: true
      required:
      - createdAt
      - id
      - level
      - recursiveProductCount
      - slug
      - translations
      - treeId
      - updatedAt
      - uuid
    ProductCategoryDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        active:
          type: boolean
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        recursiveProductCount:
          type: integer
          readOnly: true
        children:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'
          readOnly: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
      required:
      - children
      - createdAt
      - id
      - level
      - recursiveProductCount
      - slug
      - translations
      - treeId
      - updatedAt
      - uuid
    ProductCategoryImage:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        category:
          type: integer
        categoryName:
          type: string
          readOnly: true
        image:
          type: string
          format: uri
          title: Εικόνα
        imageType:
          allOf:
          - $ref: '#/components/schemas/ImageTypeEnum'
          default: MAIN
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
        imagePath:
          type: string
          readOnly: true
        imageUrl:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - category
      - categoryName
      - createdAt
      - id
      - image
      - imagePath
      - imageUrl
      - sortOrder
      - translations
      - updatedAt
      - uuid
    ProductCategoryImageBulkResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        updatedCount:
          type: integer
      required:
      - message
      - success
      - updatedCount
    ProductCategoryImageDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        category:
          type: integer
        categoryName:
          type: string
          readOnly: true
        image:
          type: string
          format: uri
          title: Εικόνα
        imageType:
          allOf:
          - $ref: '#/components/schemas/ImageTypeEnum'
          default: MAIN
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
        imagePath:
          type: string
          readOnly: true
        imageUrl:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - category
      - categoryName
      - createdAt
      - id
      - image
      - imagePath
      - imageUrl
      - sortOrder
      - translations
      - updatedAt
      - uuid
    ProductCategoryImageWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        category:
          type: integer
        image:
          type: string
          format: binary
          title: Εικόνα
        imageType:
          allOf:
          - $ref: '#/components/schemas/ImageTypeEnum'
          default: MAIN
        active:
          type: boolean
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                altText:
                  type: string
      required:
      - category
      - image
      - translations
    ProductCategoryWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        active:
          type: boolean
        parent:
          type: integer
          nullable: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
      required:
      - slug
      - translations
    ProductDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vat:
          type: integer
        viewCount:
          type: integer
          readOnly: true
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        active:
          type: boolean
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        priceSavePercent:
          type: number
          format: double
          readOnly: true
        vatPercent:
          type: number
          format: double
          readOnly: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        reviewAverage:
          type: number
          format: double
          readOnly: true
        reviewCount:
          type: integer
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
      required:
      - category
      - createdAt
      - discountValue
      - finalPrice
      - id
      - likesCount
      - mainImagePath
      - price
      - priceSavePercent
      - reviewAverage
      - reviewCount
      - slug
      - translations
      - updatedAt
      - uuid
      - vat
      - vatPercent
      - vatValue
      - viewCount
    ProductDetailRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vat:
          type: integer
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        active:
          type: boolean
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
      required:
      - category
      - price
      - slug
      - translations
      - vat
    ProductDetailResponse:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vat:
          type: integer
        viewCount:
          type: integer
          readOnly: true
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        active:
          type: boolean
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        priceSavePercent:
          type: number
          format: double
          readOnly: true
        vatPercent:
          type: number
          format: double
          readOnly: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        reviewAverage:
          type: number
          format: double
          readOnly: true
        reviewCount:
          type: integer
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
      required:
      - category
      - createdAt
      - discountValue
      - finalPrice
      - id
      - likesCount
      - mainImagePath
      - price
      - priceSavePercent
      - reviewAverage
      - reviewCount
      - slug
      - translations
      - updatedAt
      - uuid
      - vat
      - vatPercent
      - vatValue
      - viewCount
    ProductFavourite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        userId:
          type: integer
          readOnly: true
        userUsername:
          type: string
          readOnly: true
        product:
          type: integer
        productName:
          type: string
          nullable: true
          readOnly: true
        productPrice:
          type: number
          format: double
          maximum: 100000000
          minimum: -100000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          nullable: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - product
      - productName
      - productPrice
      - userId
      - userUsername
      - uuid
    ProductFavouriteByProductsRequestRequest:
      type: object
      properties:
        productIds:
          type: array
          items:
            type: integer
          description: List of product IDs to check for favorites
      required:
      - productIds
    ProductFavouriteByProductsResponse:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        productId:
          type: integer
        createdAt:
          type: string
          format: date-time
      required:
      - createdAt
      - id
      - productId
      - userId
    ProductFavouriteDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        userId:
          type: integer
          readOnly: true
        userUsername:
          type: string
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/ProductDetail'
          readOnly: true
        productName:
          type: string
          nullable: true
          readOnly: true
        productPrice:
          type: number
          format: double
          maximum: 100000000
          minimum: -100000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          nullable: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        user:
          type: string
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
      - createdAt
      - id
      - product
      - productName
      - productPrice
      - updatedAt
      - user
      - userId
      - userUsername
      - uuid
    ProductFavouriteWriteRequest:
      type: object
      properties:
        product:
          type: integer
      required:
      - product
    ProductImage:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        product:
          type: integer
          readOnly: true
        image:
          type: string
          format: uri
          title: Εικόνα
        imageUrl:
          type: string
          readOnly: true
        imageSizeKb:
          type: integer
          readOnly: true
        altText:
          type: string
          readOnly: true
        isMain:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
        mainImagePath:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
      required:
      - altText
      - createdAt
      - id
      - image
      - imageSizeKb
      - imageUrl
      - mainImagePath
      - product
      - sortOrder
      - translations
      - uuid
    ProductImageDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        image:
          type: string
          format: uri
          title: Εικόνα
        imageUrl:
          type: string
          readOnly: true
        imageSizeKb:
          type: integer
          readOnly: true
        altText:
          type: string
          readOnly: true
        isMain:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
        mainImagePath:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        imageDimensions:
          type: object
          properties:
            width:
              type: number
            height:
              type: number
            aspectRatio:
              type: number
          readOnly: true
        imageFormat:
          type: string
          readOnly: true
        usageContext:
          type: object
          properties:
            isMain:
              type: boolean
            positionInGallery:
              type: number
            totalProductImages:
              type: number
            recommendedFor:
              type: string
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
      - altText
      - createdAt
      - id
      - image
      - imageDimensions
      - imageFormat
      - imageSizeKb
      - imageUrl
      - mainImagePath
      - product
      - sortOrder
      - translations
      - updatedAt
      - usageContext
      - uuid
    ProductImageWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        product:
          type: integer
        image:
          type: string
          format: binary
          title: Εικόνα
        isMain:
          type: boolean
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
      required:
      - image
      - product
      - translations
    ProductMeiliSearchResponse:
      type: object
      properties:
        limit:
          type: integer
        offset:
          type: integer
        estimatedTotalHits:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductMeiliSearchResult'
      required:
      - estimatedTotalHits
      - limit
      - offset
      - results
    ProductMeiliSearchResult:
      type: object
      properties:
        id:
          type: integer
        languageCode:
          type: string
        name:
          type: string
        description:
          type: string
        master:
          type: integer
        mainImagePath:
          type: string
        matchesPosition: {}
        rankingScore:
          type: number
          format: double
          nullable: true
        formatted: {}
      required:
      - description
      - formatted
      - id
      - languageCode
      - mainImagePath
      - master
      - matchesPosition
      - name
      - rankingScore
    ProductReview:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        rate:
          allOf:
          - $ref: '#/components/schemas/RateEnum'
          minimum: 0
          maximum: 32767
        status:
          $ref: '#/components/schemas/ReviewStatus'
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        publishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                comment:
                  type: string
            en:
              type: object
              properties:
                comment:
                  type: string
            de:
              type: object
              properties:
                comment:
                  type: string
      required:
      - createdAt
      - id
      - product
      - publishedAt
      - rate
      - translations
      - updatedAt
      - user
      - uuid
    ProductReviewDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        rate:
          allOf:
          - $ref: '#/components/schemas/RateEnum'
          minimum: 0
          maximum: 32767
        status:
          $ref: '#/components/schemas/ReviewStatus'
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        publishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                comment:
                  type: string
            en:
              type: object
              properties:
                comment:
                  type: string
            de:
              type: object
              properties:
                comment:
                  type: string
      required:
      - createdAt
      - id
      - product
      - publishedAt
      - rate
      - translations
      - updatedAt
      - user
      - uuid
    ProductReviewWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        product:
          type: integer
        rate:
          allOf:
          - $ref: '#/components/schemas/RateEnum'
          minimum: 0
          maximum: 32767
        status:
          $ref: '#/components/schemas/ReviewStatus'
        isPublished:
          type: boolean
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                comment:
                  type: string
            en:
              type: object
              properties:
                comment:
                  type: string
            de:
              type: object
              properties:
                comment:
                  type: string
      required:
      - product
      - rate
      - translations
    ProductWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vat:
          type: integer
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        active:
          type: boolean
      required:
      - category
      - price
      - slug
      - translations
      - vat
    RateEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      type: integer
      description: |-
        * `1` - One
        * `2` - Two
        * `3` - Three
        * `4` - Four
        * `5` - Five
        * `6` - Six
        * `7` - Seven
        * `8` - Eight
        * `9` - Nine
        * `10` - Ten
    RefundRequestRequest:
      type: object
      properties:
        amount:
          type: number
          format: double
          maximum: 100000000
          minimum: -100000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          description: Refund amount (optional, defaults to full refund)
        currency:
          type: string
          minLength: 1
          description: Currency code (required if amount is specified)
          maxLength: 3
    RefundResponse:
      type: object
      properties:
        detail:
          type: string
        orderId:
          type: integer
        paymentStatus:
          type: string
        refundId:
          type: string
        refundDetails:
          type: object
          additionalProperties: {}
      required:
      - detail
      - orderId
      - paymentStatus
      - refundDetails
      - refundId
    Region:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha:
          type: string
          title: Region Code
          maxLength: 10
        country:
          type: string
          title: Country Code Alpha 2
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - alpha
      - country
      - createdAt
      - sortOrder
      - translations
      - updatedAt
      - uuid
    RegionDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha:
          type: string
          title: Region Code
          maxLength: 10
        country:
          type: string
          title: Country Code Alpha 2
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - alpha
      - country
      - createdAt
      - sortOrder
      - translations
      - updatedAt
      - uuid
    RegionWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha:
          type: string
          minLength: 1
          title: Region Code
          maxLength: 10
        country:
          type: string
          minLength: 1
          title: Country Code Alpha 2
      required:
      - alpha
      - country
      - translations
    ReviewStatus:
      enum:
      - NEW
      - 'TRUE'
      - 'FALSE'
      type: string
      description: |-
        * `NEW` - New
        * `TRUE` - True
        * `FALSE` - False
    SubscriptionStatus:
      enum:
      - ACTIVE
      - PENDING
      - UNSUBSCRIBED
      - BOUNCED
      type: string
      description: |-
        * `ACTIVE` - Active
        * `PENDING` - Pending Confirmation
        * `UNSUBSCRIBED` - Unsubscribed
        * `BOUNCED` - Bounced
    SubscriptionTopic:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        slug:
          type: string
          description: Unique identifier for the topic (e.g., 'weekly-newsletter')
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          allOf:
          - $ref: '#/components/schemas/CategoryEnum'
          description: |-
            Category of the subscription topic

            * `MARKETING` - Marketing Campaigns
            * `PRODUCT` - Product Updates
            * `ACCOUNT` - Account Updates
            * `SYSTEM` - System Notifications
            * `NEWSLETTER` - Newsletter
            * `PROMOTIONAL` - Promotional
            * `OTHER` - Other
        isActive:
          type: boolean
          title: Active
          description: Whether this topic is currently available for subscription
        isDefault:
          type: boolean
          title: Default Subscription
          description: Whether new users are automatically subscribed to this topic
        requiresConfirmation:
          type: boolean
          description: Whether subscription to this topic requires email confirmation
        subscriberCount:
          type: integer
          readOnly: true
      required:
      - id
      - slug
      - subscriberCount
      - translations
      - uuid
    SubscriptionTopicDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        slug:
          type: string
          description: Unique identifier for the topic (e.g., 'weekly-newsletter')
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          allOf:
          - $ref: '#/components/schemas/CategoryEnum'
          description: |-
            Category of the subscription topic

            * `MARKETING` - Marketing Campaigns
            * `PRODUCT` - Product Updates
            * `ACCOUNT` - Account Updates
            * `SYSTEM` - System Notifications
            * `NEWSLETTER` - Newsletter
            * `PROMOTIONAL` - Promotional
            * `OTHER` - Other
        isActive:
          type: boolean
          title: Active
          description: Whether this topic is currently available for subscription
        isDefault:
          type: boolean
          title: Default Subscription
          description: Whether new users are automatically subscribed to this topic
        requiresConfirmation:
          type: boolean
          description: Whether subscription to this topic requires email confirmation
        subscriberCount:
          type: integer
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
      - createdAt
      - id
      - slug
      - subscriberCount
      - translations
      - updatedAt
      - uuid
    SubscriptionTopicDetailRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          minLength: 1
          description: Unique identifier for the topic (e.g., 'weekly-newsletter')
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          allOf:
          - $ref: '#/components/schemas/CategoryEnum'
          description: |-
            Category of the subscription topic

            * `MARKETING` - Marketing Campaigns
            * `PRODUCT` - Product Updates
            * `ACCOUNT` - Account Updates
            * `SYSTEM` - System Notifications
            * `NEWSLETTER` - Newsletter
            * `PROMOTIONAL` - Promotional
            * `OTHER` - Other
        isActive:
          type: boolean
          title: Active
          description: Whether this topic is currently available for subscription
        isDefault:
          type: boolean
          title: Default Subscription
          description: Whether new users are automatically subscribed to this topic
        requiresConfirmation:
          type: boolean
          description: Whether subscription to this topic requires email confirmation
      required:
      - slug
      - translations
    SubscriptionTopicRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          minLength: 1
          description: Unique identifier for the topic (e.g., 'weekly-newsletter')
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          allOf:
          - $ref: '#/components/schemas/CategoryEnum'
          description: |-
            Category of the subscription topic

            * `MARKETING` - Marketing Campaigns
            * `PRODUCT` - Product Updates
            * `ACCOUNT` - Account Updates
            * `SYSTEM` - System Notifications
            * `NEWSLETTER` - Newsletter
            * `PROMOTIONAL` - Promotional
            * `OTHER` - Other
        isActive:
          type: boolean
          title: Active
          description: Whether this topic is currently available for subscription
        isDefault:
          type: boolean
          title: Default Subscription
          description: Whether new users are automatically subscribed to this topic
        requiresConfirmation:
          type: boolean
          description: Whether subscription to this topic requires email confirmation
      required:
      - slug
      - translations
    SubscriptionTopicWriteRequest:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          minLength: 1
          description: Unique identifier for the topic (e.g., 'weekly-newsletter')
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          allOf:
          - $ref: '#/components/schemas/CategoryEnum'
          description: |-
            Category of the subscription topic

            * `MARKETING` - Marketing Campaigns
            * `PRODUCT` - Product Updates
            * `ACCOUNT` - Account Updates
            * `SYSTEM` - System Notifications
            * `NEWSLETTER` - Newsletter
            * `PROMOTIONAL` - Promotional
            * `OTHER` - Other
        isActive:
          type: boolean
          title: Active
          description: Whether this topic is currently available for subscription
        isDefault:
          type: boolean
          title: Default Subscription
          description: Whether new users are automatically subscribed to this topic
        requiresConfirmation:
          type: boolean
          description: Whether subscription to this topic requires email confirmation
      required:
      - slug
      - translations
    Tag:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                label:
                  type: string
            en:
              type: object
              properties:
                label:
                  type: string
            de:
              type: object
              properties:
                label:
                  type: string
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - sortOrder
      - translations
      - updatedAt
      - uuid
    Unsubscribe:
      type: object
      properties:
        message:
          type: string
        topic:
          type: string
        userEmail:
          type: string
          format: email
        topicSlug:
          type: string
        error:
          type: string
      required:
      - message
    UserAddress:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
        mobilePhone:
          type: string
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
          readOnly: true
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - city
      - country
      - createdAt
      - firstName
      - id
      - lastName
      - phone
      - region
      - street
      - streetNumber
      - title
      - updatedAt
      - user
      - uuid
      - zipcode
    UserAddressDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
        mobilePhone:
          type: string
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
          readOnly: true
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - city
      - country
      - createdAt
      - firstName
      - id
      - lastName
      - phone
      - region
      - street
      - streetNumber
      - title
      - updatedAt
      - user
      - uuid
      - zipcode
    UserAddressWriteRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        firstName:
          type: string
          minLength: 1
          maxLength: 255
        lastName:
          type: string
          minLength: 1
          maxLength: 255
        street:
          type: string
          minLength: 1
          maxLength: 255
        streetNumber:
          type: string
          minLength: 1
          maxLength: 255
        city:
          type: string
          minLength: 1
          maxLength: 255
        zipcode:
          type: string
          minLength: 1
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
          minLength: 1
        mobilePhone:
          type: string
          minLength: 1
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
        country:
          type: string
          minLength: 1
          title: Country Code Alpha 2
        region:
          type: string
          minLength: 1
          title: Region Code
      required:
      - city
      - country
      - firstName
      - lastName
      - phone
      - street
      - streetNumber
      - title
      - user
      - zipcode
    UserProductReviewRequestRequest:
      type: object
      properties:
        product:
          type: integer
          description: ID of the product to get user's review for
      required:
      - product
    UserSubscription:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
          title: Χρήστης
        topic:
          type: integer
        topicDetails:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTopic'
          readOnly: true
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
        subscribedAt:
          type: string
          format: date-time
          readOnly: true
        unsubscribedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        metadata:
          description: Additional subscription preferences or data
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
      - createdAt
      - id
      - subscribedAt
      - topic
      - topicDetails
      - unsubscribedAt
      - updatedAt
      - user
    UserSubscriptionDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
          title: Χρήστης
        topic:
          type: integer
        topicDetails:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTopic'
          readOnly: true
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
        subscribedAt:
          type: string
          format: date-time
          readOnly: true
        unsubscribedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        metadata:
          description: Additional subscription preferences or data
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        confirmationToken:
          type: string
          readOnly: true
          description: Token for email confirmation if required
      required:
      - confirmationToken
      - createdAt
      - id
      - subscribedAt
      - topic
      - topicDetails
      - unsubscribedAt
      - updatedAt
      - user
    UserSubscriptionDetailRequest:
      type: object
      properties:
        topic:
          type: integer
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
        metadata:
          description: Additional subscription preferences or data
      required:
      - topic
    UserSubscriptionWriteRequest:
      type: object
      properties:
        topic:
          type: integer
        status:
          $ref: '#/components/schemas/SubscriptionStatus'
        metadata:
          description: Additional subscription preferences or data
      required:
      - topic
    UsernameUpdateRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: New username
          maxLength: 150
      required:
      - username
    UsernameUpdateResponse:
      type: object
      properties:
        detail:
          type: string
          description: Success message for username update
      required:
      - detail
  securitySchemes:
    knoxApiToken:
      type: http
      scheme: bearer
