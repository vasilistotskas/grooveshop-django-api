openapi: 3.0.3
info:
  title: Grooveshop API
  version: 1.0.0
  description: Grooveshop API description
paths:
  /api/v1/blog/author:
    get:
      operationId: api_v1_blog_author_list
      description: Retrieve a list of all blog authors with their basic information.
        Supports advanced filtering including activity levels, post counts, and more.
      summary: List blog authors
      parameters:
      - in: query
        name: bio
        schema:
          type: string
        description: Filter by bio content (partial match)
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter authors who have/don't have likes on their posts
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter authors who have/don't have posts
      - in: query
        name: hasWebsite
        schema:
          type: boolean
        description: Filter authors who have/don't have a website
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: maxPosts
        schema:
          type: number
        description: Filter authors with at most X posts
      - in: query
        name: minPosts
        schema:
          type: number
        description: Filter authors with at least X posts
      - in: query
        name: minTotalLikes
        schema:
          type: number
        description: Filter authors with at least X total likes across all posts
      - in: query
        name: mostActive
        schema:
          type: boolean
        description: Get most active authors (top 10 by post count)
      - in: query
        name: mostLiked
        schema:
          type: boolean
        description: Get most liked authors (top 10 by total likes)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      - in: query
        name: website
        schema:
          type: string
        description: Filter by website URL (partial match)
      tags:
      - blog-authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogAuthorList'
          description: ''
    post:
      operationId: api_v1_blog_author_create
      description: Create a new blog author profile. Requires authentication.
      summary: Create a blog author
      tags:
      - blog-authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author{format}:
    get:
      operationId: api_v1_blog_author_formatted_list
      description: Retrieve a list of all blog authors with their basic information.
        Supports advanced filtering including activity levels, post counts, and more.
      summary: List blog authors
      parameters:
      - in: query
        name: bio
        schema:
          type: string
        description: Filter by bio content (partial match)
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter authors who have/don't have likes on their posts
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter authors who have/don't have posts
      - in: query
        name: hasWebsite
        schema:
          type: boolean
        description: Filter authors who have/don't have a website
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: maxPosts
        schema:
          type: number
        description: Filter authors with at most X posts
      - in: query
        name: minPosts
        schema:
          type: number
        description: Filter authors with at least X posts
      - in: query
        name: minTotalLikes
        schema:
          type: number
        description: Filter authors with at least X total likes across all posts
      - in: query
        name: mostActive
        schema:
          type: boolean
        description: Get most active authors (top 10 by post count)
      - in: query
        name: mostLiked
        schema:
          type: boolean
        description: Get most liked authors (top 10 by total likes)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      - in: query
        name: website
        schema:
          type: string
        description: Filter by website URL (partial match)
      tags:
      - blog-authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogAuthorList'
          description: ''
    post:
      operationId: api_v1_blog_author_formatted_create
      description: Create a new blog author profile. Requires authentication.
      summary: Create a blog author
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - blog-authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}:
    get:
      operationId: api_v1_blog_author_retrieve
      description: Get detailed information about a specific blog author.
      summary: Retrieve a blog author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_author_update
      description: Update blog author information. Requires authentication.
      summary: Update a blog author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_author_partial_update
      description: Partially update blog author information. Requires authentication.
      summary: Partially update a blog author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_author_destroy
      description: Delete a blog author profile. Requires authentication.
      summary: Delete a blog author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-authors
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}{format}:
    get:
      operationId: api_v1_blog_author_formatted_retrieve
      description: Get detailed information about a specific blog author.
      summary: Retrieve a blog author
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_author_formatted_update
      description: Update blog author information. Requires authentication.
      summary: Update a blog author
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthor'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_author_formatted_partial_update
      description: Partially update blog author information. Requires authentication.
      summary: Partially update a blog author
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthor'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthor'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_author_formatted_destroy
      description: Delete a blog author profile. Requires authentication.
      summary: Delete a blog author
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-authors
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}/posts:
    get:
      operationId: api_v1_blog_author_posts_list
      description: Retrieve all blog posts written by this author with proper pagination.
      summary: Get author's blog posts
      parameters:
      - in: query
        name: bio
        schema:
          type: string
        description: Filter by bio content (partial match)
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter authors who have/don't have likes on their posts
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter authors who have/don't have posts
      - in: query
        name: hasWebsite
        schema:
          type: boolean
        description: Filter authors who have/don't have a website
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: maxPosts
        schema:
          type: number
        description: Filter authors with at most X posts
      - in: query
        name: minPosts
        schema:
          type: number
        description: Filter authors with at least X posts
      - in: query
        name: minTotalLikes
        schema:
          type: number
        description: Filter authors with at least X total likes across all posts
      - in: query
        name: mostActive
        schema:
          type: boolean
        description: Get most active authors (top 10 by post count)
      - in: query
        name: mostLiked
        schema:
          type: boolean
        description: Get most liked authors (top 10 by total likes)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      - in: query
        name: website
        schema:
          type: string
        description: Filter by website URL (partial match)
      tags:
      - blog-authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}/posts{format}:
    get:
      operationId: api_v1_blog_author_posts_formatted_list
      description: Retrieve all blog posts written by this author with proper pagination.
      summary: Get author's blog posts
      parameters:
      - in: query
        name: bio
        schema:
          type: string
        description: Filter by bio content (partial match)
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter authors who have/don't have likes on their posts
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter authors who have/don't have posts
      - in: query
        name: hasWebsite
        schema:
          type: boolean
        description: Filter authors who have/don't have a website
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: maxPosts
        schema:
          type: number
        description: Filter authors with at most X posts
      - in: query
        name: minPosts
        schema:
          type: number
        description: Filter authors with at least X posts
      - in: query
        name: minTotalLikes
        schema:
          type: number
        description: Filter authors with at least X total likes across all posts
      - in: query
        name: mostActive
        schema:
          type: boolean
        description: Get most active authors (top 10 by post count)
      - in: query
        name: mostLiked
        schema:
          type: boolean
        description: Get most liked authors (top 10 by total likes)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      - in: query
        name: website
        schema:
          type: string
        description: Filter by website URL (partial match)
      tags:
      - blog-authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}/stats:
    get:
      operationId: api_v1_blog_author_stats_retrieve
      description: Get comprehensive statistics about the author's blog posts and
        activity.
      summary: Get author statistics
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorStatsResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}/stats{format}:
    get:
      operationId: api_v1_blog_author_stats_formatted_retrieve
      description: Get comprehensive statistics about the author's blog posts and
        activity.
      summary: Get author statistics
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorStatsResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category:
    get:
      operationId: api_v1_blog_category_list
      description: Retrieve a list of blog categories with hierarchical support. Supports
        filtering by parent, level, and translation fields. Use 'tree=true' parameter
        to get nested tree structure.
      summary: List blog categories
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
    post:
      operationId: api_v1_blog_category_create
      description: Create a new blog category. Supports hierarchical structure.
      summary: Create a blog category
      tags:
      - blog-categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategory'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category{format}:
    get:
      operationId: api_v1_blog_category_formatted_list
      description: Retrieve a list of blog categories with hierarchical support. Supports
        filtering by parent, level, and translation fields. Use 'tree=true' parameter
        to get nested tree structure.
      summary: List blog categories
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
    post:
      operationId: api_v1_blog_category_formatted_create
      description: Create a new blog category. Supports hierarchical structure.
      summary: Create a blog category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - blog-categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategory'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}:
    get:
      operationId: api_v1_blog_category_retrieve
      description: Get detailed information about a specific blog category including
        ancestors, descendants, and post counts.
      summary: Retrieve a blog category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_category_update
      description: Update blog category information.
      summary: Update a blog category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategory'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_category_partial_update
      description: Partially update blog category information.
      summary: Partially update a blog category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_category_destroy
      description: 'Delete a blog category. Note: This will also affect all child
        categories and associated blog posts based on cascade settings.'
      summary: Delete a blog category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}{format}:
    get:
      operationId: api_v1_blog_category_formatted_retrieve
      description: Get detailed information about a specific blog category including
        ancestors, descendants, and post counts.
      summary: Retrieve a blog category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_category_formatted_update
      description: Update blog category information.
      summary: Update a blog category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategory'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_category_formatted_partial_update
      description: Partially update blog category information.
      summary: Partially update a blog category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategory'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_category_formatted_destroy
      description: 'Delete a blog category. Note: This will also affect all child
        categories and associated blog posts based on cascade settings.'
      summary: Delete a blog category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/ancestors:
    get:
      operationId: api_v1_blog_category_ancestors_list
      description: Get all ancestors (parent, grandparent, etc.) of this category.
      summary: Get category ancestors
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/ancestors{format}:
    get:
      operationId: api_v1_blog_category_ancestors_formatted_list
      description: Get all ancestors (parent, grandparent, etc.) of this category.
      summary: Get category ancestors
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/children:
    get:
      operationId: api_v1_blog_category_children_list
      description: Get direct children of this category.
      summary: Get category children
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/children{format}:
    get:
      operationId: api_v1_blog_category_children_formatted_list
      description: Get direct children of this category.
      summary: Get category children
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/descendants:
    get:
      operationId: api_v1_blog_category_descendants_list
      description: Get all descendants (children, grandchildren, etc.) of this category.
      summary: Get category descendants
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/descendants{format}:
    get:
      operationId: api_v1_blog_category_descendants_formatted_list
      description: Get all descendants (children, grandchildren, etc.) of this category.
      summary: Get category descendants
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/posts:
    get:
      operationId: api_v1_blog_category_posts_list
      description: Retrieve all blog posts in this category and its subcategories.
        Use 'recursive=true' to include posts from all descendant categories.
      summary: Get category's blog posts
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - in: query
        name: recursive
        schema:
          type: boolean
          default: false
        description: Include posts from all descendant categories
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/posts{format}:
    get:
      operationId: api_v1_blog_category_posts_formatted_list
      description: Retrieve all blog posts in this category and its subcategories.
        Use 'recursive=true' to include posts from all descendant categories.
      summary: Get category's blog posts
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - in: query
        name: recursive
        schema:
          type: boolean
          default: false
        description: Include posts from all descendant categories
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/siblings:
    get:
      operationId: api_v1_blog_category_siblings_list
      description: Get sibling categories (same parent level).
      summary: Get category siblings
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/siblings{format}:
    get:
      operationId: api_v1_blog_category_siblings_formatted_list
      description: Get sibling categories (same parent level).
      summary: Get category siblings
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/stats:
    get:
      operationId: api_v1_blog_category_stats_retrieve
      description: Get comprehensive statistics about this category.
      summary: Get category statistics
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryStatsResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/stats{format}:
    get:
      operationId: api_v1_blog_category_stats_formatted_retrieve
      description: Get comprehensive statistics about this category.
      summary: Get category statistics
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryStatsResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/reorder:
    post:
      operationId: api_v1_blog_category_reorder_create
      description: Batch reorder categories by updating their sort_order values.
      summary: Reorder categories
      tags:
      - blog-categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryReorderResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/reorder{format}:
    post:
      operationId: api_v1_blog_category_reorder_formatted_create
      description: Batch reorder categories by updating their sort_order values.
      summary: Reorder categories
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - blog-categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryReorderResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/tree:
    get:
      operationId: api_v1_blog_category_tree_list
      description: Get the complete category tree structure with nested relationships.
        This is more efficient than using list?tree=true for displaying navigation
        menus or category hierarchies.
      summary: Get complete category tree
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
  /api/v1/blog/category/tree{format}:
    get:
      operationId: api_v1_blog_category_tree_formatted_list
      description: Get the complete category tree structure with nested relationships.
        This is more efficient than using list?tree=true for displaying navigation
        menus or category hierarchies.
      summary: Get complete category tree
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - blog-categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
  /api/v1/blog/comment:
    get:
      operationId: api_v1_blog_comment_list
      description: 'Retrieve a list of blog comments with hierarchical support. Supports
        filtering by post, user, approval status, and content. '
      summary: List blog comments
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
    post:
      operationId: api_v1_blog_comment_create
      description: Create a new blog comment. Requires authentication. Comments are
        subject to approval before being visible.
      summary: Create a blog comment
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogComment'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogComment'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment{format}:
    get:
      operationId: api_v1_blog_comment_formatted_list
      description: 'Retrieve a list of blog comments with hierarchical support. Supports
        filtering by post, user, approval status, and content. '
      summary: List blog comments
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
    post:
      operationId: api_v1_blog_comment_formatted_create
      description: Create a new blog comment. Requires authentication. Comments are
        subject to approval before being visible.
      summary: Create a blog comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogComment'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogComment'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}:
    get:
      operationId: api_v1_blog_comment_retrieve
      description: Get detailed information about a specific blog comment including
        replies.
      summary: Retrieve a blog comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_comment_update
      description: Update your own blog comment. Requires authentication.
      summary: Update a blog comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogComment'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogComment'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_comment_partial_update
      description: Partially update your own blog comment. Requires authentication.
      summary: Partially update a blog comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_comment_destroy
      description: Delete your own blog comment. Requires authentication.
      summary: Delete a blog comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}{format}:
    get:
      operationId: api_v1_blog_comment_formatted_retrieve
      description: Get detailed information about a specific blog comment including
        replies.
      summary: Retrieve a blog comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_comment_formatted_update
      description: Update your own blog comment. Requires authentication.
      summary: Update a blog comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogComment'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogComment'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_comment_formatted_partial_update
      description: Partially update your own blog comment. Requires authentication.
      summary: Partially update a blog comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogComment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_comment_formatted_destroy
      description: Delete your own blog comment. Requires authentication.
      summary: Delete a blog comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/post:
    get:
      operationId: api_v1_blog_comment_post_retrieve
      description: Get the blog post that this comment belongs to.
      summary: Get comment's blog post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/post{format}:
    get:
      operationId: api_v1_blog_comment_post_formatted_retrieve
      description: Get the blog post that this comment belongs to.
      summary: Get comment's blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/replies:
    get:
      operationId: api_v1_blog_comment_replies_list
      description: Get all replies (children) of this comment in threaded structure.
      summary: Get comment replies
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/replies{format}:
    get:
      operationId: api_v1_blog_comment_replies_formatted_list
      description: Get all replies (children) of this comment in threaded structure.
      summary: Get comment replies
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/thread:
    get:
      operationId: api_v1_blog_comment_thread_list
      description: Get the complete thread (all ancestors and descendants) of this
        comment.
      summary: Get comment thread
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
  /api/v1/blog/comment/{id}/thread{format}:
    get:
      operationId: api_v1_blog_comment_thread_formatted_list
      description: Get the complete thread (all ancestors and descendants) of this
        comment.
      summary: Get comment thread
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
  /api/v1/blog/comment/{id}/update_likes:
    post:
      operationId: api_v1_blog_comment_update_likes_create
      description: Like or unlike a comment. Toggles the like status.
      summary: Toggle comment like
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogComment'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogComment'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/update_likes{format}:
    post:
      operationId: api_v1_blog_comment_update_likes_formatted_create
      description: Like or unlike a comment. Toggles the like status.
      summary: Toggle comment like
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogComment'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogComment'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/liked_comments:
    post:
      operationId: api_v1_blog_comment_liked_comments_create
      description: Check which comments from a list are liked by the current user.
      summary: Check bulk like status
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostLikedCommentsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostLikedCommentsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostLikedCommentsRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedCommentsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/liked_comments{format}:
    post:
      operationId: api_v1_blog_comment_liked_comments_formatted_create
      description: Check which comments from a list are liked by the current user.
      summary: Check bulk like status
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostLikedCommentsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostLikedCommentsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostLikedCommentsRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedCommentsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/my_comment:
    post:
      operationId: api_v1_blog_comment_my_comment_create
      description: Get the comment made by the currently authenticated user for a
        specific post.
      summary: Get current user's comment
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/MyCommentRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/my_comment{format}:
    post:
      operationId: api_v1_blog_comment_my_comment_formatted_create
      description: Get the comment made by the currently authenticated user for a
        specific post.
      summary: Get current user's comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - blog-comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/MyCommentRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/my_comments:
    get:
      operationId: api_v1_blog_comment_my_comments_list
      description: Get all comments made by the currently authenticated user.
      summary: Get current user's comments
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/my_comments{format}:
    get:
      operationId: api_v1_blog_comment_my_comments_formatted_list
      description: Get all comments made by the currently authenticated user.
      summary: Get current user's comments
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - blog-comments
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post:
    get:
      operationId: api_v1_blog_post_list
      description: Retrieve a list of blog posts with rich filtering and search capabilities.
        Supports filtering by category, tags, author, engagement metrics, and content.
        Includes MeiliSearch integration for advanced full-text search.
      summary: List blog posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
    post:
      operationId: api_v1_blog_post_create
      description: Create a new blog post. Requires authentication.
      summary: Create a blog post
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post{format}:
    get:
      operationId: api_v1_blog_post_formatted_list
      description: Retrieve a list of blog posts with rich filtering and search capabilities.
        Supports filtering by category, tags, author, engagement metrics, and content.
        Includes MeiliSearch integration for advanced full-text search.
      summary: List blog posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
    post:
      operationId: api_v1_blog_post_formatted_create
      description: Create a new blog post. Requires authentication.
      summary: Create a blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}:
    get:
      operationId: api_v1_blog_post_retrieve
      description: Get detailed information about a specific blog post including all
        relationships, engagement metrics, and SEO data.
      summary: Retrieve a blog post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_post_update
      description: Update blog post information. Requires authentication.
      summary: Update a blog post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_post_partial_update
      description: Partially update blog post information. Requires authentication.
      summary: Partially update a blog post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_post_destroy
      description: Delete a blog post. Requires authentication.
      summary: Delete a blog post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}{format}:
    get:
      operationId: api_v1_blog_post_formatted_retrieve
      description: Get detailed information about a specific blog post including all
        relationships, engagement metrics, and SEO data.
      summary: Retrieve a blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_post_formatted_update
      description: Update blog post information. Requires authentication.
      summary: Update a blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_post_formatted_partial_update
      description: Partially update blog post information. Requires authentication.
      summary: Partially update a blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogPost'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_post_formatted_destroy
      description: Delete a blog post. Requires authentication.
      summary: Delete a blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/comments:
    get:
      operationId: api_v1_blog_post_comments_list
      description: Get all comments for a blog post.
      summary: Get post comments
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/comments{format}:
    get:
      operationId: api_v1_blog_post_comments_formatted_list
      description: Get all comments for a blog post.
      summary: Get post comments
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/related_posts:
    get:
      operationId: api_v1_blog_post_related_posts_retrieve
      description: Get related posts for a blog post.
      summary: Get related posts
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/related_posts{format}:
    get:
      operationId: api_v1_blog_post_related_posts_formatted_retrieve
      description: Get related posts for a blog post.
      summary: Get related posts
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/update_likes:
    post:
      operationId: api_v1_blog_post_update_likes_create
      description: Like or unlike a blog post. Toggles the like status.
      summary: Toggle post like
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/update_likes{format}:
    post:
      operationId: api_v1_blog_post_update_likes_formatted_create
      description: Like or unlike a blog post. Toggles the like status.
      summary: Toggle post like
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/update_view_count:
    post:
      operationId: api_v1_blog_post_update_view_count_create
      description: Increment the view count for a blog post.
      summary: Increment post view count
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/update_view_count{format}:
    post:
      operationId: api_v1_blog_post_update_view_count_formatted_create
      description: Increment the view count for a blog post.
      summary: Increment post view count
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/featured:
    get:
      operationId: api_v1_blog_post_featured_list
      description: Get posts marked as featured, ordered by publication date.
      summary: Get featured posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/featured{format}:
    get:
      operationId: api_v1_blog_post_featured_formatted_list
      description: Get posts marked as featured, ordered by publication date.
      summary: Get featured posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/liked_posts:
    post:
      operationId: api_v1_blog_post_liked_posts_create
      description: Get all posts that the authenticated user has liked.
      summary: Get liked posts
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedPostsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/liked_posts{format}:
    post:
      operationId: api_v1_blog_post_liked_posts_formatted_create
      description: Get all posts that the authenticated user has liked.
      summary: Get liked posts
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - blog-posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikedPostsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/popular:
    get:
      operationId: api_v1_blog_post_popular_list
      description: Get most popular blog posts based on all-time engagement metrics.
      summary: Get popular posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/popular{format}:
    get:
      operationId: api_v1_blog_post_popular_formatted_list
      description: Get most popular blog posts based on all-time engagement metrics.
      summary: Get popular posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/trending:
    get:
      operationId: api_v1_blog_post_trending_list
      description: Get trending blog posts based on recent engagement metrics. Combines
        views, likes, and comments from recent time period.
      summary: Get trending posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: days
        schema:
          type: integer
          default: 7
        description: Number of days to look back for trending calculation
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/trending{format}:
    get:
      operationId: api_v1_blog_post_trending_formatted_list
      description: Get trending blog posts based on recent engagement metrics. Combines
        views, likes, and comments from recent time period.
      summary: Get trending posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: days
        schema:
          type: integer
          default: 7
        description: Number of days to look back for trending calculation
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      tags:
      - blog-posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/tag:
    get:
      operationId: api_v1_blog_tag_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogTagList'
          description: ''
    post:
      operationId: api_v1_blog_tag_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTag'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTag'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
  /api/v1/blog/tag{format}:
    get:
      operationId: api_v1_blog_tag_formatted_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogTagList'
          description: ''
    post:
      operationId: api_v1_blog_tag_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTag'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTag'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
  /api/v1/blog/tag/{id}:
    get:
      operationId: api_v1_blog_tag_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    put:
      operationId: api_v1_blog_tag_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTag'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTag'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    patch:
      operationId: api_v1_blog_tag_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    delete:
      operationId: api_v1_blog_tag_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/blog/tag/{id}{format}:
    get:
      operationId: api_v1_blog_tag_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    put:
      operationId: api_v1_blog_tag_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTag'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTag'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    patch:
      operationId: api_v1_blog_tag_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogTag'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTag'
          description: ''
    delete:
      operationId: api_v1_blog_tag_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/cart:
    get:
      operationId: api_v1_cart_retrieve
      description: Get a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Get cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - cart
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_cart_update
      description: Update a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Update cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - cart
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_cart_partial_update
      description: Update a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Update cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - cart
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCart'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_cart_destroy
      description: Delete a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Delete cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - cart
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart{format}:
    get:
      operationId: api_v1_cart_formatted_retrieve
      description: Get a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Get cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - cart
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_cart_formatted_update
      description: Update a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Update cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - cart
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Cart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Cart'
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_cart_formatted_partial_update
      description: Update a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Update cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - cart
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCart'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCart'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_cart_formatted_destroy
      description: Delete a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Delete cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - cart
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart/item:
    get:
      operationId: api_v1_cart_item_list
      description: Get all cart items. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Get cart items
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: query
        name: cart
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - cart-items
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
    post:
      operationId: api_v1_cart_item_create
      description: Create a new cart item. For guest users, include X-Cart-Id and
        X-Session-Key headers to maintain cart session.
      summary: Create cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - cart-items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart/item{format}:
    get:
      operationId: api_v1_cart_item_formatted_list
      description: Get all cart items. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Get cart items
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: query
        name: cart
        schema:
          type: integer
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - cart-items
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
    post:
      operationId: api_v1_cart_item_formatted_create
      description: Create a new cart item. For guest users, include X-Cart-Id and
        X-Session-Key headers to maintain cart session.
      summary: Create cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - cart-items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart/item/{id}:
    get:
      operationId: api_v1_cart_item_retrieve
      description: Get a specific cart item. For guest users, include X-Cart-Id and
        X-Session-Key headers to maintain cart session.
      summary: Get cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - cart-items
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_cart_item_update
      description: Update a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Update cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - cart-items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_cart_item_partial_update
      description: Partial update a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Partial update cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - cart-items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_cart_item_destroy
      description: Delete a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Delete cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - cart-items
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart/item/{id}{format}:
    get:
      operationId: api_v1_cart_item_formatted_retrieve
      description: Get a specific cart item. For guest users, include X-Cart-Id and
        X-Session-Key headers to maintain cart session.
      summary: Get cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - cart-items
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_cart_item_formatted_update
      description: Update a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Update cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - cart-items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_cart_item_formatted_partial_update
      description: Partial update a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Partial update cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - cart-items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_cart_item_formatted_destroy
      description: Delete a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Delete cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - cart-items
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/contact:
    post:
      operationId: api_v1_contact_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Contact'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Contact'
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
  /api/v1/country:
    get:
      operationId: api_v1_country_list
      parameters:
      - in: query
        name: alpha2
        schema:
          type: string
      - in: query
        name: alpha3
        schema:
          type: string
      - in: query
        name: isoCc
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phoneCode
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: translations_Name
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCountryList'
          description: ''
    post:
      operationId: api_v1_country_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
  /api/v1/country{format}:
    get:
      operationId: api_v1_country_formatted_list
      parameters:
      - in: query
        name: alpha2
        schema:
          type: string
      - in: query
        name: alpha3
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: isoCc
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phoneCode
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: translations_Name
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCountryList'
          description: ''
    post:
      operationId: api_v1_country_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
  /api/v1/country/{alpha_2}:
    get:
      operationId: api_v1_country_retrieve
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    put:
      operationId: api_v1_country_update
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    patch:
      operationId: api_v1_country_partial_update
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    delete:
      operationId: api_v1_country_destroy
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/country/{alpha_2}{format}:
    get:
      operationId: api_v1_country_formatted_retrieve
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    put:
      operationId: api_v1_country_formatted_update
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    patch:
      operationId: api_v1_country_formatted_partial_update
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
    delete:
      operationId: api_v1_country_formatted_destroy
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/health:
    get:
      operationId: api_v1_health_retrieve
      description: Check the health status of database, Redis, and Celery
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
          description: ''
  /api/v1/notification/ids:
    post:
      operationId: api_v1_notification_ids_create
      description: Returns the notifications for a list of ids.
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
  /api/v1/notification/ids{format}:
    post:
      operationId: api_v1_notification_ids_formatted_create
      description: Returns the notifications for a list of ids.
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
  /api/v1/notification/user/{id}:
    get:
      operationId: api_v1_notification_user_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
    put:
      operationId: api_v1_notification_user_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
    patch:
      operationId: api_v1_notification_user_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
    delete:
      operationId: api_v1_notification_user_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/notification/user/{id}{format}:
    get:
      operationId: api_v1_notification_user_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
    put:
      operationId: api_v1_notification_user_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
    patch:
      operationId: api_v1_notification_user_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
    delete:
      operationId: api_v1_notification_user_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/notification/user/mark_all_as_seen:
    post:
      operationId: api_v1_notification_user_mark_all_as_seen_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
  /api/v1/notification/user/mark_all_as_seen{format}:
    post:
      operationId: api_v1_notification_user_mark_all_as_seen_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
  /api/v1/notification/user/mark_all_as_unseen:
    post:
      operationId: api_v1_notification_user_mark_all_as_unseen_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
  /api/v1/notification/user/mark_all_as_unseen{format}:
    post:
      operationId: api_v1_notification_user_mark_all_as_unseen_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
  /api/v1/notification/user/mark_as_seen:
    post:
      operationId: api_v1_notification_user_mark_as_seen_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUserAction'
          description: ''
  /api/v1/notification/user/mark_as_seen{format}:
    post:
      operationId: api_v1_notification_user_mark_as_seen_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUserAction'
          description: ''
  /api/v1/notification/user/mark_as_unseen:
    post:
      operationId: api_v1_notification_user_mark_as_unseen_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUserAction'
          description: ''
  /api/v1/notification/user/mark_as_unseen{format}:
    post:
      operationId: api_v1_notification_user_mark_as_unseen_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUserAction'
          description: ''
  /api/v1/notification/user/unseen_count:
    get:
      operationId: api_v1_notification_user_unseen_count_retrieve
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
  /api/v1/notification/user/unseen_count{format}:
    get:
      operationId: api_v1_notification_user_unseen_count_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
  /api/v1/order:
    get:
      operationId: api_v1_order_list
      description: Returns a list of all orders with pagination
      summary: List all orders
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: paymentStatus
        schema:
          type: string
          enum:
          - CANCELED
          - COMPLETED
          - FAILED
          - PARTIALLY_REFUNDED
          - PENDING
          - PROCESSING
          - REFUNDED
        description: |-
          * `PENDING` - Pending
          * `PROCESSING` - Processing
          * `COMPLETED` - Completed
          * `FAILED` - Failed
          * `REFUNDED` - Refunded
          * `PARTIALLY_REFUNDED` - Partially Refunded
          * `CANCELED` - Canceled
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - CANCELED
          - COMPLETED
          - DELIVERED
          - PENDING
          - PROCESSING
          - REFUNDED
          - RETURNED
          - SHIPPED
        description: |-
          * `PENDING` - Pending
          * `PROCESSING` - Processing
          * `SHIPPED` - Shipped
          * `DELIVERED` - Delivered
          * `COMPLETED` - Completed
          * `CANCELED` - Canceled
          * `RETURNED` - Returned
          * `REFUNDED` - Refunded
      - in: query
        name: userId
        schema:
          type: integer
          nullable: true
      tags:
      - order
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
    post:
      operationId: api_v1_order_create
      description: Process a checkout and create a new order
      summary: Create an order or process a checkout
      tags:
      - order
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderCreateUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateUpdate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/v1/order-items:
    get:
      operationId: api_v1_order_items_list
      description: List all order items associated with the authenticated user's orders.
      summary: List order items
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - order-items
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderItemList'
          description: ''
  /api/v1/order-items/{id}:
    get:
      operationId: api_v1_order_items_retrieve
      description: Retrieve a specific order item by ID.
      summary: Retrieve an order item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - order-items
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
          description: ''
  /api/v1/order-items/{id}/refund:
    post:
      operationId: api_v1_order_items_refund_create
      description: Process a refund for an order item.
      summary: Process a refund for an order item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - order-items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItem'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
          description: ''
  /api/v1/order/{id}:
    get:
      operationId: api_v1_order_retrieve
      description: Get detailed information about a specific order
      summary: Retrieve an order by ID
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - order
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
    put:
      operationId: api_v1_order_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderCreateUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreateUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreateUpdate'
          description: ''
    patch:
      operationId: api_v1_order_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderCreateUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderCreateUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreateUpdate'
          description: ''
    delete:
      operationId: api_v1_order_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '204':
          description: No response body
  /api/v1/order/{id}/add_tracking:
    post:
      operationId: api_v1_order_add_tracking_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetail'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/v1/order/{id}/cancel:
    post:
      operationId: api_v1_order_cancel_create
      description: Cancel an existing order and restore product stock
      summary: Cancel an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - order
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetail'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/v1/order/{id}/payment_status:
    get:
      operationId: api_v1_order_payment_status_retrieve
      description: Retrieves the current payment status for the specified order.
      summary: Check payment status
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatusResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}/process_payment:
    post:
      operationId: api_v1_order_process_payment_create
      description: Initiates payment processing for the specified order using the
        provided payment method.
      summary: Process payment for an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProcessPaymentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProcessPaymentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessPaymentRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessPaymentResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}/refund:
    post:
      operationId: api_v1_order_refund_create
      description: Initiates a refund for the specified order. Requires admin permissions.
      summary: Refund payment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}/update_status:
    post:
      operationId: api_v1_order_update_status_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetail'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/v1/order/my_orders:
    get:
      operationId: api_v1_order_my_orders_list
      description: Returns a list of the authenticated user's orders
      summary: List current user's orders
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: paymentStatus
        schema:
          type: string
          enum:
          - CANCELED
          - COMPLETED
          - FAILED
          - PARTIALLY_REFUNDED
          - PENDING
          - PROCESSING
          - REFUNDED
        description: |-
          * `PENDING` - Pending
          * `PROCESSING` - Processing
          * `COMPLETED` - Completed
          * `FAILED` - Failed
          * `REFUNDED` - Refunded
          * `PARTIALLY_REFUNDED` - Partially Refunded
          * `CANCELED` - Canceled
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - CANCELED
          - COMPLETED
          - DELIVERED
          - PENDING
          - PROCESSING
          - REFUNDED
          - RETURNED
          - SHIPPED
        description: |-
          * `PENDING` - Pending
          * `PROCESSING` - Processing
          * `SHIPPED` - Shipped
          * `DELIVERED` - Delivered
          * `COMPLETED` - Completed
          * `CANCELED` - Canceled
          * `RETURNED` - Returned
          * `REFUNDED` - Refunded
      - in: query
        name: userId
        schema:
          type: integer
          nullable: true
      tags:
      - order
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
  /api/v1/order/uuid/{uuid}:
    get:
      operationId: api_v1_order_uuid_retrieve
      description: Get detailed information about a specific order using its UUID
      summary: Retrieve an order by UUID
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - order
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/v1/pay_way:
    get:
      operationId: api_v1_pay_way_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: cost
        schema:
          type: number
      - in: query
        name: freeForOrderAmount
        schema:
          type: number
      - in: query
        name: isOnlinePayment
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: providerCode
        schema:
          type: string
      - in: query
        name: requiresConfirmation
        schema:
          type: boolean
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPayWayList'
          description: ''
    post:
      operationId: api_v1_pay_way_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayWay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayWay'
          application/json:
            schema:
              $ref: '#/components/schemas/PayWay'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
  /api/v1/pay_way/{id}:
    get:
      operationId: api_v1_pay_way_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
    put:
      operationId: api_v1_pay_way_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayWay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayWay'
          application/json:
            schema:
              $ref: '#/components/schemas/PayWay'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
    patch:
      operationId: api_v1_pay_way_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPayWay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPayWay'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPayWay'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
    delete:
      operationId: api_v1_pay_way_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product:
    get:
      operationId: api_v1_product_list
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minApprovedReviewAverage
        schema:
          type: number
        description: Minimum Approved Review Average
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: api_v1_product_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product{format}:
    get:
      operationId: api_v1_product_formatted_list
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minApprovedReviewAverage
        schema:
          type: number
        description: Minimum Approved Review Average
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: api_v1_product_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product/{id}:
    get:
      operationId: api_v1_product_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: api_v1_product_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: api_v1_product_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: api_v1_product_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/{id}{format}:
    get:
      operationId: api_v1_product_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: api_v1_product_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: api_v1_product_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: api_v1_product_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/{id}/images:
    get:
      operationId: api_v1_product_images_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
  /api/v1/product/{id}/images{format}:
    get:
      operationId: api_v1_product_images_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
  /api/v1/product/{id}/reviews:
    get:
      operationId: api_v1_product_reviews_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/v1/product/{id}/reviews{format}:
    get:
      operationId: api_v1_product_reviews_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/v1/product/{id}/tags:
    get:
      operationId: api_v1_product_tags_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /api/v1/product/{id}/tags{format}:
    get:
      operationId: api_v1_product_tags_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /api/v1/product/{id}/update_view_count:
    post:
      operationId: api_v1_product_update_view_count_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product/{id}/update_view_count{format}:
    post:
      operationId: api_v1_product_update_view_count_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product/category:
    get:
      operationId: api_v1_product_category_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductCategoryList'
          description: ''
    post:
      operationId: api_v1_product_category_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
  /api/v1/product/category{format}:
    get:
      operationId: api_v1_product_category_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductCategoryList'
          description: ''
    post:
      operationId: api_v1_product_category_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
  /api/v1/product/category/{id}:
    get:
      operationId: api_v1_product_category_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    put:
      operationId: api_v1_product_category_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    patch:
      operationId: api_v1_product_category_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    delete:
      operationId: api_v1_product_category_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/category/{id}{format}:
    get:
      operationId: api_v1_product_category_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    put:
      operationId: api_v1_product_category_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    patch:
      operationId: api_v1_product_category_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
    delete:
      operationId: api_v1_product_category_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/favourite:
    get:
      operationId: api_v1_product_favourite_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
    post:
      operationId: api_v1_product_favourite_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
  /api/v1/product/favourite{format}:
    get:
      operationId: api_v1_product_favourite_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
    post:
      operationId: api_v1_product_favourite_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
  /api/v1/product/favourite/{id}:
    get:
      operationId: api_v1_product_favourite_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    put:
      operationId: api_v1_product_favourite_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    patch:
      operationId: api_v1_product_favourite_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    delete:
      operationId: api_v1_product_favourite_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/favourite/{id}{format}:
    get:
      operationId: api_v1_product_favourite_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    put:
      operationId: api_v1_product_favourite_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    patch:
      operationId: api_v1_product_favourite_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
    delete:
      operationId: api_v1_product_favourite_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/favourite/{id}/product:
    get:
      operationId: api_v1_product_favourite_product_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product/favourite/{id}/product{format}:
    get:
      operationId: api_v1_product_favourite_product_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product/favourite/favourites_by_products:
    post:
      operationId: api_v1_product_favourite_favourites_by_products_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
  /api/v1/product/favourite/favourites_by_products{format}:
    post:
      operationId: api_v1_product_favourite_favourites_by_products_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
  /api/v1/product/image:
    get:
      operationId: api_v1_product_image_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isMain
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductImageList'
          description: ''
    post:
      operationId: api_v1_product_image_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImage'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
  /api/v1/product/image{format}:
    get:
      operationId: api_v1_product_image_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isMain
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductImageList'
          description: ''
    post:
      operationId: api_v1_product_image_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImage'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
  /api/v1/product/image/{id}:
    get:
      operationId: api_v1_product_image_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
    put:
      operationId: api_v1_product_image_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImage'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
    patch:
      operationId: api_v1_product_image_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
    delete:
      operationId: api_v1_product_image_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/image/{id}{format}:
    get:
      operationId: api_v1_product_image_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
    put:
      operationId: api_v1_product_image_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImage'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
    patch:
      operationId: api_v1_product_image_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
    delete:
      operationId: api_v1_product_image_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/product/review:
    get:
      operationId: api_v1_product_review_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - 'FALSE'
          - NEW
          - 'TRUE'
        description: |-
          * `NEW` - New
          * `TRUE` - True
          * `FALSE` - False
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
    post:
      operationId: api_v1_product_review_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/v1/product/review{format}:
    get:
      operationId: api_v1_product_review_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - 'FALSE'
          - NEW
          - 'TRUE'
        description: |-
          * `NEW` - New
          * `TRUE` - True
          * `FALSE` - False
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
    post:
      operationId: api_v1_product_review_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/v1/product/review/{id}:
    get:
      operationId: api_v1_product_review_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    put:
      operationId: api_v1_product_review_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    patch:
      operationId: api_v1_product_review_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    delete:
      operationId: api_v1_product_review_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '204':
          description: No response body
  /api/v1/product/review/{id}{format}:
    get:
      operationId: api_v1_product_review_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    put:
      operationId: api_v1_product_review_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    patch:
      operationId: api_v1_product_review_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
    delete:
      operationId: api_v1_product_review_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '204':
          description: No response body
  /api/v1/product/review/{id}/product:
    get:
      operationId: api_v1_product_review_product_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product/review/{id}/product{format}:
    get:
      operationId: api_v1_product_review_product_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/product/review/user_product_review:
    post:
      operationId: api_v1_product_review_user_product_review_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/v1/product/review/user_product_review{format}:
    post:
      operationId: api_v1_product_review_user_product_review_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/v1/region:
    get:
      operationId: api_v1_region_list
      parameters:
      - in: query
        name: alpha
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
          title: Country Code Alpha 2
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegionList'
          description: ''
    post:
      operationId: api_v1_region_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
  /api/v1/region{format}:
    get:
      operationId: api_v1_region_formatted_list
      parameters:
      - in: query
        name: alpha
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
          title: Country Code Alpha 2
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegionList'
          description: ''
    post:
      operationId: api_v1_region_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
  /api/v1/region/{alpha}:
    get:
      operationId: api_v1_region_retrieve
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    put:
      operationId: api_v1_region_update
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    patch:
      operationId: api_v1_region_partial_update
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    delete:
      operationId: api_v1_region_destroy
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/region/{alpha}{format}:
    get:
      operationId: api_v1_region_formatted_retrieve
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    put:
      operationId: api_v1_region_formatted_update
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    patch:
      operationId: api_v1_region_formatted_partial_update
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
    delete:
      operationId: api_v1_region_formatted_destroy
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/region/{alpha}/get_regions_by_country_alpha_2:
    get:
      operationId: api_v1_region_get_regions_by_country_alpha_2_retrieve
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
  /api/v1/region/{alpha}/get_regions_by_country_alpha_2{format}:
    get:
      operationId: api_v1_region_get_regions_by_country_alpha_2_formatted_retrieve
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
  /api/v1/search/blog/post:
    get:
      operationId: api_v1_search_blog_post_retrieve
      description: Search blog posts with MeiliSearch
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostMeiliSearchResponse'
          description: ''
  /api/v1/search/blog/post{format}:
    get:
      operationId: api_v1_search_blog_post_formatted_retrieve
      description: Search blog posts with MeiliSearch
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostMeiliSearchResponse'
          description: ''
  /api/v1/search/product:
    get:
      operationId: api_v1_search_product_retrieve
      description: Search products with MeiliSearch
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMeiliSearchResponse'
          description: ''
  /api/v1/search/product{format}:
    get:
      operationId: api_v1_search_product_formatted_retrieve
      description: Search products with MeiliSearch
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMeiliSearchResponse'
          description: ''
  /api/v1/slide:
    get:
      operationId: api_v1_slide_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slider
        schema:
          type: integer
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSlideList'
          description: ''
    post:
      operationId: api_v1_slide_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
  /api/v1/slide{format}:
    get:
      operationId: api_v1_slide_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slider
        schema:
          type: integer
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSlideList'
          description: ''
    post:
      operationId: api_v1_slide_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
  /api/v1/slide/{id}:
    get:
      operationId: api_v1_slide_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    put:
      operationId: api_v1_slide_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    patch:
      operationId: api_v1_slide_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    delete:
      operationId: api_v1_slide_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/slide/{id}{format}:
    get:
      operationId: api_v1_slide_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    put:
      operationId: api_v1_slide_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    patch:
      operationId: api_v1_slide_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
    delete:
      operationId: api_v1_slide_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/slider:
    get:
      operationId: api_v1_slider_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSliderList'
          description: ''
    post:
      operationId: api_v1_slider_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
  /api/v1/slider{format}:
    get:
      operationId: api_v1_slider_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSliderList'
          description: ''
    post:
      operationId: api_v1_slider_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
  /api/v1/slider/{id}:
    get:
      operationId: api_v1_slider_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    put:
      operationId: api_v1_slider_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    patch:
      operationId: api_v1_slider_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    delete:
      operationId: api_v1_slider_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/slider/{id}{format}:
    get:
      operationId: api_v1_slider_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    put:
      operationId: api_v1_slider_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    patch:
      operationId: api_v1_slider_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
    delete:
      operationId: api_v1_slider_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/tip:
    get:
      operationId: api_v1_tip_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: kind
        schema:
          type: string
          enum:
          - ERROR
          - INFO
          - SUCCESS
          - WARNING
        description: |-
          * `SUCCESS` - Success
          * `INFO` - Info
          * `ERROR` - Error
          * `WARNING` - Warning
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTipList'
          description: ''
    post:
      operationId: api_v1_tip_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
  /api/v1/tip{format}:
    get:
      operationId: api_v1_tip_formatted_list
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: kind
        schema:
          type: string
          enum:
          - ERROR
          - INFO
          - SUCCESS
          - WARNING
        description: |-
          * `SUCCESS` - Success
          * `INFO` - Info
          * `ERROR` - Error
          * `WARNING` - Warning
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTipList'
          description: ''
    post:
      operationId: api_v1_tip_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
  /api/v1/tip/{id}:
    get:
      operationId: api_v1_tip_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    put:
      operationId: api_v1_tip_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    patch:
      operationId: api_v1_tip_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTip'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    delete:
      operationId: api_v1_tip_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/tip/{id}{format}:
    get:
      operationId: api_v1_tip_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    put:
      operationId: api_v1_tip_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    patch:
      operationId: api_v1_tip_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTip'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
    delete:
      operationId: api_v1_tip_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/user/account:
    get:
      operationId: api_v1_user_account_list
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuthenticationList'
          description: ''
    post:
      operationId: api_v1_user_account_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Authentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Authentication'
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
  /api/v1/user/account{format}:
    get:
      operationId: api_v1_user_account_formatted_list
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuthenticationList'
          description: ''
    post:
      operationId: api_v1_user_account_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Authentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Authentication'
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
  /api/v1/user/account/{id}:
    get:
      operationId: api_v1_user_account_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
    put:
      operationId: api_v1_user_account_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Authentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Authentication'
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
    patch:
      operationId: api_v1_user_account_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
    delete:
      operationId: api_v1_user_account_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '204':
          description: No response body
  /api/v1/user/account/{id}{format}:
    get:
      operationId: api_v1_user_account_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
    put:
      operationId: api_v1_user_account_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Authentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Authentication'
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
    patch:
      operationId: api_v1_user_account_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
    delete:
      operationId: api_v1_user_account_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '204':
          description: No response body
  /api/v1/user/account/{id}/addresses:
    get:
      operationId: api_v1_user_account_addresses_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
  /api/v1/user/account/{id}/addresses{format}:
    get:
      operationId: api_v1_user_account_addresses_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
  /api/v1/user/account/{id}/blog_post_comments:
    get:
      operationId: api_v1_user_account_blog_post_comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
  /api/v1/user/account/{id}/blog_post_comments{format}:
    get:
      operationId: api_v1_user_account_blog_post_comments_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogComment'
          description: ''
  /api/v1/user/account/{id}/change_username:
    post:
      operationId: api_v1_user_account_change_username_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameUpdate'
          description: ''
  /api/v1/user/account/{id}/change_username{format}:
    post:
      operationId: api_v1_user_account_change_username_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameUpdate'
          description: ''
  /api/v1/user/account/{id}/favourite_products:
    get:
      operationId: api_v1_user_account_favourite_products_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
  /api/v1/user/account/{id}/favourite_products{format}:
    get:
      operationId: api_v1_user_account_favourite_products_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
  /api/v1/user/account/{id}/liked_blog_posts:
    get:
      operationId: api_v1_user_account_liked_blog_posts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
  /api/v1/user/account/{id}/liked_blog_posts{format}:
    get:
      operationId: api_v1_user_account_liked_blog_posts_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
  /api/v1/user/account/{id}/notifications:
    get:
      operationId: api_v1_user_account_notifications_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
  /api/v1/user/account/{id}/notifications{format}:
    get:
      operationId: api_v1_user_account_notifications_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
  /api/v1/user/account/{id}/orders:
    get:
      operationId: api_v1_user_account_orders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/v1/user/account/{id}/orders{format}:
    get:
      operationId: api_v1_user_account_orders_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/v1/user/account/{id}/product_reviews:
    get:
      operationId: api_v1_user_account_product_reviews_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/v1/user/account/{id}/product_reviews{format}:
    get:
      operationId: api_v1_user_account_product_reviews_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
  /api/v1/user/address:
    get:
      operationId: api_v1_user_address_list
      description: Retrieve a list of addresses for the authenticated user.
      summary: List user addresses
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city name (partial match)
      - in: query
        name: country
        schema:
          type: number
        description: Filter by country ID
      - in: query
        name: countryCode
        schema:
          type: string
        description: Filter by country code (e.g., 'US', 'CA')
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date
        description: Filter addresses created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date
        description: Filter addresses created before this date
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isMain
        schema:
          type: boolean
        description: Filter by main address status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: locationType
        schema:
          type: string
        description: Filter by location type (exact match, case insensitive)
      - in: query
        name: locationTypeContains
        schema:
          type: string
        description: Filter by location type (partial match)
      - in: query
        name: mobilePhone
        schema:
          type: string
        description: Filter by mobile phone number (partial match)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phone
        schema:
          type: string
        description: Filter by phone number (partial match)
      - in: query
        name: region
        schema:
          type: number
        description: Filter by region ID
      - in: query
        name: regionName
        schema:
          type: string
        description: Filter by region name (partial match)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: street
        schema:
          type: string
        description: Filter by street name (partial match)
      - in: query
        name: streetNumber
        schema:
          type: string
        description: Filter by street number
      - in: query
        name: title
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date
        description: Filter addresses updated after this date
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date
        description: Filter addresses updated before this date
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcodeExact
        schema:
          type: string
        description: Filter by exact zipcode
      tags:
      - user-addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAddressList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: api_v1_user_address_create
      description: Create a new address for the authenticated user.
      summary: Create a user address
      tags:
      - user-addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address{format}:
    get:
      operationId: api_v1_user_address_formatted_list
      description: Retrieve a list of addresses for the authenticated user.
      summary: List user addresses
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city name (partial match)
      - in: query
        name: country
        schema:
          type: number
        description: Filter by country ID
      - in: query
        name: countryCode
        schema:
          type: string
        description: Filter by country code (e.g., 'US', 'CA')
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date
        description: Filter addresses created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date
        description: Filter addresses created before this date
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isMain
        schema:
          type: boolean
        description: Filter by main address status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: locationType
        schema:
          type: string
        description: Filter by location type (exact match, case insensitive)
      - in: query
        name: locationTypeContains
        schema:
          type: string
        description: Filter by location type (partial match)
      - in: query
        name: mobilePhone
        schema:
          type: string
        description: Filter by mobile phone number (partial match)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phone
        schema:
          type: string
        description: Filter by phone number (partial match)
      - in: query
        name: region
        schema:
          type: number
        description: Filter by region ID
      - in: query
        name: regionName
        schema:
          type: string
        description: Filter by region name (partial match)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: street
        schema:
          type: string
        description: Filter by street name (partial match)
      - in: query
        name: streetNumber
        schema:
          type: string
        description: Filter by street number
      - in: query
        name: title
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date
        description: Filter addresses updated after this date
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date
        description: Filter addresses updated before this date
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcodeExact
        schema:
          type: string
        description: Filter by exact zipcode
      tags:
      - user-addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAddressList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: api_v1_user_address_formatted_create
      description: Create a new address for the authenticated user.
      summary: Create a user address
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - user-addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address/{id}:
    get:
      operationId: api_v1_user_address_retrieve
      description: Get detailed information about a specific user address.
      summary: Retrieve a user address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_user_address_update
      description: Update user address information.
      summary: Update a user address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_user_address_partial_update
      description: Partially update user address information.
      summary: Partially update a user address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_user_address_destroy
      description: Delete a user address.
      summary: Delete a user address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-addresses
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address/{id}{format}:
    get:
      operationId: api_v1_user_address_formatted_retrieve
      description: Get detailed information about a specific user address.
      summary: Retrieve a user address
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_user_address_formatted_update
      description: Update user address information.
      summary: Update a user address
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_user_address_formatted_partial_update
      description: Partially update user address information.
      summary: Partially update a user address
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_user_address_formatted_destroy
      description: Delete a user address.
      summary: Delete a user address
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-addresses
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address/{id}/set_main:
    post:
      operationId: api_v1_user_address_set_main_create
      description: Set this address as the user's main address.
      summary: Set address as main
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address/{id}/set_main{format}:
    post:
      operationId: api_v1_user_address_set_main_formatted_create
      description: Set this address as the user's main address.
      summary: Set address as main
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/vat:
    get:
      operationId: api_v1_vat_list
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: value
        schema:
          type: number
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVatList'
          description: ''
    post:
      operationId: api_v1_vat_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
  /api/v1/vat{format}:
    get:
      operationId: api_v1_vat_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: value
        schema:
          type: number
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVatList'
          description: ''
    post:
      operationId: api_v1_vat_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
  /api/v1/vat/{id}:
    get:
      operationId: api_v1_vat_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    put:
      operationId: api_v1_vat_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    patch:
      operationId: api_v1_vat_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVat'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    delete:
      operationId: api_v1_vat_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
  /api/v1/vat/{id}{format}:
    get:
      operationId: api_v1_vat_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    put:
      operationId: api_v1_vat_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    patch:
      operationId: api_v1_vat_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVat'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
    delete:
      operationId: api_v1_vat_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - {}
      responses:
        '204':
          description: No response body
components:
  schemas:
    Authentication:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
          title: Id
        email:
          type: string
          format: email
          title: Διεύθυνση ηλεκτρονικού ταχυδρομείου
          maxLength: 254
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        id:
          type: integer
          readOnly: true
        username:
          type: string
          nullable: true
          title: Όνομα χρήστη
          description: Required. 30 characters or fewer.Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 30
        image:
          type: string
          format: uri
          nullable: true
          title: Εικόνα
        phone:
          type: string
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        address:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        country:
          type: string
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          title: Region Code
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
        twitter:
          type: string
          format: uri
          title: Twitter Profile
          maxLength: 200
        linkedin:
          type: string
          format: uri
          title: LinkedIn Profile
          maxLength: 200
        facebook:
          type: string
          format: uri
          title: Facebook Profile
          maxLength: 200
        instagram:
          type: string
          format: uri
          title: Instagram Profile
          maxLength: 200
        website:
          type: string
          format: uri
          maxLength: 200
        youtube:
          type: string
          format: uri
          title: Youtube Profile
          maxLength: 200
        github:
          type: string
          format: uri
          title: Github Profile
          maxLength: 200
        bio:
          type: string
        isActive:
          type: boolean
          readOnly: true
          title: Active
        isStaff:
          type: boolean
          readOnly: true
          title: Staff
        isSuperuser:
          type: boolean
          readOnly: true
          title: Κατάσταση υπερχρήστη
          description: Υποδηλώνει ότι ο συγκεκριμένος χρήστης έχει όλα τα δικαιώματα
            χωρίς να χρειάζεται να τα παραχωρήσετε ξεχωριστά.
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
      required:
      - createdAt
      - email
      - id
      - isActive
      - isStaff
      - isSuperuser
      - mainImagePath
      - pk
      - updatedAt
      - uuid
    BlankEnum:
      enum:
      - ''
    BlogAuthor:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                bio:
                  type: string
            en:
              type: object
              properties:
                bio:
                  type: string
            de:
              type: object
              properties:
                bio:
                  type: string
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        numberOfPosts:
          type: integer
          readOnly: true
        totalLikesReceived:
          oneOf:
          - type: integer
          - enum:
            - 0
            type: integer
          readOnly: true
      required:
      - createdAt
      - id
      - numberOfPosts
      - totalLikesReceived
      - translations
      - updatedAt
      - user
      - uuid
    BlogAuthorStatsResponse:
      type: object
      properties:
        totalPosts:
          type: integer
        totalLikesReceived:
          type: integer
        memberSince:
          type: string
          format: date
        hasWebsite:
          type: boolean
        fullName:
          type: string
        userActive:
          type: boolean
        postsThisYear:
          type: integer
        averageLikesPerPost:
          type: number
          format: double
      required:
      - averageLikesPerPost
      - fullName
      - hasWebsite
      - memberSince
      - postsThisYear
      - totalLikesReceived
      - totalPosts
      - userActive
    BlogCategory:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        children:
          oneOf:
          - type: object
            additionalProperties: {}
          - type: array
            items: {}
          readOnly: true
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        recursivePostCount:
          type: integer
          readOnly: true
      required:
      - absoluteUrl
      - children
      - createdAt
      - id
      - level
      - mainImagePath
      - recursivePostCount
      - slug
      - sortOrder
      - translations
      - treeId
      - updatedAt
      - uuid
    BlogCategoryReorderItem:
      type: object
      properties:
        id:
          type: integer
        sortOrder:
          type: integer
      required:
      - id
      - sortOrder
    BlogCategoryReorderRequest:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/BlogCategoryReorderItem'
      required:
      - categories
    BlogCategoryReorderResponse:
      type: object
      properties:
        updatedCount:
          type: integer
        message:
          type: string
      required:
      - message
      - updatedCount
    BlogCategoryStatsResponse:
      type: object
      properties:
        directPostCount:
          type: integer
        recursivePostCount:
          type: string
        childrenCount:
          type: integer
        descendantsCount:
          type: integer
        level:
          type: integer
        absoluteUrl:
          type: string
        mainImagePath:
          type: string
        hasImage:
          type: boolean
        isRoot:
          type: boolean
        isLeaf:
          type: boolean
      required:
      - absoluteUrl
      - childrenCount
      - descendantsCount
      - directPostCount
      - hasImage
      - isLeaf
      - isRoot
      - level
      - mainImagePath
      - recursivePostCount
    BlogComment:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
        id:
          type: integer
          readOnly: true
        isApproved:
          type: boolean
        likes:
          type: array
          items:
            type: integer
        user:
          type: integer
        post:
          type: integer
        children:
          type: array
          items: {}
          readOnly: true
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        repliesCount:
          type: integer
          readOnly: true
      required:
      - children
      - createdAt
      - id
      - level
      - likesCount
      - post
      - repliesCount
      - translations
      - treeId
      - updatedAt
      - user
      - uuid
    BlogPost:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        likes:
          type: array
          items:
            type: integer
        category:
          type: integer
        tags:
          type: array
          items:
            type: integer
        author:
          type: integer
        featured:
          type: boolean
        viewCount:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        publishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        isVisible:
          type: boolean
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        commentsCount:
          type: integer
          readOnly: true
        tagsCount:
          type: integer
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
      required:
      - absoluteUrl
      - author
      - category
      - commentsCount
      - createdAt
      - id
      - isVisible
      - likes
      - likesCount
      - mainImagePath
      - publishedAt
      - slug
      - tags
      - tagsCount
      - translations
      - updatedAt
      - uuid
    BlogPostLikedCommentsRequest:
      type: object
      properties:
        commentIds:
          type: array
          items:
            type: integer
      required:
      - commentIds
    BlogPostLikedPostsRequest:
      type: object
      properties:
        postIds:
          type: array
          items:
            type: integer
      required:
      - postIds
    BlogPostMeiliSearchResponse:
      type: object
      properties:
        limit:
          type: integer
        offset:
          type: integer
        estimatedTotalHits:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogPostMeiliSearchResult'
      required:
      - estimatedTotalHits
      - limit
      - offset
      - results
    BlogPostMeiliSearchResult:
      type: object
      properties:
        id:
          type: integer
        languageCode:
          type: string
        title:
          type: string
        subtitle:
          type: string
        body:
          type: string
        master:
          type: integer
        absoluteUrl:
          type: string
        mainImagePath:
          type: string
        matchesPosition: {}
        rankingScore:
          type: number
          format: double
          nullable: true
        formatted: {}
      required:
      - absoluteUrl
      - body
      - formatted
      - id
      - languageCode
      - mainImagePath
      - master
      - matchesPosition
      - rankingScore
      - subtitle
      - title
    BlogTag:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        id:
          type: integer
          readOnly: true
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        getPostsCount:
          type: integer
          readOnly: true
      required:
      - createdAt
      - getPostsCount
      - id
      - sortOrder
      - translations
      - updatedAt
      - uuid
    Cart:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        sessionKey:
          type: string
          readOnly: true
          description: Session key for guest users
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalDiscountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalVatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalItems:
          oneOf:
          - type: integer
          - enum:
            - 0
            type: integer
          readOnly: true
        totalItemsUnique:
          type: integer
          readOnly: true
        cartItems:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        lastActivity:
          type: string
          format: date-time
          readOnly: true
      required:
      - cartItems
      - createdAt
      - id
      - lastActivity
      - sessionKey
      - totalDiscountValue
      - totalItems
      - totalItemsUnique
      - totalPrice
      - totalVatValue
      - updatedAt
      - uuid
    CartItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cart:
          type: integer
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/Product'
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        priceSavePercent:
          type: number
          format: double
          readOnly: true
        discountPercent:
          type: number
          format: double
          readOnly: true
        vatPercent:
          type: number
          format: double
          readOnly: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalDiscountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - cart
      - createdAt
      - discountPercent
      - discountValue
      - finalPrice
      - id
      - price
      - priceSavePercent
      - product
      - totalDiscountValue
      - totalPrice
      - updatedAt
      - uuid
      - vatPercent
      - vatValue
    CartItemCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cart:
          type: integer
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - cart
      - id
      - product
    Contact:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 254
        message:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - email
      - id
      - message
      - name
      - updatedAt
      - uuid
    Country:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha2:
          type: string
          title: Country Code Alpha 2
          pattern: ^[A-Z]{2}$
          maxLength: 2
        alpha3:
          type: string
          title: Country Code Alpha 3
          pattern: ^[A-Z]{3}$
          maxLength: 3
        isoCc:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: ISO Country Code
        phoneCode:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
      required:
      - alpha2
      - alpha3
      - createdAt
      - mainImagePath
      - sortOrder
      - translations
      - updatedAt
      - uuid
    DocumentTypeEnum:
      enum:
      - RECEIPT
      - INVOICE
      - PROFORMA
      - SHIPPING_LABEL
      - RETURN_LABEL
      - CREDIT_NOTE
      type: string
      description: |-
        * `RECEIPT` - Receipt
        * `INVOICE` - Invoice
        * `PROFORMA` - Proforma Invoice
        * `SHIPPING_LABEL` - Shipping Label
        * `RETURN_LABEL` - Return Label
        * `CREDIT_NOTE` - Credit Note
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
        error:
          type: string
      required:
      - detail
    FloorEnum:
      enum:
      - BASEMENT
      - GROUND_FLOOR
      - FIRST_FLOOR
      - SECOND_FLOOR
      - THIRD_FLOOR
      - FOURTH_FLOOR
      - FIFTH_FLOOR
      - SIXTH_FLOOR_PLUS
      type: string
      description: |-
        * `BASEMENT` - Basement
        * `GROUND_FLOOR` - Ground Floor
        * `FIRST_FLOOR` - First Floor
        * `SECOND_FLOOR` - Second Floor
        * `THIRD_FLOOR` - Third Floor
        * `FOURTH_FLOOR` - Fourth Floor
        * `FIFTH_FLOOR` - Fifth Floor
        * `SIXTH_FLOOR_PLUS` - Sixth Floor Plus
    HealthCheckResponse:
      type: object
      properties:
        database:
          type: boolean
        redis:
          type: boolean
        celery:
          type: boolean
      required:
      - celery
      - database
      - redis
    LikedCommentsResponse:
      type: object
      properties:
        likedCommentIds:
          type: array
          items:
            type: integer
      required:
      - likedCommentIds
    LikedPostsResponse:
      type: object
      properties:
        postIds:
          type: array
          items:
            type: integer
      required:
      - postIds
    LocationTypeEnum:
      enum:
      - HOME
      - OFFICE
      - OTHER
      type: string
      description: |-
        * `HOME` - Αρχική
        * `OFFICE` - Office
        * `OTHER` - Other
    MyCommentRequest:
      type: object
      properties:
        post:
          type: integer
      required:
      - post
    Notification:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
        id:
          type: integer
          readOnly: true
        link:
          type: string
          format: uri
          maxLength: 200
        kind:
          $ref: '#/components/schemas/NotificationKindEnum'
        expiryDate:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - translations
      - updatedAt
      - uuid
    NotificationKindEnum:
      enum:
      - ERROR
      - SUCCESS
      - INFO
      - WARNING
      - DANGER
      type: string
      description: |-
        * `ERROR` - Error
        * `SUCCESS` - Success
        * `INFO` - Info
        * `WARNING` - Warning
        * `DANGER` - Danger
    NotificationUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        notification:
          type: integer
        seen:
          type: boolean
        seenAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - notification
      - updatedAt
      - user
      - uuid
    NotificationUserAction:
      type: object
      properties:
        notificationUserIds:
          type: array
          items:
            type: integer
      required:
      - notificationUserIds
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        country:
          allOf:
          - $ref: '#/components/schemas/Country'
          readOnly: true
        region:
          allOf:
          - $ref: '#/components/schemas/Region'
          readOnly: true
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        payWay:
          allOf:
          - $ref: '#/components/schemas/PayWay'
          readOnly: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        statusDisplay:
          type: string
          readOnly: true
        statusUpdatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        zipcode:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        phone:
          type: string
        mobilePhone:
          type: string
        customerNotes:
          type: string
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        totalPriceItems:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceExtra:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        fullAddress:
          type: string
          readOnly: true
        paymentId:
          type: string
          readOnly: true
        paymentStatus:
          allOf:
          - $ref: '#/components/schemas/PaymentStatusEnum'
          readOnly: true
        paymentMethod:
          type: string
          readOnly: true
        canBeCanceled:
          type: boolean
          readOnly: true
        isPaid:
          type: boolean
          readOnly: true
      required:
      - canBeCanceled
      - city
      - country
      - createdAt
      - email
      - firstName
      - fullAddress
      - id
      - isPaid
      - items
      - lastName
      - payWay
      - paymentId
      - paymentMethod
      - paymentStatus
      - phone
      - region
      - shippingPrice
      - statusDisplay
      - statusUpdatedAt
      - street
      - streetNumber
      - totalPriceExtra
      - totalPriceItems
      - updatedAt
      - uuid
      - zipcode
    OrderCreateUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        country:
          type: string
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          title: Region Code
          nullable: true
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        payWay:
          type: integer
          nullable: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        zipcode:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        phone:
          type: string
        mobilePhone:
          type: string
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        customerNotes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreateUpdate'
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        totalPriceItems:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceExtra:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        fullAddress:
          type: string
          readOnly: true
        paymentId:
          type: string
        paymentStatus:
          type: string
        paymentMethod:
          type: string
        trackingNumber:
          type: string
          maxLength: 255
        shippingCarrier:
          type: string
          maxLength: 255
      required:
      - city
      - createdAt
      - email
      - firstName
      - fullAddress
      - id
      - items
      - lastName
      - phone
      - shippingPrice
      - street
      - streetNumber
      - totalPriceExtra
      - totalPriceItems
      - updatedAt
      - uuid
      - zipcode
    OrderDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        country:
          allOf:
          - $ref: '#/components/schemas/Country'
          readOnly: true
        region:
          allOf:
          - $ref: '#/components/schemas/Region'
          readOnly: true
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        payWay:
          allOf:
          - $ref: '#/components/schemas/PayWay'
          readOnly: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        statusDisplay:
          type: string
          readOnly: true
        statusUpdatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        zipcode:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        phone:
          type: string
        mobilePhone:
          type: string
        customerNotes:
          type: string
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        totalPriceItems:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceExtra:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        fullAddress:
          type: string
          readOnly: true
        paymentId:
          type: string
          readOnly: true
        paymentStatus:
          allOf:
          - $ref: '#/components/schemas/PaymentStatusEnum'
          readOnly: true
        paymentMethod:
          type: string
          readOnly: true
        canBeCanceled:
          type: boolean
          readOnly: true
        isPaid:
          type: boolean
          readOnly: true
        trackingInfo:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
        trackingNumber:
          type: string
          readOnly: true
        shippingCarrier:
          type: string
          readOnly: true
        timeSinceOrder:
          type: string
          readOnly: true
        customerFullName:
          type: string
          readOnly: true
        isCompleted:
          type: boolean
          readOnly: true
        isCanceled:
          type: boolean
          readOnly: true
      required:
      - canBeCanceled
      - city
      - country
      - createdAt
      - customerFullName
      - email
      - firstName
      - fullAddress
      - id
      - isCanceled
      - isCompleted
      - isPaid
      - items
      - lastName
      - payWay
      - paymentId
      - paymentMethod
      - paymentStatus
      - phone
      - region
      - shippingCarrier
      - shippingPrice
      - statusDisplay
      - statusUpdatedAt
      - street
      - streetNumber
      - timeSinceOrder
      - totalPriceExtra
      - totalPriceItems
      - trackingInfo
      - trackingNumber
      - updatedAt
      - uuid
      - zipcode
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        originalQuantity:
          type: integer
          readOnly: true
          nullable: true
        isRefunded:
          type: boolean
          readOnly: true
        refundedQuantity:
          type: integer
          readOnly: true
        netQuantity:
          type: integer
          readOnly: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        refundedAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        netPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        notes:
          type: string
      required:
      - createdAt
      - id
      - isRefunded
      - netPrice
      - netQuantity
      - originalQuantity
      - price
      - product
      - refundedAmount
      - refundedQuantity
      - sortOrder
      - totalPrice
      - updatedAt
      - uuid
    OrderItemCreateUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        notes:
          type: string
      required:
      - id
      - product
    OrderStatusEnum:
      enum:
      - PENDING
      - PROCESSING
      - SHIPPED
      - DELIVERED
      - COMPLETED
      - CANCELED
      - RETURNED
      - REFUNDED
      type: string
      description: |-
        * `PENDING` - Pending
        * `PROCESSING` - Processing
        * `SHIPPED` - Shipped
        * `DELIVERED` - Delivered
        * `COMPLETED` - Completed
        * `CANCELED` - Canceled
        * `RETURNED` - Returned
        * `REFUNDED` - Refunded
    PaginatedAuthenticationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Authentication'
    PaginatedBlogAuthorList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogAuthor'
    PaginatedBlogCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogCategory'
    PaginatedBlogCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogComment'
    PaginatedBlogPostList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogPost'
    PaginatedBlogTagList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogTag'
    PaginatedCartItemList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    PaginatedCountryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Country'
    PaginatedOrderItemList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    PaginatedOrderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PaginatedPayWayList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PayWay'
    PaginatedProductCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'
    PaginatedProductFavouriteList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductFavourite'
    PaginatedProductImageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
    PaginatedProductList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaginatedProductReviewList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductReview'
    PaginatedRegionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Region'
    PaginatedSlideList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Slide'
    PaginatedSliderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Slider'
    PaginatedTipList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tip'
    PaginatedUserAddressList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserAddress'
    PaginatedVatList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Vat'
    PatchedAuthentication:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
          title: Id
        email:
          type: string
          format: email
          title: Διεύθυνση ηλεκτρονικού ταχυδρομείου
          maxLength: 254
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        id:
          type: integer
          readOnly: true
        username:
          type: string
          nullable: true
          title: Όνομα χρήστη
          description: Required. 30 characters or fewer.Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 30
        image:
          type: string
          format: uri
          nullable: true
          title: Εικόνα
        phone:
          type: string
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        address:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        country:
          type: string
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          title: Region Code
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
        twitter:
          type: string
          format: uri
          title: Twitter Profile
          maxLength: 200
        linkedin:
          type: string
          format: uri
          title: LinkedIn Profile
          maxLength: 200
        facebook:
          type: string
          format: uri
          title: Facebook Profile
          maxLength: 200
        instagram:
          type: string
          format: uri
          title: Instagram Profile
          maxLength: 200
        website:
          type: string
          format: uri
          maxLength: 200
        youtube:
          type: string
          format: uri
          title: Youtube Profile
          maxLength: 200
        github:
          type: string
          format: uri
          title: Github Profile
          maxLength: 200
        bio:
          type: string
        isActive:
          type: boolean
          readOnly: true
          title: Active
        isStaff:
          type: boolean
          readOnly: true
          title: Staff
        isSuperuser:
          type: boolean
          readOnly: true
          title: Κατάσταση υπερχρήστη
          description: Υποδηλώνει ότι ο συγκεκριμένος χρήστης έχει όλα τα δικαιώματα
            χωρίς να χρειάζεται να τα παραχωρήσετε ξεχωριστά.
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
    PatchedBlogAuthor:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                bio:
                  type: string
            en:
              type: object
              properties:
                bio:
                  type: string
            de:
              type: object
              properties:
                bio:
                  type: string
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        numberOfPosts:
          type: integer
          readOnly: true
        totalLikesReceived:
          oneOf:
          - type: integer
          - enum:
            - 0
            type: integer
          readOnly: true
    PatchedBlogCategory:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        children:
          oneOf:
          - type: object
            additionalProperties: {}
          - type: array
            items: {}
          readOnly: true
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        recursivePostCount:
          type: integer
          readOnly: true
    PatchedBlogComment:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
        id:
          type: integer
          readOnly: true
        isApproved:
          type: boolean
        likes:
          type: array
          items:
            type: integer
        user:
          type: integer
        post:
          type: integer
        children:
          type: array
          items: {}
          readOnly: true
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        repliesCount:
          type: integer
          readOnly: true
    PatchedBlogPost:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        likes:
          type: array
          items:
            type: integer
        category:
          type: integer
        tags:
          type: array
          items:
            type: integer
        author:
          type: integer
        featured:
          type: boolean
        viewCount:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        publishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        isVisible:
          type: boolean
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        commentsCount:
          type: integer
          readOnly: true
        tagsCount:
          type: integer
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
    PatchedBlogTag:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        id:
          type: integer
          readOnly: true
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        getPostsCount:
          type: integer
          readOnly: true
    PatchedCart:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        sessionKey:
          type: string
          readOnly: true
          description: Session key for guest users
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalDiscountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalVatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalItems:
          oneOf:
          - type: integer
          - enum:
            - 0
            type: integer
          readOnly: true
        totalItemsUnique:
          type: integer
          readOnly: true
        cartItems:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        lastActivity:
          type: string
          format: date-time
          readOnly: true
    PatchedCartItemCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cart:
          type: integer
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
    PatchedCountry:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha2:
          type: string
          title: Country Code Alpha 2
          pattern: ^[A-Z]{2}$
          maxLength: 2
        alpha3:
          type: string
          title: Country Code Alpha 3
          pattern: ^[A-Z]{3}$
          maxLength: 3
        isoCc:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: ISO Country Code
        phoneCode:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
    PatchedNotificationUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        notification:
          type: integer
        seen:
          type: boolean
        seenAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PatchedOrderCreateUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          nullable: true
        country:
          type: string
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          title: Region Code
          nullable: true
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        payWay:
          type: integer
          nullable: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        zipcode:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        phone:
          type: string
        mobilePhone:
          type: string
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        customerNotes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreateUpdate'
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        totalPriceItems:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceExtra:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        fullAddress:
          type: string
          readOnly: true
        paymentId:
          type: string
        paymentStatus:
          type: string
        paymentMethod:
          type: string
        trackingNumber:
          type: string
          maxLength: 255
        shippingCarrier:
          type: string
          maxLength: 255
    PatchedPayWay:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
        id:
          type: integer
          readOnly: true
        active:
          type: boolean
        cost:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        freeForOrderAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        icon:
          type: string
          format: uri
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        iconAbsoluteUrl:
          type: string
          readOnly: true
        iconFilename:
          type: string
          readOnly: true
        providerCode:
          type: string
          description: Code used to identify the payment provider in the system (e.g.,
            'stripe', 'paypal')
          maxLength: 50
        isOnlinePayment:
          type: boolean
          description: Whether this payment method is processed online
        requiresConfirmation:
          type: boolean
          description: Whether this payment method requires manual confirmation (e.g.,
            bank transfer)
        configuration:
          nullable: true
          title: Provider Configuration
          description: Provider-specific configuration (API keys, webhooks, etc.)
    PatchedProduct:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vat:
          type: integer
        viewCount:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        active:
          type: boolean
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        priceSavePercent:
          type: number
          format: double
          readOnly: true
        vatPercent:
          type: number
          format: double
          readOnly: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        reviewAverage:
          type: number
          format: double
          readOnly: true
        approvedReviewAverage:
          type: number
          format: double
          readOnly: true
        reviewCount:
          type: integer
          readOnly: true
        approvedReviewCount:
          type: integer
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
    PatchedProductCategory:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        children:
          oneOf:
          - type: object
            additionalProperties: {}
          - type: array
            items: {}
          readOnly: true
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        categoryMenuImageOnePath:
          type: string
          readOnly: true
        categoryMenuImageTwoPath:
          type: string
          readOnly: true
        categoryMenuMainBannerPath:
          type: string
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
        recursiveProductCount:
          type: integer
          readOnly: true
    PatchedProductFavourite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        product:
          type: integer
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PatchedProductImage:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        image:
          type: string
          format: uri
          title: Εικόνα
        isMain:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
    PatchedProductReview:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                comment:
                  type: string
            en:
              type: object
              properties:
                comment:
                  type: string
            de:
              type: object
              properties:
                comment:
                  type: string
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        user:
          type: integer
        rate:
          allOf:
          - $ref: '#/components/schemas/RateEnum'
          minimum: 0
          maximum: 32767
        status:
          $ref: '#/components/schemas/ProductReviewStatusEnum'
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        publishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        isVisible:
          type: boolean
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PatchedRegion:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha:
          type: string
          title: Region Code
          maxLength: 10
        country:
          type: string
          title: Country Code Alpha 2
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PatchedSlide:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
        id:
          type: integer
          readOnly: true
        slider:
          type: integer
        discount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        showButton:
          type: boolean
        dateStart:
          type: string
          format: date-time
        dateEnd:
          type: string
          format: date-time
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
    PatchedSlider:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
        video:
          type: string
          format: uri
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
    PatchedTip:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
        kind:
          $ref: '#/components/schemas/TipKindEnum'
        icon:
          type: string
          format: uri
          nullable: true
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PatchedUserAddressUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
        mobilePhone:
          type: string
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
          readOnly: true
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PatchedVat:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        value:
          type: number
          format: double
          maximum: 100.0
          minimum: 0.0
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PayWay:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
        id:
          type: integer
          readOnly: true
        active:
          type: boolean
        cost:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        freeForOrderAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        icon:
          type: string
          format: uri
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        iconAbsoluteUrl:
          type: string
          readOnly: true
        iconFilename:
          type: string
          readOnly: true
        providerCode:
          type: string
          description: Code used to identify the payment provider in the system (e.g.,
            'stripe', 'paypal')
          maxLength: 50
        isOnlinePayment:
          type: boolean
          description: Whether this payment method is processed online
        requiresConfirmation:
          type: boolean
          description: Whether this payment method requires manual confirmation (e.g.,
            bank transfer)
        configuration:
          nullable: true
          title: Provider Configuration
          description: Provider-specific configuration (API keys, webhooks, etc.)
      required:
      - cost
      - createdAt
      - freeForOrderAmount
      - iconAbsoluteUrl
      - iconFilename
      - id
      - sortOrder
      - translations
      - updatedAt
      - uuid
    PaymentStatusEnum:
      enum:
      - PENDING
      - PROCESSING
      - COMPLETED
      - FAILED
      - REFUNDED
      - PARTIALLY_REFUNDED
      - CANCELED
      type: string
      description: |-
        * `PENDING` - Pending
        * `PROCESSING` - Processing
        * `COMPLETED` - Completed
        * `FAILED` - Failed
        * `REFUNDED` - Refunded
        * `PARTIALLY_REFUNDED` - Partially Refunded
        * `CANCELED` - Canceled
    PaymentStatusResponse:
      type: object
      properties:
        orderId:
          type: integer
        paymentStatus:
          type: string
        isPaid:
          type: boolean
        statusDetails:
          type: object
          additionalProperties: {}
      required:
      - isPaid
      - orderId
      - paymentStatus
      - statusDetails
    ProcessPaymentRequest:
      type: object
      properties:
        payWayId:
          type: integer
          description: ID of the payment method to use
        paymentData:
          type: object
          additionalProperties: {}
          description: Additional payment data required by the payment provider
      required:
      - payWayId
    ProcessPaymentResponse:
      type: object
      properties:
        detail:
          type: string
        orderId:
          type: integer
        paymentStatus:
          type: string
        paymentId:
          type: string
        requiresConfirmation:
          type: boolean
        isOnlinePayment:
          type: boolean
        providerData:
          type: object
          additionalProperties: {}
      required:
      - detail
      - isOnlinePayment
      - orderId
      - paymentId
      - paymentStatus
      - providerData
      - requiresConfirmation
    Product:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vat:
          type: integer
        viewCount:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        active:
          type: boolean
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        priceSavePercent:
          type: number
          format: double
          readOnly: true
        vatPercent:
          type: number
          format: double
          readOnly: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        reviewAverage:
          type: number
          format: double
          readOnly: true
        approvedReviewAverage:
          type: number
          format: double
          readOnly: true
        reviewCount:
          type: integer
          readOnly: true
        approvedReviewCount:
          type: integer
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
      required:
      - absoluteUrl
      - approvedReviewAverage
      - approvedReviewCount
      - category
      - createdAt
      - discountValue
      - finalPrice
      - id
      - likesCount
      - mainImagePath
      - price
      - priceSavePercent
      - reviewAverage
      - reviewCount
      - slug
      - translations
      - updatedAt
      - uuid
      - vat
      - vatPercent
      - vatValue
    ProductCategory:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        children:
          oneOf:
          - type: object
            additionalProperties: {}
          - type: array
            items: {}
          readOnly: true
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        categoryMenuImageOnePath:
          type: string
          readOnly: true
        categoryMenuImageTwoPath:
          type: string
          readOnly: true
        categoryMenuMainBannerPath:
          type: string
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
        recursiveProductCount:
          type: integer
          readOnly: true
      required:
      - absoluteUrl
      - categoryMenuImageOnePath
      - categoryMenuImageTwoPath
      - categoryMenuMainBannerPath
      - children
      - createdAt
      - id
      - level
      - recursiveProductCount
      - slug
      - translations
      - treeId
      - updatedAt
      - uuid
    ProductFavourite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        product:
          type: integer
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - product
      - updatedAt
      - user
      - uuid
    ProductImage:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        image:
          type: string
          format: uri
          title: Εικόνα
        isMain:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
      required:
      - createdAt
      - id
      - image
      - mainImagePath
      - product
      - sortOrder
      - translations
      - updatedAt
      - uuid
    ProductMeiliSearchResponse:
      type: object
      properties:
        limit:
          type: integer
        offset:
          type: integer
        estimatedTotalHits:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductMeiliSearchResult'
      required:
      - estimatedTotalHits
      - limit
      - offset
      - results
    ProductMeiliSearchResult:
      type: object
      properties:
        id:
          type: integer
        languageCode:
          type: string
        name:
          type: string
        description:
          type: string
        master:
          type: integer
        absoluteUrl:
          type: string
        mainImagePath:
          type: string
        matchesPosition: {}
        rankingScore:
          type: number
          format: double
          nullable: true
        formatted: {}
      required:
      - absoluteUrl
      - description
      - formatted
      - id
      - languageCode
      - mainImagePath
      - master
      - matchesPosition
      - name
      - rankingScore
    ProductReview:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                comment:
                  type: string
            en:
              type: object
              properties:
                comment:
                  type: string
            de:
              type: object
              properties:
                comment:
                  type: string
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        user:
          type: integer
        rate:
          allOf:
          - $ref: '#/components/schemas/RateEnum'
          minimum: 0
          maximum: 32767
        status:
          $ref: '#/components/schemas/ProductReviewStatusEnum'
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        publishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        isVisible:
          type: boolean
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - isVisible
      - product
      - publishedAt
      - rate
      - translations
      - updatedAt
      - user
      - uuid
    ProductReviewStatusEnum:
      enum:
      - NEW
      - 'TRUE'
      - 'FALSE'
      type: string
      description: |-
        * `NEW` - New
        * `TRUE` - True
        * `FALSE` - False
    RateEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      type: integer
      description: |-
        * `1` - One
        * `2` - Two
        * `3` - Three
        * `4` - Four
        * `5` - Five
        * `6` - Six
        * `7` - Seven
        * `8` - Eight
        * `9` - Nine
        * `10` - Ten
    RefundRequest:
      type: object
      properties:
        amount:
          type: number
          format: double
          maximum: 100000000
          minimum: -100000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          description: Refund amount (optional, defaults to full refund)
        currency:
          type: string
          description: Currency code (required if amount is specified)
          maxLength: 3
    RefundResponse:
      type: object
      properties:
        detail:
          type: string
        orderId:
          type: integer
        paymentStatus:
          type: string
        refundId:
          type: string
        refundDetails:
          type: object
          additionalProperties: {}
      required:
      - detail
      - orderId
      - paymentStatus
      - refundDetails
      - refundId
    Region:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha:
          type: string
          title: Region Code
          maxLength: 10
        country:
          type: string
          title: Country Code Alpha 2
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - alpha
      - country
      - createdAt
      - sortOrder
      - translations
      - updatedAt
      - uuid
    Slide:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
        id:
          type: integer
          readOnly: true
        slider:
          type: integer
        discount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        showButton:
          type: boolean
        dateStart:
          type: string
          format: date-time
        dateEnd:
          type: string
          format: date-time
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
      required:
      - createdAt
      - dateEnd
      - dateStart
      - id
      - mainImagePath
      - slider
      - sortOrder
      - translations
      - updatedAt
      - uuid
    Slider:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
        video:
          type: string
          format: uri
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
      required:
      - createdAt
      - id
      - mainImagePath
      - translations
      - updatedAt
      - uuid
    Tag:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                label:
                  type: string
            en:
              type: object
              properties:
                label:
                  type: string
            de:
              type: object
              properties:
                label:
                  type: string
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - sortOrder
      - translations
      - updatedAt
      - uuid
    Tip:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
        kind:
          $ref: '#/components/schemas/TipKindEnum'
        icon:
          type: string
          format: uri
          nullable: true
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - kind
      - sortOrder
      - translations
      - updatedAt
      - uuid
    TipKindEnum:
      enum:
      - SUCCESS
      - INFO
      - ERROR
      - WARNING
      type: string
      description: |-
        * `SUCCESS` - Success
        * `INFO` - Info
        * `ERROR` - Error
        * `WARNING` - Warning
    UserAddress:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
        mobilePhone:
          type: string
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - city
      - country
      - createdAt
      - firstName
      - id
      - lastName
      - phone
      - region
      - street
      - streetNumber
      - title
      - updatedAt
      - user
      - uuid
      - zipcode
    UserAddressCreate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
        mobilePhone:
          type: string
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
      required:
      - city
      - country
      - firstName
      - lastName
      - phone
      - region
      - street
      - streetNumber
      - title
      - user
      - zipcode
    UserAddressUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
        mobilePhone:
          type: string
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
          readOnly: true
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - city
      - country
      - createdAt
      - firstName
      - id
      - lastName
      - phone
      - region
      - street
      - streetNumber
      - title
      - updatedAt
      - user
      - uuid
      - zipcode
    UsernameUpdate:
      type: object
      properties:
        username:
          type: string
          maxLength: 30
      required:
      - username
    Vat:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        value:
          type: number
          format: double
          maximum: 100.0
          minimum: 0.0
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - updatedAt
      - uuid
