openapi: 3.0.3
info:
  title: Grooveshop API
  version: 1.0.0
  description: Grooveshop API description
paths:
  /api/v1/blog/author:
    get:
      operationId: api_v1_blog_author_list
      description: Retrieve a list of all blog authors with their basic information.
        Supports advanced filtering including activity levels, post counts, and more.
      summary: List blog authors
      parameters:
      - in: query
        name: bio
        schema:
          type: string
        description: Filter by bio content (partial match)
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter authors who have/don't have likes on their posts
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter authors who have/don't have posts
      - in: query
        name: hasWebsite
        schema:
          type: boolean
        description: Filter authors who have/don't have a website
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: maxPosts
        schema:
          type: number
        description: Filter authors with at most X posts
      - in: query
        name: minPosts
        schema:
          type: number
        description: Filter authors with at least X posts
      - in: query
        name: minTotalLikes
        schema:
          type: number
        description: Filter authors with at least X total likes across all posts
      - in: query
        name: mostActive
        schema:
          type: boolean
        description: Get most active authors (top 10 by post count)
      - in: query
        name: mostLiked
        schema:
          type: boolean
        description: Get most liked authors (top 10 by total likes)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      - in: query
        name: website
        schema:
          type: string
        description: Filter by website URL (partial match)
      tags:
      - Blog Authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogAuthorListList'
          description: ''
    post:
      operationId: api_v1_blog_author_create
      description: Create a new blog author profile. Requires authentication.
      summary: Create a blog author
      tags:
      - Blog Authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author{format}:
    get:
      operationId: api_v1_blog_author_formatted_list
      description: Retrieve a list of all blog authors with their basic information.
        Supports advanced filtering including activity levels, post counts, and more.
      summary: List blog authors
      parameters:
      - in: query
        name: bio
        schema:
          type: string
        description: Filter by bio content (partial match)
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter authors who have/don't have likes on their posts
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter authors who have/don't have posts
      - in: query
        name: hasWebsite
        schema:
          type: boolean
        description: Filter authors who have/don't have a website
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: maxPosts
        schema:
          type: number
        description: Filter authors with at most X posts
      - in: query
        name: minPosts
        schema:
          type: number
        description: Filter authors with at least X posts
      - in: query
        name: minTotalLikes
        schema:
          type: number
        description: Filter authors with at least X total likes across all posts
      - in: query
        name: mostActive
        schema:
          type: boolean
        description: Get most active authors (top 10 by post count)
      - in: query
        name: mostLiked
        schema:
          type: boolean
        description: Get most liked authors (top 10 by total likes)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      - in: query
        name: website
        schema:
          type: string
        description: Filter by website URL (partial match)
      tags:
      - Blog Authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogAuthorListList'
          description: ''
    post:
      operationId: api_v1_blog_author_formatted_create
      description: Create a new blog author profile. Requires authentication.
      summary: Create a blog author
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Blog Authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}:
    get:
      operationId: api_v1_blog_author_retrieve
      description: Get detailed information about a specific blog author.
      summary: Retrieve a blog author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_author_update
      description: Update blog author information. Requires authentication.
      summary: Update a blog author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_author_partial_update
      description: Partially update blog author information. Requires authentication.
      summary: Partially update a blog author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthorWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthorWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthorWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_author_destroy
      description: Delete a blog author profile. Requires authentication.
      summary: Delete a blog author
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}{format}:
    get:
      operationId: api_v1_blog_author_formatted_retrieve
      description: Get detailed information about a specific blog author.
      summary: Retrieve a blog author
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_author_formatted_update
      description: Update blog author information. Requires authentication.
      summary: Update a blog author
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogAuthorWrite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_author_formatted_partial_update
      description: Partially update blog author information. Requires authentication.
      summary: Partially update a blog author
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthorWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthorWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogAuthorWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_author_formatted_destroy
      description: Delete a blog author profile. Requires authentication.
      summary: Delete a blog author
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}/posts:
    get:
      operationId: api_v1_blog_author_posts_list
      description: Retrieve all blog posts written by this author with proper pagination.
      summary: Get author's blog posts
      parameters:
      - in: query
        name: bio
        schema:
          type: string
        description: Filter by bio content (partial match)
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter authors who have/don't have likes on their posts
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter authors who have/don't have posts
      - in: query
        name: hasWebsite
        schema:
          type: boolean
        description: Filter authors who have/don't have a website
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: maxPosts
        schema:
          type: number
        description: Filter authors with at most X posts
      - in: query
        name: minPosts
        schema:
          type: number
        description: Filter authors with at least X posts
      - in: query
        name: minTotalLikes
        schema:
          type: number
        description: Filter authors with at least X total likes across all posts
      - in: query
        name: mostActive
        schema:
          type: boolean
        description: Get most active authors (top 10 by post count)
      - in: query
        name: mostLiked
        schema:
          type: boolean
        description: Get most liked authors (top 10 by total likes)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      - in: query
        name: website
        schema:
          type: string
        description: Filter by website URL (partial match)
      tags:
      - Blog Authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}/posts{format}:
    get:
      operationId: api_v1_blog_author_posts_formatted_list
      description: Retrieve all blog posts written by this author with proper pagination.
      summary: Get author's blog posts
      parameters:
      - in: query
        name: bio
        schema:
          type: string
        description: Filter by bio content (partial match)
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter authors who have/don't have likes on their posts
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter authors who have/don't have posts
      - in: query
        name: hasWebsite
        schema:
          type: boolean
        description: Filter authors who have/don't have a website
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: maxPosts
        schema:
          type: number
        description: Filter authors with at most X posts
      - in: query
        name: minPosts
        schema:
          type: number
        description: Filter authors with at least X posts
      - in: query
        name: minTotalLikes
        schema:
          type: number
        description: Filter authors with at least X total likes across all posts
      - in: query
        name: mostActive
        schema:
          type: boolean
        description: Get most active authors (top 10 by post count)
      - in: query
        name: mostLiked
        schema:
          type: boolean
        description: Get most liked authors (top 10 by total likes)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: userEmail
        schema:
          type: string
        description: Filter by user email (partial match)
      - in: query
        name: website
        schema:
          type: string
        description: Filter by website URL (partial match)
      tags:
      - Blog Authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}/stats:
    get:
      operationId: api_v1_blog_author_stats_retrieve
      description: Get comprehensive statistics about the author's blog posts and
        activity.
      summary: Get author statistics
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorStatsResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/author/{id}/stats{format}:
    get:
      operationId: api_v1_blog_author_stats_formatted_retrieve
      description: Get comprehensive statistics about the author's blog posts and
        activity.
      summary: Get author statistics
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Authors
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogAuthorStatsResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category:
    get:
      operationId: api_v1_blog_category_list
      description: Retrieve a list of blog categories with hierarchical support. Supports
        filtering by parent, level, and translation fields. Use 'tree=true' parameter
        to get nested tree structure.
      summary: List blog categories
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
    post:
      operationId: api_v1_blog_category_create
      description: Create a new blog category. Supports hierarchical structure.
      summary: Create a blog category
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category{format}:
    get:
      operationId: api_v1_blog_category_formatted_list
      description: Retrieve a list of blog categories with hierarchical support. Supports
        filtering by parent, level, and translation fields. Use 'tree=true' parameter
        to get nested tree structure.
      summary: List blog categories
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
    post:
      operationId: api_v1_blog_category_formatted_create
      description: Create a new blog category. Supports hierarchical structure.
      summary: Create a blog category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}:
    get:
      operationId: api_v1_blog_category_retrieve
      description: Get detailed information about a specific blog category including
        ancestors, descendants, and post counts.
      summary: Retrieve a blog category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_category_update
      description: Update blog category information.
      summary: Update a blog category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_category_partial_update
      description: Partially update blog category information.
      summary: Partially update a blog category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategoryWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategoryWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategoryWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_category_destroy
      description: 'Delete a blog category. Note: This will also affect all child
        categories and associated blog posts based on cascade settings.'
      summary: Delete a blog category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}{format}:
    get:
      operationId: api_v1_blog_category_formatted_retrieve
      description: Get detailed information about a specific blog category including
        ancestors, descendants, and post counts.
      summary: Retrieve a blog category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_category_formatted_update
      description: Update blog category information.
      summary: Update a blog category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryWrite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_category_formatted_partial_update
      description: Partially update blog category information.
      summary: Partially update a blog category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategoryWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategoryWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogCategoryWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_category_formatted_destroy
      description: 'Delete a blog category. Note: This will also affect all child
        categories and associated blog posts based on cascade settings.'
      summary: Delete a blog category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/ancestors:
    get:
      operationId: api_v1_blog_category_ancestors_list
      description: Get all ancestors (parent, grandparent, etc.) of this category.
      summary: Get category ancestors
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/ancestors{format}:
    get:
      operationId: api_v1_blog_category_ancestors_formatted_list
      description: Get all ancestors (parent, grandparent, etc.) of this category.
      summary: Get category ancestors
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/children:
    get:
      operationId: api_v1_blog_category_children_list
      description: Get direct children of this category.
      summary: Get category children
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/children{format}:
    get:
      operationId: api_v1_blog_category_children_formatted_list
      description: Get direct children of this category.
      summary: Get category children
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/descendants:
    get:
      operationId: api_v1_blog_category_descendants_list
      description: Get all descendants (children, grandchildren, etc.) of this category.
      summary: Get category descendants
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/descendants{format}:
    get:
      operationId: api_v1_blog_category_descendants_formatted_list
      description: Get all descendants (children, grandchildren, etc.) of this category.
      summary: Get category descendants
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/posts:
    get:
      operationId: api_v1_blog_category_posts_list
      description: Retrieve all blog posts in this category and its subcategories.
        Use 'recursive=true' to include posts from all descendant categories.
      summary: Get category's blog posts
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - in: query
        name: recursive
        schema:
          type: boolean
          default: false
        description: Include posts from all descendant categories
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/posts{format}:
    get:
      operationId: api_v1_blog_category_posts_formatted_list
      description: Retrieve all blog posts in this category and its subcategories.
        Use 'recursive=true' to include posts from all descendant categories.
      summary: Get category's blog posts
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - in: query
        name: recursive
        schema:
          type: boolean
          default: false
        description: Include posts from all descendant categories
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/siblings:
    get:
      operationId: api_v1_blog_category_siblings_list
      description: Get sibling categories (same parent level).
      summary: Get category siblings
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/siblings{format}:
    get:
      operationId: api_v1_blog_category_siblings_formatted_list
      description: Get sibling categories (same parent level).
      summary: Get category siblings
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/stats:
    get:
      operationId: api_v1_blog_category_stats_retrieve
      description: Get comprehensive statistics about this category.
      summary: Get category statistics
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryStatsResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/{id}/stats{format}:
    get:
      operationId: api_v1_blog_category_stats_formatted_retrieve
      description: Get comprehensive statistics about this category.
      summary: Get category statistics
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryStatsResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/reorder:
    post:
      operationId: api_v1_blog_category_reorder_create
      description: Batch reorder categories by updating their sort_order values.
      summary: Reorder categories
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryReorderResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/reorder{format}:
    post:
      operationId: api_v1_blog_category_reorder_formatted_create
      description: Batch reorder categories by updating their sort_order values.
      summary: Reorder categories
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Blog Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCategoryReorderRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCategoryReorderResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/category/tree:
    get:
      operationId: api_v1_blog_category_tree_list
      description: Get the complete category tree structure with nested relationships.
        This is more efficient than using list?tree=true for displaying navigation
        menus or category hierarchies.
      summary: Get complete category tree
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
  /api/v1/blog/category/tree{format}:
    get:
      operationId: api_v1_blog_category_tree_formatted_list
      description: Get the complete category tree structure with nested relationships.
        This is more efficient than using list?tree=true for displaying navigation
        menus or category hierarchies.
      summary: Get complete category tree
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Filter by description content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasPosts
        schema:
          type: boolean
        description: Filter categories that have posts (true) or no posts (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by tree level (0 for root categories)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter categories at or below this level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter categories at or above this level
      - in: query
        name: minPostCount
        schema:
          type: number
        description: Filter categories with at least this many posts
      - in: query
        name: name
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent category ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter root categories (true) or non-root (false)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: slug_Icontains
        schema:
          type: string
      - in: query
        name: sortOrder
        schema:
          type: integer
      - in: query
        name: sortOrder_Gte
        schema:
          type: integer
      - in: query
        name: sortOrder_Lte
        schema:
          type: integer
      tags:
      - Blog Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCategoryList'
          description: ''
  /api/v1/blog/comment:
    get:
      operationId: api_v1_blog_comment_list
      description: 'Retrieve a list of blog comments with hierarchical support. Supports
        filtering by post, user, approval status, and content. '
      summary: List blog comments
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentListList'
          description: ''
    post:
      operationId: api_v1_blog_comment_create
      description: Create a new blog comment. Requires authentication. Comments are
        subject to approval before being visible.
      summary: Create a blog comment
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment{format}:
    get:
      operationId: api_v1_blog_comment_formatted_list
      description: 'Retrieve a list of blog comments with hierarchical support. Supports
        filtering by post, user, approval status, and content. '
      summary: List blog comments
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentListList'
          description: ''
    post:
      operationId: api_v1_blog_comment_formatted_create
      description: Create a new blog comment. Requires authentication. Comments are
        subject to approval before being visible.
      summary: Create a blog comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}:
    get:
      operationId: api_v1_blog_comment_retrieve
      description: Get detailed information about a specific blog comment including
        replies.
      summary: Retrieve a blog comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_comment_update
      description: Update your own blog comment. Requires authentication.
      summary: Update a blog comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_comment_partial_update
      description: Partially update your own blog comment. Requires authentication.
      summary: Partially update a blog comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogCommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogCommentWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogCommentWrite'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_comment_destroy
      description: Delete your own blog comment. Requires authentication.
      summary: Delete a blog comment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}{format}:
    get:
      operationId: api_v1_blog_comment_formatted_retrieve
      description: Get detailed information about a specific blog comment including
        replies.
      summary: Retrieve a blog comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_comment_formatted_update
      description: Update your own blog comment. Requires authentication.
      summary: Update a blog comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentWrite'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_comment_formatted_partial_update
      description: Partially update your own blog comment. Requires authentication.
      summary: Partially update a blog comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogCommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogCommentWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogCommentWrite'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_comment_formatted_destroy
      description: Delete your own blog comment. Requires authentication.
      summary: Delete a blog comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/post:
    get:
      operationId: api_v1_blog_comment_post_retrieve
      description: Get the blog post that this comment belongs to.
      summary: Get comment's blog post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/post{format}:
    get:
      operationId: api_v1_blog_comment_post_formatted_retrieve
      description: Get the blog post that this comment belongs to.
      summary: Get comment's blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/replies:
    get:
      operationId: api_v1_blog_comment_replies_list
      description: Get all replies (children) of this comment in threaded structure.
      summary: Get comment replies
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/replies{format}:
    get:
      operationId: api_v1_blog_comment_replies_formatted_list
      description: Get all replies (children) of this comment in threaded structure.
      summary: Get comment replies
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentListList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/thread:
    get:
      operationId: api_v1_blog_comment_thread_list
      description: Get the complete thread (all ancestors and descendants) of this
        comment.
      summary: Get comment thread
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentListList'
          description: ''
  /api/v1/blog/comment/{id}/thread{format}:
    get:
      operationId: api_v1_blog_comment_thread_formatted_list
      description: Get the complete thread (all ancestors and descendants) of this
        comment.
      summary: Get comment thread
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentListList'
          description: ''
  /api/v1/blog/comment/{id}/update_likes:
    post:
      operationId: api_v1_blog_comment_update_likes_create
      description: Like or unlike a comment. Toggles the like status.
      summary: Toggle comment like
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentDetail'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentDetail'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/{id}/update_likes{format}:
    post:
      operationId: api_v1_blog_comment_update_likes_formatted_create
      description: Like or unlike a comment. Toggles the like status.
      summary: Toggle comment like
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentDetail'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentDetail'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/liked_comments:
    post:
      operationId: api_v1_blog_comment_liked_comments_create
      description: Check which comments from a list are liked by the current user.
      summary: Check bulk like status
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentLikedCommentsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentLikedCommentsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentLikedCommentsRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentLikedCommentsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/liked_comments{format}:
    post:
      operationId: api_v1_blog_comment_liked_comments_formatted_create
      description: Check which comments from a list are liked by the current user.
      summary: Check bulk like status
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentLikedCommentsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentLikedCommentsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentLikedCommentsRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentLikedCommentsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/my_comment:
    post:
      operationId: api_v1_blog_comment_my_comment_create
      description: Get the comment made by the currently authenticated user for a
        specific post.
      summary: Get current user's comment
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentMyCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentMyCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentMyCommentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/my_comment{format}:
    post:
      operationId: api_v1_blog_comment_my_comment_formatted_create
      description: Get the comment made by the currently authenticated user for a
        specific post.
      summary: Get current user's comment
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Blog Comments
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogCommentMyCommentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogCommentMyCommentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCommentMyCommentRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogCommentDetail'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/my_comments:
    get:
      operationId: api_v1_blog_comment_my_comments_list
      description: Get all comments made by the currently authenticated user.
      summary: Get current user's comments
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentListList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/comment/my_comments{format}:
    get:
      operationId: api_v1_blog_comment_my_comments_formatted_list
      description: Get all comments made by the currently authenticated user.
      summary: Get current user's comments
      parameters:
      - in: query
        name: content
        schema:
          type: string
        description: Filter by comment content (case-insensitive)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasContent
        schema:
          type: boolean
        description: Filter comments that have content (true) or are empty (false)
      - in: query
        name: hasLikes
        schema:
          type: boolean
        description: Filter comments that have likes (true) or no likes (false)
      - in: query
        name: hasReplies
        schema:
          type: boolean
        description: Filter comments that have replies (true) or no replies (false)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: id_In
        schema:
          type: array
          items:
            type: integer
        description: Οι πολλαπλές τιμές πρέπει να διαχωρίζονται με κόμμα.
        explode: false
        style: form
      - in: query
        name: isApproved
        schema:
          type: boolean
        description: Filter by approval status
      - in: query
        name: level
        schema:
          type: integer
        description: Filter by comment nesting level (0 for top-level)
      - in: query
        name: level_Gte
        schema:
          type: integer
        description: Filter comments at or below this nesting level
      - in: query
        name: level_Lte
        schema:
          type: integer
        description: Filter comments at or above this nesting level
      - in: query
        name: lft_Gte
        schema:
          type: integer
      - in: query
        name: lft_Lte
        schema:
          type: integer
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter comments with at least this many likes
      - in: query
        name: minReplies
        schema:
          type: number
        description: Filter comments with at least this many replies
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: integer
        description: Filter by parent comment ID
      - in: query
        name: parent_Isnull
        schema:
          type: boolean
        description: Filter top-level comments (true) or replies (false)
      - in: query
        name: post
        schema:
          type: integer
        description: Filter by blog post ID
      - in: query
        name: post_Category
        schema:
          type: integer
        description: Filter by blog post category ID
      - in: query
        name: post_Category_Slug
        schema:
          type: string
        description: Filter by blog post category slug
      - in: query
        name: post_Slug
        schema:
          type: string
        description: Filter by blog post slug
      - in: query
        name: rght_Gte
        schema:
          type: integer
      - in: query
        name: rght_Lte
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: treeId
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
        description: Filter by user ID
      - in: query
        name: user_IsActive
        schema:
          type: boolean
        description: Filter comments by active users
      - in: query
        name: user_IsStaff
        schema:
          type: boolean
        description: Filter comments by staff users
      tags:
      - Blog Comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentListList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post:
    get:
      operationId: api_v1_blog_post_list
      description: Retrieve a list of blog posts with rich filtering and search capabilities.
        Supports filtering by category, tags, author, engagement metrics, and content.
        Includes MeiliSearch integration for advanced full-text search.
      summary: List blog posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: content
        schema:
          type: string
        description: Filter by content (case-insensitive)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter posts created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter posts created before this date
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: hasImage
        schema:
          type: boolean
        description: Filter posts that have a main image
      - in: query
        name: highEngagement
        schema:
          type: boolean
        description: Filter posts with high engagement (top 20%)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: maxComments
        schema:
          type: number
        description: Filter by maximum number of comments
      - in: query
        name: maxLikes
        schema:
          type: number
        description: Filter by maximum number of likes
      - in: query
        name: maxViewCount
        schema:
          type: integer
        description: Filter by maximum number of views
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: publishedAfter
        schema:
          type: string
          format: date-time
        description: Filter posts published after this date
      - in: query
        name: publishedBefore
        schema:
          type: string
          format: date-time
        description: Filter posts published before this date
      - in: query
        name: recentDays
        schema:
          type: number
        description: Filter posts created within the last N days
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      - in: query
        name: trendingDays
        schema:
          type: number
        description: Filter trending posts within the last N days
      - in: query
        name: viralPosts
        schema:
          type: boolean
        description: Filter viral posts (above average engagement)
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
    post:
      operationId: api_v1_blog_post_create
      description: Create a new blog post. Requires authentication.
      summary: Create a blog post
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post{format}:
    get:
      operationId: api_v1_blog_post_formatted_list
      description: Retrieve a list of blog posts with rich filtering and search capabilities.
        Supports filtering by category, tags, author, engagement metrics, and content.
        Includes MeiliSearch integration for advanced full-text search.
      summary: List blog posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: content
        schema:
          type: string
        description: Filter by content (case-insensitive)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter posts created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter posts created before this date
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasImage
        schema:
          type: boolean
        description: Filter posts that have a main image
      - in: query
        name: highEngagement
        schema:
          type: boolean
        description: Filter posts with high engagement (top 20%)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: maxComments
        schema:
          type: number
        description: Filter by maximum number of comments
      - in: query
        name: maxLikes
        schema:
          type: number
        description: Filter by maximum number of likes
      - in: query
        name: maxViewCount
        schema:
          type: integer
        description: Filter by maximum number of views
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: publishedAfter
        schema:
          type: string
          format: date-time
        description: Filter posts published after this date
      - in: query
        name: publishedBefore
        schema:
          type: string
          format: date-time
        description: Filter posts published before this date
      - in: query
        name: recentDays
        schema:
          type: number
        description: Filter posts created within the last N days
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      - in: query
        name: trendingDays
        schema:
          type: number
        description: Filter trending posts within the last N days
      - in: query
        name: viralPosts
        schema:
          type: boolean
        description: Filter viral posts (above average engagement)
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
    post:
      operationId: api_v1_blog_post_formatted_create
      description: Create a new blog post. Requires authentication.
      summary: Create a blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}:
    get:
      operationId: api_v1_blog_post_retrieve
      description: Get detailed information about a specific blog post including all
        relationships, engagement metrics, and SEO data.
      summary: Retrieve a blog post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_post_update
      description: Update blog post information. Requires authentication.
      summary: Update a blog post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_post_partial_update
      description: Partially update blog post information. Requires authentication.
      summary: Partially update a blog post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogPostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogPostWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogPostWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_post_destroy
      description: Delete a blog post. Requires authentication.
      summary: Delete a blog post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}{format}:
    get:
      operationId: api_v1_blog_post_formatted_retrieve
      description: Get detailed information about a specific blog post including all
        relationships, engagement metrics, and SEO data.
      summary: Retrieve a blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_post_formatted_update
      description: Update blog post information. Requires authentication.
      summary: Update a blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostWrite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_post_formatted_partial_update
      description: Partially update blog post information. Requires authentication.
      summary: Partially update a blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogPostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogPostWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogPostWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_post_formatted_destroy
      description: Delete a blog post. Requires authentication.
      summary: Delete a blog post
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/comments:
    get:
      operationId: api_v1_blog_post_comments_list
      description: Get all comments for a blog post.
      summary: Get post comments
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: content
        schema:
          type: string
        description: Filter by content (case-insensitive)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter posts created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter posts created before this date
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: hasImage
        schema:
          type: boolean
        description: Filter posts that have a main image
      - in: query
        name: highEngagement
        schema:
          type: boolean
        description: Filter posts with high engagement (top 20%)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: maxComments
        schema:
          type: number
        description: Filter by maximum number of comments
      - in: query
        name: maxLikes
        schema:
          type: number
        description: Filter by maximum number of likes
      - in: query
        name: maxViewCount
        schema:
          type: integer
        description: Filter by maximum number of views
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: publishedAfter
        schema:
          type: string
          format: date-time
        description: Filter posts published after this date
      - in: query
        name: publishedBefore
        schema:
          type: string
          format: date-time
        description: Filter posts published before this date
      - in: query
        name: recentDays
        schema:
          type: number
        description: Filter posts created within the last N days
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      - in: query
        name: trendingDays
        schema:
          type: number
        description: Filter trending posts within the last N days
      - in: query
        name: viralPosts
        schema:
          type: boolean
        description: Filter viral posts (above average engagement)
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/comments{format}:
    get:
      operationId: api_v1_blog_post_comments_formatted_list
      description: Get all comments for a blog post.
      summary: Get post comments
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: content
        schema:
          type: string
        description: Filter by content (case-insensitive)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter posts created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter posts created before this date
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasImage
        schema:
          type: boolean
        description: Filter posts that have a main image
      - in: query
        name: highEngagement
        schema:
          type: boolean
        description: Filter posts with high engagement (top 20%)
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: maxComments
        schema:
          type: number
        description: Filter by maximum number of comments
      - in: query
        name: maxLikes
        schema:
          type: number
        description: Filter by maximum number of likes
      - in: query
        name: maxViewCount
        schema:
          type: integer
        description: Filter by maximum number of views
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: publishedAfter
        schema:
          type: string
          format: date-time
        description: Filter posts published after this date
      - in: query
        name: publishedBefore
        schema:
          type: string
          format: date-time
        description: Filter posts published before this date
      - in: query
        name: recentDays
        schema:
          type: number
        description: Filter posts created within the last N days
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      - in: query
        name: trendingDays
        schema:
          type: number
        description: Filter trending posts within the last N days
      - in: query
        name: viralPosts
        schema:
          type: boolean
        description: Filter viral posts (above average engagement)
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/related_posts:
    get:
      operationId: api_v1_blog_post_related_posts_retrieve
      description: Get related posts for a blog post.
      summary: Get related posts
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/related_posts{format}:
    get:
      operationId: api_v1_blog_post_related_posts_formatted_retrieve
      description: Get related posts for a blog post.
      summary: Get related posts
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/update_likes:
    post:
      operationId: api_v1_blog_post_update_likes_create
      description: Like or unlike a blog post. Toggles the like status.
      summary: Toggle post like
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/update_likes{format}:
    post:
      operationId: api_v1_blog_post_update_likes_formatted_create
      description: Like or unlike a blog post. Toggles the like status.
      summary: Toggle post like
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/update_view_count:
    post:
      operationId: api_v1_blog_post_update_view_count_create
      description: Increment the view count for a blog post.
      summary: Increment post view count
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/{id}/update_view_count{format}:
    post:
      operationId: api_v1_blog_post_update_view_count_formatted_create
      description: Increment the view count for a blog post.
      summary: Increment post view count
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPost'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/featured:
    get:
      operationId: api_v1_blog_post_featured_list
      description: Get posts marked as featured, ordered by publication date.
      summary: Get featured posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: content
        schema:
          type: string
        description: Filter by content (case-insensitive)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter posts created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter posts created before this date
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: hasImage
        schema:
          type: boolean
        description: Filter posts that have a main image
      - in: query
        name: highEngagement
        schema:
          type: boolean
        description: Filter posts with high engagement (top 20%)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: maxComments
        schema:
          type: number
        description: Filter by maximum number of comments
      - in: query
        name: maxLikes
        schema:
          type: number
        description: Filter by maximum number of likes
      - in: query
        name: maxViewCount
        schema:
          type: integer
        description: Filter by maximum number of views
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: publishedAfter
        schema:
          type: string
          format: date-time
        description: Filter posts published after this date
      - in: query
        name: publishedBefore
        schema:
          type: string
          format: date-time
        description: Filter posts published before this date
      - in: query
        name: recentDays
        schema:
          type: number
        description: Filter posts created within the last N days
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      - in: query
        name: trendingDays
        schema:
          type: number
        description: Filter trending posts within the last N days
      - in: query
        name: viralPosts
        schema:
          type: boolean
        description: Filter viral posts (above average engagement)
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/featured{format}:
    get:
      operationId: api_v1_blog_post_featured_formatted_list
      description: Get posts marked as featured, ordered by publication date.
      summary: Get featured posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: content
        schema:
          type: string
        description: Filter by content (case-insensitive)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter posts created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter posts created before this date
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasImage
        schema:
          type: boolean
        description: Filter posts that have a main image
      - in: query
        name: highEngagement
        schema:
          type: boolean
        description: Filter posts with high engagement (top 20%)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: maxComments
        schema:
          type: number
        description: Filter by maximum number of comments
      - in: query
        name: maxLikes
        schema:
          type: number
        description: Filter by maximum number of likes
      - in: query
        name: maxViewCount
        schema:
          type: integer
        description: Filter by maximum number of views
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: publishedAfter
        schema:
          type: string
          format: date-time
        description: Filter posts published after this date
      - in: query
        name: publishedBefore
        schema:
          type: string
          format: date-time
        description: Filter posts published before this date
      - in: query
        name: recentDays
        schema:
          type: number
        description: Filter posts created within the last N days
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      - in: query
        name: trendingDays
        schema:
          type: number
        description: Filter trending posts within the last N days
      - in: query
        name: viralPosts
        schema:
          type: boolean
        description: Filter viral posts (above average engagement)
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/liked_posts:
    post:
      operationId: api_v1_blog_post_liked_posts_create
      description: Get all posts that the authenticated user has liked.
      summary: Get liked posts
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostLikedPostsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/liked_posts{format}:
    post:
      operationId: api_v1_blog_post_liked_posts_formatted_create
      description: Get all posts that the authenticated user has liked.
      summary: Get liked posts
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Blog Posts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostLikedPostsRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostLikedPostsResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/post/popular:
    get:
      operationId: api_v1_blog_post_popular_list
      description: Get most popular blog posts based on all-time engagement metrics.
      summary: Get popular posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: content
        schema:
          type: string
        description: Filter by content (case-insensitive)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter posts created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter posts created before this date
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: hasImage
        schema:
          type: boolean
        description: Filter posts that have a main image
      - in: query
        name: highEngagement
        schema:
          type: boolean
        description: Filter posts with high engagement (top 20%)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: maxComments
        schema:
          type: number
        description: Filter by maximum number of comments
      - in: query
        name: maxLikes
        schema:
          type: number
        description: Filter by maximum number of likes
      - in: query
        name: maxViewCount
        schema:
          type: integer
        description: Filter by maximum number of views
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: publishedAfter
        schema:
          type: string
          format: date-time
        description: Filter posts published after this date
      - in: query
        name: publishedBefore
        schema:
          type: string
          format: date-time
        description: Filter posts published before this date
      - in: query
        name: recentDays
        schema:
          type: number
        description: Filter posts created within the last N days
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      - in: query
        name: trendingDays
        schema:
          type: number
        description: Filter trending posts within the last N days
      - in: query
        name: viralPosts
        schema:
          type: boolean
        description: Filter viral posts (above average engagement)
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/popular{format}:
    get:
      operationId: api_v1_blog_post_popular_formatted_list
      description: Get most popular blog posts based on all-time engagement metrics.
      summary: Get popular posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: content
        schema:
          type: string
        description: Filter by content (case-insensitive)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter posts created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter posts created before this date
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasImage
        schema:
          type: boolean
        description: Filter posts that have a main image
      - in: query
        name: highEngagement
        schema:
          type: boolean
        description: Filter posts with high engagement (top 20%)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: maxComments
        schema:
          type: number
        description: Filter by maximum number of comments
      - in: query
        name: maxLikes
        schema:
          type: number
        description: Filter by maximum number of likes
      - in: query
        name: maxViewCount
        schema:
          type: integer
        description: Filter by maximum number of views
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: publishedAfter
        schema:
          type: string
          format: date-time
        description: Filter posts published after this date
      - in: query
        name: publishedBefore
        schema:
          type: string
          format: date-time
        description: Filter posts published before this date
      - in: query
        name: recentDays
        schema:
          type: number
        description: Filter posts created within the last N days
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      - in: query
        name: trendingDays
        schema:
          type: number
        description: Filter trending posts within the last N days
      - in: query
        name: viralPosts
        schema:
          type: boolean
        description: Filter viral posts (above average engagement)
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/trending:
    get:
      operationId: api_v1_blog_post_trending_list
      description: Get trending blog posts based on recent engagement metrics. Combines
        views, likes, and comments from recent time period.
      summary: Get trending posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: content
        schema:
          type: string
        description: Filter by content (case-insensitive)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter posts created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter posts created before this date
      - in: query
        name: days
        schema:
          type: integer
          default: 7
        description: Number of days to look back for trending calculation
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: query
        name: hasImage
        schema:
          type: boolean
        description: Filter posts that have a main image
      - in: query
        name: highEngagement
        schema:
          type: boolean
        description: Filter posts with high engagement (top 20%)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: maxComments
        schema:
          type: number
        description: Filter by maximum number of comments
      - in: query
        name: maxLikes
        schema:
          type: number
        description: Filter by maximum number of likes
      - in: query
        name: maxViewCount
        schema:
          type: integer
        description: Filter by maximum number of views
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: publishedAfter
        schema:
          type: string
          format: date-time
        description: Filter posts published after this date
      - in: query
        name: publishedBefore
        schema:
          type: string
          format: date-time
        description: Filter posts published before this date
      - in: query
        name: recentDays
        schema:
          type: number
        description: Filter posts created within the last N days
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      - in: query
        name: trendingDays
        schema:
          type: number
        description: Filter trending posts within the last N days
      - in: query
        name: viralPosts
        schema:
          type: boolean
        description: Filter viral posts (above average engagement)
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/post/trending{format}:
    get:
      operationId: api_v1_blog_post_trending_formatted_list
      description: Get trending blog posts based on recent engagement metrics. Combines
        views, likes, and comments from recent time period.
      summary: Get trending posts
      parameters:
      - in: query
        name: author
        schema:
          type: integer
      - in: query
        name: authorEmail
        schema:
          type: string
        description: Filter by author email (case-insensitive)
      - in: query
        name: authorName
        schema:
          type: string
        description: Filter by author full name (case-insensitive)
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: categoryName
        schema:
          type: string
        description: Filter by category name (case-insensitive)
      - in: query
        name: content
        schema:
          type: string
        description: Filter by content (case-insensitive)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date-time
        description: Filter posts created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date-time
        description: Filter posts created before this date
      - in: query
        name: days
        schema:
          type: integer
          default: 7
        description: Number of days to look back for trending calculation
      - in: query
        name: featured
        schema:
          type: boolean
        description: Filter by featured status
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: hasImage
        schema:
          type: boolean
        description: Filter posts that have a main image
      - in: query
        name: highEngagement
        schema:
          type: boolean
        description: Filter posts with high engagement (top 20%)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isPublished
        schema:
          type: boolean
        description: Filter by published status
      - in: query
        name: maxComments
        schema:
          type: number
        description: Filter by maximum number of comments
      - in: query
        name: maxLikes
        schema:
          type: number
        description: Filter by maximum number of likes
      - in: query
        name: maxViewCount
        schema:
          type: integer
        description: Filter by maximum number of views
      - in: query
        name: minComments
        schema:
          type: number
        description: Filter by minimum number of comments
      - in: query
        name: minLikes
        schema:
          type: number
        description: Filter by minimum number of likes
      - in: query
        name: minTags
        schema:
          type: number
        description: Filter by minimum number of tags
      - in: query
        name: minViewCount
        schema:
          type: integer
        description: Filter by minimum number of views
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: publishedAfter
        schema:
          type: string
          format: date-time
        description: Filter posts published after this date
      - in: query
        name: publishedBefore
        schema:
          type: string
          format: date-time
        description: Filter posts published before this date
      - in: query
        name: recentDays
        schema:
          type: number
        description: Filter posts created within the last N days
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slug
        schema:
          type: string
      - in: query
        name: tagName
        schema:
          type: string
        description: Filter by tag label (case-insensitive)
      - in: query
        name: tags
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: title
        schema:
          type: string
        description: Filter by title (case-insensitive)
      - in: query
        name: trendingDays
        schema:
          type: number
        description: Filter trending posts within the last N days
      - in: query
        name: viralPosts
        schema:
          type: boolean
        description: Filter viral posts (above average engagement)
      tags:
      - Blog Posts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
  /api/v1/blog/tag:
    get:
      operationId: api_v1_blog_tag_list
      description: Retrieve a list of blog tags with filtering and search capabilities.
        Includes usage statistics and trending information.
      summary: List blog tags
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Blog Tags
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogTagListList'
          description: ''
    post:
      operationId: api_v1_blog_tag_create
      description: Create a new blog tag. Requires authentication.
      summary: Create a blog tag
      tags:
      - Blog Tags
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/tag{format}:
    get:
      operationId: api_v1_blog_tag_formatted_list
      description: Retrieve a list of blog tags with filtering and search capabilities.
        Includes usage statistics and trending information.
      summary: List blog tags
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Blog Tags
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogTagListList'
          description: ''
    post:
      operationId: api_v1_blog_tag_formatted_create
      description: Create a new blog tag. Requires authentication.
      summary: Create a blog tag
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Blog Tags
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/tag/{id}:
    get:
      operationId: api_v1_blog_tag_retrieve
      description: Get detailed information about a specific blog tag including related
        posts, usage statistics, and performance metrics.
      summary: Retrieve a blog tag
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_tag_update
      description: Update blog tag information. Requires authentication.
      summary: Update a blog tag
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_tag_partial_update
      description: Partially update blog tag information. Requires authentication.
      summary: Partially update a blog tag
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogTagWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogTagWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogTagWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_tag_destroy
      description: Delete a blog tag. Requires authentication.
      summary: Delete a blog tag
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/blog/tag/{id}{format}:
    get:
      operationId: api_v1_blog_tag_formatted_retrieve
      description: Get detailed information about a specific blog tag including related
        posts, usage statistics, and performance metrics.
      summary: Retrieve a blog tag
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_blog_tag_formatted_update
      description: Update blog tag information. Requires authentication.
      summary: Update a blog tag
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/BlogTagWrite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_blog_tag_formatted_partial_update
      description: Partially update blog tag information. Requires authentication.
      summary: Partially update a blog tag
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBlogTagWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBlogTagWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBlogTagWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogTagDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_blog_tag_formatted_destroy
      description: Delete a blog tag. Requires authentication.
      summary: Delete a blog tag
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Blog Tags
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart:
    get:
      operationId: api_v1_cart_retrieve
      description: Get a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Get cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - Cart
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_cart_update
      description: Update a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Update cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - Cart
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/CartWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_cart_partial_update
      description: Update a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Update cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - Cart
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_cart_destroy
      description: Delete a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Delete cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - Cart
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart{format}:
    get:
      operationId: api_v1_cart_formatted_retrieve
      description: Get a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Get cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Cart
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_cart_formatted_update
      description: Update a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Update cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Cart
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/CartWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_cart_formatted_partial_update
      description: Update a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Update cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Cart
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_cart_formatted_destroy
      description: Delete a cart. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Delete cart
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Cart
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart/item:
    get:
      operationId: api_v1_cart_item_list
      description: Get all cart items. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Get cart items
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: query
        name: cart
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Cart Items
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
    post:
      operationId: api_v1_cart_item_create
      description: Create a new cart item. For guest users, include X-Cart-Id and
        X-Session-Key headers to maintain cart session.
      summary: Create cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      tags:
      - Cart Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart/item{format}:
    get:
      operationId: api_v1_cart_item_formatted_list
      description: Get all cart items. For guest users, include X-Cart-Id and X-Session-Key
        headers to maintain cart session.
      summary: Get cart items
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: query
        name: cart
        schema:
          type: integer
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Cart Items
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCartItemList'
          description: ''
    post:
      operationId: api_v1_cart_item_formatted_create
      description: Create a new cart item. For guest users, include X-Cart-Id and
        X-Session-Key headers to maintain cart session.
      summary: Create cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Cart Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart/item/{id}:
    get:
      operationId: api_v1_cart_item_retrieve
      description: Get a specific cart item. For guest users, include X-Cart-Id and
        X-Session-Key headers to maintain cart session.
      summary: Get cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_cart_item_update
      description: Update a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Update cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_cart_item_partial_update
      description: Partial update a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Partial update cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_cart_item_destroy
      description: Delete a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Delete cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/cart/item/{id}{format}:
    get:
      operationId: api_v1_cart_item_formatted_retrieve
      description: Get a specific cart item. For guest users, include X-Cart-Id and
        X-Session-Key headers to maintain cart session.
      summary: Get cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_cart_item_formatted_update
      description: Update a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Update cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_cart_item_formatted_partial_update
      description: Partial update a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Partial update cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCartItemCreate'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_cart_item_formatted_destroy
      description: Delete a specific cart item. For guest users, include X-Cart-Id
        and X-Session-Key headers to maintain cart session.
      summary: Delete cart item
      parameters:
      - in: header
        name: X-Cart-Id
        schema:
          type: integer
        description: Cart ID for guest users. Used to identify and maintain guest
          cart sessions.
      - in: header
        name: X-Session-Key
        schema:
          type: string
        description: Session key for guest users. Used to validate cart ownership
          for anonymous sessions.
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Cart Items
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/contact:
    post:
      operationId: api_v1_contact_create
      description: Send a contact message to the site administrators.
      summary: Create a contact message
      tags:
      - Contact
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Contact'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Contact'
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/country:
    get:
      operationId: api_v1_country_list
      description: Retrieve a list of countries with filtering and search capabilities.
      summary: List countries
      parameters:
      - in: query
        name: alpha2
        schema:
          type: string
      - in: query
        name: alpha3
        schema:
          type: string
      - in: query
        name: isoCc
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phoneCode
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: translations_Name
        schema:
          type: string
      tags:
      - Countries
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCountryList'
          description: ''
    post:
      operationId: api_v1_country_create
      description: Create a new country record. Requires authentication.
      summary: Create a country
      tags:
      - Countries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/country{format}:
    get:
      operationId: api_v1_country_formatted_list
      description: Retrieve a list of countries with filtering and search capabilities.
      summary: List countries
      parameters:
      - in: query
        name: alpha2
        schema:
          type: string
      - in: query
        name: alpha3
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: isoCc
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phoneCode
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: translations_Name
        schema:
          type: string
      tags:
      - Countries
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCountryList'
          description: ''
    post:
      operationId: api_v1_country_formatted_create
      description: Create a new country record. Requires authentication.
      summary: Create a country
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Countries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/country/{alpha_2}:
    get:
      operationId: api_v1_country_retrieve
      description: Get detailed information about a specific country.
      summary: Retrieve a country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - Countries
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_country_update
      description: Update country information. Requires authentication.
      summary: Update a country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - Countries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_country_partial_update
      description: Partially update country information. Requires authentication.
      summary: Partially update a country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - Countries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_country_destroy
      description: Delete a country record. Requires authentication.
      summary: Delete a country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      tags:
      - Countries
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/country/{alpha_2}{format}:
    get:
      operationId: api_v1_country_formatted_retrieve
      description: Get detailed information about a specific country.
      summary: Retrieve a country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Countries
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_country_formatted_update
      description: Update country information. Requires authentication.
      summary: Update a country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Countries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Country'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Country'
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_country_formatted_partial_update
      description: Partially update country information. Requires authentication.
      summary: Partially update a country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Countries
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCountry'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_country_formatted_destroy
      description: Delete a country record. Requires authentication.
      summary: Delete a country
      parameters:
      - in: path
        name: alpha2
        schema:
          type: string
          title: Country Code Alpha 2
        description: A unique value identifying this Country.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Countries
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/health:
    get:
      operationId: api_v1_health_retrieve
      description: Check the health status of database, Redis, and Celery
      summary: Check the health status of database, Redis, and Celery
      tags:
      - Health
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
          description: ''
  /api/v1/notification/ids:
    post:
      operationId: api_v1_notification_ids_create
      description: Returns the notifications for a list of ids.
      summary: Returns the notifications for a list of ids.
      tags:
      - Notifications
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
  /api/v1/notification/ids{format}:
    post:
      operationId: api_v1_notification_ids_formatted_create
      description: Returns the notifications for a list of ids.
      summary: Returns the notifications for a list of ids.
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Notifications
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
          description: ''
  /api/v1/notification/user/{id}:
    get:
      operationId: api_v1_notification_user_retrieve
      description: Get detailed information about a specific notification user.
      summary: Retrieve a notification user
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notifications
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_notification_user_update
      description: Update notification user information. Requires authentication.
      summary: Update a notification user
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_notification_user_partial_update
      description: Partially update notification user information. Requires authentication.
      summary: Partially update a notification user
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_notification_user_destroy
      description: Delete a notification user record. Requires authentication.
      summary: Delete a notification user
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notifications
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/{id}{format}:
    get:
      operationId: api_v1_notification_user_formatted_retrieve
      description: Get detailed information about a specific notification user.
      summary: Retrieve a notification user
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notifications
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_notification_user_formatted_update
      description: Update notification user information. Requires authentication.
      summary: Update a notification user
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_notification_user_formatted_partial_update
      description: Partially update notification user information. Requires authentication.
      summary: Partially update a notification user
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotificationUser'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUser'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_notification_user_formatted_destroy
      description: Delete a notification user record. Requires authentication.
      summary: Delete a notification user
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Notifications
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/mark_all_as_seen:
    post:
      operationId: api_v1_notification_user_mark_all_as_seen_create
      description: Mark all of the authenticated user's notifications as seen.
      summary: Mark all notifications as seen
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/mark_all_as_seen{format}:
    post:
      operationId: api_v1_notification_user_mark_all_as_seen_formatted_create
      description: Mark all of the authenticated user's notifications as seen.
      summary: Mark all notifications as seen
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/mark_all_as_unseen:
    post:
      operationId: api_v1_notification_user_mark_all_as_unseen_create
      description: Mark all of the authenticated user's notifications as unseen.
      summary: Mark all notifications as unseen
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/mark_all_as_unseen{format}:
    post:
      operationId: api_v1_notification_user_mark_all_as_unseen_formatted_create
      description: Mark all of the authenticated user's notifications as unseen.
      summary: Mark all notifications as unseen
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUser'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/mark_as_seen:
    post:
      operationId: api_v1_notification_user_mark_as_seen_create
      description: Mark specific notifications as seen for the authenticated user.
      summary: Mark specific notifications as seen
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/mark_as_seen{format}:
    post:
      operationId: api_v1_notification_user_mark_as_seen_formatted_create
      description: Mark specific notifications as seen for the authenticated user.
      summary: Mark specific notifications as seen
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/mark_as_unseen:
    post:
      operationId: api_v1_notification_user_mark_as_unseen_create
      description: Mark specific notifications as unseen for the authenticated user.
      summary: Mark specific notifications as unseen
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/mark_as_unseen{format}:
    post:
      operationId: api_v1_notification_user_mark_as_unseen_formatted_create
      description: Mark specific notifications as unseen for the authenticated user.
      summary: Mark specific notifications as unseen
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Notifications
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationUserAction'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/unseen_count:
    get:
      operationId: api_v1_notification_user_unseen_count_retrieve
      description: Get the count of unseen notifications for the authenticated user.
      summary: Get unseen notifications count
      tags:
      - Notifications
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationCountResponse'
          description: ''
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationInfoResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/notification/user/unseen_count{format}:
    get:
      operationId: api_v1_notification_user_unseen_count_formatted_retrieve
      description: Get the count of unseen notifications for the authenticated user.
      summary: Get unseen notifications count
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Notifications
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationCountResponse'
          description: ''
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationInfoResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order:
    get:
      operationId: api_v1_order_list
      description: Returns a list of all orders with pagination. Includes computed
        fields like order value categories, delivery urgency, and payment information.
      summary: List all orders
      parameters:
      - in: query
        name: country
        schema:
          type: string
          title: Country Code Alpha 2
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: payWay
        schema:
          type: integer
      - in: query
        name: paymentStatus
        schema:
          type: string
          enum:
          - CANCELED
          - COMPLETED
          - FAILED
          - PARTIALLY_REFUNDED
          - PENDING
          - PROCESSING
          - REFUNDED
        description: |-
          * `PENDING` - Pending
          * `PROCESSING` - Processing
          * `COMPLETED` - Completed
          * `FAILED` - Failed
          * `REFUNDED` - Refunded
          * `PARTIALLY_REFUNDED` - Partially Refunded
          * `CANCELED` - Canceled
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - CANCELED
          - COMPLETED
          - DELIVERED
          - PENDING
          - PROCESSING
          - REFUNDED
          - RETURNED
          - SHIPPED
        description: |-
          * `PENDING` - Pending
          * `PROCESSING` - Processing
          * `SHIPPED` - Shipped
          * `DELIVERED` - Delivered
          * `COMPLETED` - Completed
          * `CANCELED` - Canceled
          * `RETURNED` - Returned
          * `REFUNDED` - Refunded
      - in: query
        name: userId
        schema:
          type: integer
          nullable: true
      tags:
      - Order
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderListList'
          description: ''
    post:
      operationId: api_v1_order_create
      description: Process a checkout and create a new order with comprehensive validation
        including stock availability and address completeness.
      summary: Create an order or process a checkout
      tags:
      - Order
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderWrite'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/v1/order-items:
    get:
      operationId: api_v1_order_items_list
      description: List all order items associated with the authenticated user's orders.
      summary: List order items
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - Order Items
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderItemList'
          description: ''
  /api/v1/order-items/{id}:
    get:
      operationId: api_v1_order_items_retrieve
      description: Retrieve a specific order item by ID.
      summary: Retrieve an order item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order Items
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
          description: ''
  /api/v1/order-items/{id}/refund:
    post:
      operationId: api_v1_order_items_refund_create
      description: Process a refund for an order item.
      summary: Process a refund for an order item
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order Items
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderItem'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItem'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
          description: ''
  /api/v1/order/{id}:
    get:
      operationId: api_v1_order_retrieve
      description: Get detailed information about a specific order including pricing
        breakdown, order timeline, tracking details, and related customer orders.
      summary: Retrieve an order by ID
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
    put:
      operationId: api_v1_order_update
      description: Update an existing order with validation.
      summary: Update an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderWrite'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
    patch:
      operationId: api_v1_order_partial_update
      description: Partially update an existing order with validation.
      summary: Partially update an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrderWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrderWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrderWrite'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
    delete:
      operationId: api_v1_order_destroy
      description: Delete an existing order and restore product stock
      summary: Delete an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order
      responses:
        '204':
          description: No response body
  /api/v1/order/{id}/add_tracking:
    post:
      operationId: api_v1_order_add_tracking_create
      description: Add tracking information to an existing order
      summary: Add tracking information to an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetail'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/v1/order/{id}/cancel:
    post:
      operationId: api_v1_order_cancel_create
      description: Cancel an existing order and restore product stock
      summary: Cancel an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetail'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/v1/order/{id}/payment_status:
    get:
      operationId: api_v1_order_payment_status_retrieve
      description: Retrieves the current payment status for the specified order.
      summary: Check payment status
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Payment
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentStatusResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}/process_payment:
    post:
      operationId: api_v1_order_process_payment_create
      description: Initiates payment processing for the specified order using the
        provided payment method.
      summary: Process payment for an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Payment
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProcessPaymentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProcessPaymentRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessPaymentRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessPaymentResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}/refund:
    post:
      operationId: api_v1_order_refund_create
      description: Initiates a refund for the specified order. Requires admin permissions.
      summary: Refund payment
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Payment
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefundRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/order/{id}/update_status:
    post:
      operationId: api_v1_order_update_status_create
      description: Update the status of an existing order
      summary: Update the status of an order
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Order
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDetail'
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetail'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/v1/order/my_orders:
    get:
      operationId: api_v1_order_my_orders_list
      description: Returns a list of the authenticated user's orders
      summary: List current user's orders
      parameters:
      - in: query
        name: country
        schema:
          type: string
          title: Country Code Alpha 2
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: payWay
        schema:
          type: integer
      - in: query
        name: paymentStatus
        schema:
          type: string
          enum:
          - CANCELED
          - COMPLETED
          - FAILED
          - PARTIALLY_REFUNDED
          - PENDING
          - PROCESSING
          - REFUNDED
        description: |-
          * `PENDING` - Pending
          * `PROCESSING` - Processing
          * `COMPLETED` - Completed
          * `FAILED` - Failed
          * `REFUNDED` - Refunded
          * `PARTIALLY_REFUNDED` - Partially Refunded
          * `CANCELED` - Canceled
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - CANCELED
          - COMPLETED
          - DELIVERED
          - PENDING
          - PROCESSING
          - REFUNDED
          - RETURNED
          - SHIPPED
        description: |-
          * `PENDING` - Pending
          * `PROCESSING` - Processing
          * `SHIPPED` - Shipped
          * `DELIVERED` - Delivered
          * `COMPLETED` - Completed
          * `CANCELED` - Canceled
          * `RETURNED` - Returned
          * `REFUNDED` - Refunded
      - in: query
        name: userId
        schema:
          type: integer
          nullable: true
      tags:
      - Order
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderListList'
          description: ''
  /api/v1/order/uuid/{uuid}:
    get:
      operationId: api_v1_order_uuid_retrieve
      description: Get detailed information about a specific order using its UUID
      summary: Retrieve an order by UUID
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - Order
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetail'
          description: ''
  /api/v1/pay_way:
    get:
      operationId: api_v1_pay_way_list
      description: Retrieve a list of payment methods with filtering and search capabilities.
      summary: List payment methods
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: cost
        schema:
          type: number
      - in: query
        name: freeForOrderAmount
        schema:
          type: number
      - in: query
        name: isOnlinePayment
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: providerCode
        schema:
          type: string
      - in: query
        name: requiresConfirmation
        schema:
          type: boolean
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Payment
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPayWayList'
          description: ''
    post:
      operationId: api_v1_pay_way_create
      description: Create a new payment method. Requires authentication.
      summary: Create a payment method
      tags:
      - Payment
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayWay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayWay'
          application/json:
            schema:
              $ref: '#/components/schemas/PayWay'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/pay_way/{id}:
    get:
      operationId: api_v1_pay_way_retrieve
      description: Get detailed information about a specific payment method.
      summary: Retrieve a payment method
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Payment
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_pay_way_update
      description: Update payment method information. Requires authentication.
      summary: Update a payment method
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Payment
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PayWay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PayWay'
          application/json:
            schema:
              $ref: '#/components/schemas/PayWay'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_pay_way_partial_update
      description: Partially update payment method information. Requires authentication.
      summary: Partially update a payment method
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Payment
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPayWay'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPayWay'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPayWay'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayWay'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_pay_way_destroy
      description: Delete a payment method. Requires authentication.
      summary: Delete a payment method
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Payment
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product:
    get:
      operationId: api_v1_product_list
      description: Retrieve a list of products with rich filtering and search capabilities.
        Includes computed fields like popularity scores, price categories, and stock
        status.
      summary: List products
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minApprovedReviewAverage
        schema:
          type: number
        description: Minimum Approved Review Average
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductListList'
          description: ''
    post:
      operationId: api_v1_product_create
      description: Create a new product with all required information. Requires authentication.
      summary: Create a product
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWrite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product{format}:
    get:
      operationId: api_v1_product_formatted_list
      description: Retrieve a list of products with rich filtering and search capabilities.
        Includes computed fields like popularity scores, price categories, and stock
        status.
      summary: List products
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minApprovedReviewAverage
        schema:
          type: number
        description: Minimum Approved Review Average
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductListList'
          description: ''
    post:
      operationId: api_v1_product_formatted_create
      description: Create a new product with all required information. Requires authentication.
      summary: Create a product
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWrite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}:
    get:
      operationId: api_v1_product_retrieve
      description: Get detailed information about a specific product including pricing
        breakdown, related products, recent reviews, and engagement metrics.
      summary: Retrieve a product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_product_update
      description: Update product information. Requires authentication.
      summary: Update a product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWrite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_product_partial_update
      description: Partially update product information. Requires authentication.
      summary: Partially update a product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_product_destroy
      description: Delete a product. Requires authentication.
      summary: Delete a product
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}{format}:
    get:
      operationId: api_v1_product_formatted_retrieve
      description: Get detailed information about a specific product including pricing
        breakdown, related products, recent reviews, and engagement metrics.
      summary: Retrieve a product
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_product_formatted_update
      description: Update product information. Requires authentication.
      summary: Update a product
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductWrite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_product_formatted_partial_update
      description: Partially update product information. Requires authentication.
      summary: Partially update a product
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductWrite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductWrite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_product_formatted_destroy
      description: Delete a product. Requires authentication.
      summary: Delete a product
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}/images:
    get:
      operationId: api_v1_product_images_list
      description: Get all images for a product.
      summary: Get product images
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minApprovedReviewAverage
        schema:
          type: number
        description: Minimum Approved Review Average
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductImageList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}/images{format}:
    get:
      operationId: api_v1_product_images_formatted_list
      description: Get all images for a product.
      summary: Get product images
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minApprovedReviewAverage
        schema:
          type: number
        description: Minimum Approved Review Average
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductImageList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}/reviews:
    get:
      operationId: api_v1_product_reviews_list
      description: Get all reviews for a product.
      summary: Get product reviews
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minApprovedReviewAverage
        schema:
          type: number
        description: Minimum Approved Review Average
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}/reviews{format}:
    get:
      operationId: api_v1_product_reviews_formatted_list
      description: Get all reviews for a product.
      summary: Get product reviews
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minApprovedReviewAverage
        schema:
          type: number
        description: Minimum Approved Review Average
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}/tags:
    get:
      operationId: api_v1_product_tags_list
      description: Get all tags associated with a product.
      summary: Get product tags
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minApprovedReviewAverage
        schema:
          type: number
        description: Minimum Approved Review Average
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTagList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}/tags{format}:
    get:
      operationId: api_v1_product_tags_formatted_list
      description: Get all tags associated with a product.
      summary: Get product tags
      parameters:
      - in: query
        name: category
        schema:
          type: string
        description: Category
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: maxDiscount
        schema:
          type: number
        description: Maximum Discount Value
      - in: query
        name: maxFinalPrice
        schema:
          type: number
        description: Maximum Final Price
      - in: query
        name: minApprovedReviewAverage
        schema:
          type: number
        description: Minimum Approved Review Average
      - in: query
        name: minDiscount
        schema:
          type: number
        description: Minimum Discount Value
      - in: query
        name: minFinalPrice
        schema:
          type: number
        description: Minimum Final Price
      - in: query
        name: minLikes
        schema:
          type: number
        description: Minimum Likes Count
      - in: query
        name: minReviewAverage
        schema:
          type: number
        description: Minimum Review Average
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Products
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTagList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}/update_view_count:
    post:
      operationId: api_v1_product_update_view_count_create
      description: Increment the view count for a product.
      summary: Increment product view count
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductDetail'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetail'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/{id}/update_view_count{format}:
    post:
      operationId: api_v1_product_update_view_count_formatted_create
      description: Increment the view count for a product.
      summary: Increment product view count
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductDetail'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetail'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/category:
    get:
      operationId: api_v1_product_category_list
      description: Retrieve a list of product categories with filtering and search
        capabilities.
      summary: List product categories
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Product Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductCategoryList'
          description: ''
    post:
      operationId: api_v1_product_category_create
      description: Create a new product category. Requires authentication.
      summary: Create a product category
      tags:
      - Product Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/category{format}:
    get:
      operationId: api_v1_product_category_formatted_list
      description: Retrieve a list of product categories with filtering and search
        capabilities.
      summary: List product categories
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Product Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductCategoryList'
          description: ''
    post:
      operationId: api_v1_product_category_formatted_create
      description: Create a new product category. Requires authentication.
      summary: Create a product category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Product Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/category/{id}:
    get:
      operationId: api_v1_product_category_retrieve
      description: Get detailed information about a specific product category, including
        its hierarchy and related data.
      summary: Retrieve a product category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_product_category_update
      description: Update product category information. Requires authentication.
      summary: Update a product category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_product_category_partial_update
      description: Partially update product category information. Requires authentication.
      summary: Partially update a product category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_product_category_destroy
      description: Delete a product category. Requires authentication.
      summary: Delete a product category
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/category/{id}{format}:
    get:
      operationId: api_v1_product_category_formatted_retrieve
      description: Get detailed information about a specific product category, including
        its hierarchy and related data.
      summary: Retrieve a product category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_product_category_formatted_update
      description: Update product category information. Requires authentication.
      summary: Update a product category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_product_category_formatted_partial_update
      description: Partially update product category information. Requires authentication.
      summary: Partially update a product category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductCategory'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_product_category_formatted_destroy
      description: Delete a product category. Requires authentication.
      summary: Delete a product category
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Categories
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/favourite:
    get:
      operationId: api_v1_product_favourite_list
      description: Retrieve a list of product favourites with filtering and search
        capabilities.
      summary: List product favourites
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - Product Favourites
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
    post:
      operationId: api_v1_product_favourite_create
      description: Add a product to user's favourites. Requires authentication.
      summary: Create a product favourite
      tags:
      - Product Favourites
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/favourite{format}:
    get:
      operationId: api_v1_product_favourite_formatted_list
      description: Retrieve a list of product favourites with filtering and search
        capabilities.
      summary: List product favourites
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - Product Favourites
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
    post:
      operationId: api_v1_product_favourite_formatted_create
      description: Add a product to user's favourites. Requires authentication.
      summary: Create a product favourite
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Product Favourites
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/favourite/{id}:
    get:
      operationId: api_v1_product_favourite_retrieve
      description: Get detailed information about a specific product favourite.
      summary: Retrieve a product favourite
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourites
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_product_favourite_update
      description: Update product favourite information. Requires authentication.
      summary: Update a product favourite
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourites
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_product_favourite_partial_update
      description: Partially update product favourite information. Requires authentication.
      summary: Partially update a product favourite
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourites
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_product_favourite_destroy
      description: Remove a product from user's favourites. Requires authentication.
      summary: Delete a product favourite
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourites
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/favourite/{id}{format}:
    get:
      operationId: api_v1_product_favourite_formatted_retrieve
      description: Get detailed information about a specific product favourite.
      summary: Retrieve a product favourite
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourites
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_product_favourite_formatted_update
      description: Update product favourite information. Requires authentication.
      summary: Update a product favourite
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourites
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavourite'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_product_favourite_formatted_partial_update
      description: Partially update product favourite information. Requires authentication.
      summary: Partially update a product favourite
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourites
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductFavourite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductFavourite'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_product_favourite_formatted_destroy
      description: Remove a product from user's favourites. Requires authentication.
      summary: Delete a product favourite
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourites
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/favourite/{id}/product:
    get:
      operationId: api_v1_product_favourite_product_retrieve
      description: Get detailed information about the product in this favourite entry.
      summary: Get favourite product details
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourites
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/favourite/{id}/product{format}:
    get:
      operationId: api_v1_product_favourite_product_formatted_retrieve
      description: Get detailed information about the product in this favourite entry.
      summary: Get favourite product details
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Favourites
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/favourite/favourites_by_products:
    post:
      operationId: api_v1_product_favourite_favourites_by_products_create
      description: Get favourite entries for the specified product IDs. Requires authentication.
      summary: Get favourites by product IDs
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - Product Favourites
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavouriteByProductsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavouriteByProductsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavouriteByProductsRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/favourite/favourites_by_products{format}:
    post:
      operationId: api_v1_product_favourite_favourites_by_products_formatted_create
      description: Get favourite entries for the specified product IDs. Requires authentication.
      summary: Get favourites by product IDs
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - Product Favourites
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductFavouriteByProductsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductFavouriteByProductsRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductFavouriteByProductsRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/image:
    get:
      operationId: api_v1_product_image_list
      description: Retrieve a list of product images with filtering and search capabilities.
      summary: List product images
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isMain
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Product Images
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductImageList'
          description: ''
    post:
      operationId: api_v1_product_image_create
      description: Upload a new image for a product. Supports multi-language titles.
        Requires authentication.
      summary: Create a product image
      tags:
      - Product Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImage'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/image{format}:
    get:
      operationId: api_v1_product_image_formatted_list
      description: Retrieve a list of product images with filtering and search capabilities.
      summary: List product images
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isMain
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: product
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Product Images
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductImageList'
          description: ''
    post:
      operationId: api_v1_product_image_formatted_create
      description: Upload a new image for a product. Supports multi-language titles.
        Requires authentication.
      summary: Create a product image
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Product Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImage'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/image/{id}:
    get:
      operationId: api_v1_product_image_retrieve
      description: Get detailed information about a specific product image.
      summary: Retrieve a product image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_product_image_update
      description: Update product image information including the image file. Requires
        authentication.
      summary: Update a product image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImage'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_product_image_partial_update
      description: Partially update product image information. Requires authentication.
      summary: Partially update a product image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_product_image_destroy
      description: Delete a product image. Requires authentication.
      summary: Delete a product image
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/image/{id}{format}:
    get:
      operationId: api_v1_product_image_formatted_retrieve
      description: Get detailed information about a specific product image.
      summary: Retrieve a product image
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_product_image_formatted_update
      description: Update product image information including the image file. Requires
        authentication.
      summary: Update a product image
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImage'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_product_image_formatted_partial_update
      description: Partially update product image information. Requires authentication.
      summary: Partially update a product image
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductImage'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductImage'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_product_image_formatted_destroy
      description: Delete a product image. Requires authentication.
      summary: Delete a product image
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Images
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/review:
    get:
      operationId: api_v1_product_review_list
      description: Retrieve a list of product reviews with filtering and search capabilities.
        Regular users can see only approved reviews, while admins can see all reviews.
      summary: List product reviews
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - 'FALSE'
          - NEW
          - 'TRUE'
        description: |-
          * `NEW` - New
          * `TRUE` - True
          * `FALSE` - False
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - Product Reviews
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
    post:
      operationId: api_v1_product_review_create
      description: Create a new product review. Requires authentication. Users can
        only create one review per product.
      summary: Create a product review
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/review{format}:
    get:
      operationId: api_v1_product_review_formatted_list
      description: Retrieve a list of product reviews with filtering and search capabilities.
        Regular users can see only approved reviews, while admins can see all reviews.
      summary: List product reviews
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: productId
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - 'FALSE'
          - NEW
          - 'TRUE'
        description: |-
          * `NEW` - New
          * `TRUE` - True
          * `FALSE` - False
      - in: query
        name: userId
        schema:
          type: integer
      tags:
      - Product Reviews
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
    post:
      operationId: api_v1_product_review_formatted_create
      description: Create a new product review. Requires authentication. Users can
        only create one review per product.
      summary: Create a product review
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/review/{id}:
    get:
      operationId: api_v1_product_review_retrieve
      description: Get detailed information about a specific product review.
      summary: Retrieve a product review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_product_review_update
      description: Update product review information. Requires authentication and
        ownership of the review.
      summary: Update a product review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_product_review_partial_update
      description: Partially update product review information. Requires authentication
        and ownership of the review.
      summary: Partially update a product review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_product_review_destroy
      description: Delete a product review. Requires authentication and ownership
        of the review.
      summary: Delete a product review
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/review/{id}{format}:
    get:
      operationId: api_v1_product_review_formatted_retrieve
      description: Get detailed information about a specific product review.
      summary: Retrieve a product review
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_product_review_formatted_update
      description: Update product review information. Requires authentication and
        ownership of the review.
      summary: Update a product review
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReview'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_product_review_formatted_partial_update
      description: Partially update product review information. Requires authentication
        and ownership of the review.
      summary: Partially update a product review
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductReview'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_product_review_formatted_destroy
      description: Delete a product review. Requires authentication and ownership
        of the review.
      summary: Delete a product review
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Product Reviews
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/review/{id}/product:
    get:
      operationId: api_v1_product_review_product_retrieve
      description: Get detailed information about the product this review is for.
      summary: Get reviewed product details
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Reviews
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/review/{id}/product{format}:
    get:
      operationId: api_v1_product_review_product_formatted_retrieve
      description: Get detailed information about the product this review is for.
      summary: Get reviewed product details
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Product Reviews
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/review/user_product_review:
    post:
      operationId: api_v1_product_review_user_product_review_create
      description: Get the current user's review for a specific product. Requires
        authentication.
      summary: Get user's review for a product
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProductReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProductReviewRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserProductReviewRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/product/review/user_product_review{format}:
    post:
      operationId: api_v1_product_review_user_product_review_formatted_create
      description: Get the current user's review for a specific product. Requires
        authentication.
      summary: Get user's review for a product
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Product Reviews
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProductReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProductReviewRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/UserProductReviewRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductReview'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/region:
    get:
      operationId: api_v1_region_list
      description: Retrieve a list of regions with filtering and search capabilities.
      summary: List regions
      parameters:
      - in: query
        name: alpha
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
          title: Country Code Alpha 2
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Regions
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegionList'
          description: ''
    post:
      operationId: api_v1_region_create
      description: Create a new region. Requires authentication.
      summary: Create a region
      tags:
      - Regions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/region{format}:
    get:
      operationId: api_v1_region_formatted_list
      description: Retrieve a list of regions with filtering and search capabilities.
      summary: List regions
      parameters:
      - in: query
        name: alpha
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
          title: Country Code Alpha 2
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Regions
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegionList'
          description: ''
    post:
      operationId: api_v1_region_formatted_create
      description: Create a new region. Requires authentication.
      summary: Create a region
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Regions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/region/{alpha}:
    get:
      operationId: api_v1_region_retrieve
      description: Get detailed information about a specific region.
      summary: Retrieve a region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - Regions
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_region_update
      description: Update region information. Requires authentication.
      summary: Update a region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - Regions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_region_partial_update
      description: Partially update region information. Requires authentication.
      summary: Partially update a region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - Regions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_region_destroy
      description: Delete a region. Requires authentication.
      summary: Delete a region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      tags:
      - Regions
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/region/{alpha}{format}:
    get:
      operationId: api_v1_region_formatted_retrieve
      description: Get detailed information about a specific region.
      summary: Retrieve a region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Regions
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_region_formatted_update
      description: Update region information. Requires authentication.
      summary: Update a region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Regions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Region'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Region'
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_region_formatted_partial_update
      description: Partially update region information. Requires authentication.
      summary: Partially update a region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Regions
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegion'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_region_formatted_destroy
      description: Delete a region. Requires authentication.
      summary: Delete a region
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Regions
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/region/{alpha}/get_regions_by_country_alpha_2:
    get:
      operationId: api_v1_region_get_regions_by_country_alpha_2_list
      description: Get all regions for a specific country using the country's ISO
        alpha-2 code.
      summary: Get regions by country
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: query
        name: alpha
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
          title: Country Code Alpha 2
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Regions
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/region/{alpha}/get_regions_by_country_alpha_2{format}:
    get:
      operationId: api_v1_region_get_regions_by_country_alpha_2_formatted_list
      description: Get all regions for a specific country using the country's ISO
        alpha-2 code.
      summary: Get regions by country
      parameters:
      - in: path
        name: alpha
        schema:
          type: string
          title: Region Code
        description: A unique value identifying this Region.
        required: true
      - in: query
        name: alpha
        schema:
          type: string
      - in: query
        name: country
        schema:
          type: string
          title: Country Code Alpha 2
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Regions
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegionList'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/search/blog/post:
    get:
      operationId: api_v1_search_blog_post_retrieve
      description: Search blog posts using MeiliSearch. Provides full-text search
        with highlighting, ranking, and faceting capabilities.
      summary: Search blog posts
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
          default: 10
        description: Maximum number of results to return
      - in: query
        name: offset
        schema:
          type: integer
          default: 0
        description: Number of results to skip
      - in: query
        name: query
        schema:
          type: string
        description: Search query string
        required: true
      tags:
      - Search
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostMeiliSearchResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/search/blog/post{format}:
    get:
      operationId: api_v1_search_blog_post_formatted_retrieve
      description: Search blog posts using MeiliSearch. Provides full-text search
        with highlighting, ranking, and faceting capabilities.
      summary: Search blog posts
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: limit
        schema:
          type: integer
          default: 10
        description: Maximum number of results to return
      - in: query
        name: offset
        schema:
          type: integer
          default: 0
        description: Number of results to skip
      - in: query
        name: query
        schema:
          type: string
        description: Search query string
        required: true
      tags:
      - Search
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostMeiliSearchResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/search/product:
    get:
      operationId: api_v1_search_product_retrieve
      description: Search products using MeiliSearch. Provides full-text search with
        highlighting, ranking, and faceting capabilities.
      summary: Search products
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
          default: 10
        description: Maximum number of results to return
      - in: query
        name: offset
        schema:
          type: integer
          default: 0
        description: Number of results to skip
      - in: query
        name: query
        schema:
          type: string
        description: Search query string
        required: true
      tags:
      - Search
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMeiliSearchResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/search/product{format}:
    get:
      operationId: api_v1_search_product_formatted_retrieve
      description: Search products using MeiliSearch. Provides full-text search with
        highlighting, ranking, and faceting capabilities.
      summary: Search products
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: limit
        schema:
          type: integer
          default: 10
        description: Maximum number of results to return
      - in: query
        name: offset
        schema:
          type: integer
          default: 0
        description: Number of results to skip
      - in: query
        name: query
        schema:
          type: string
        description: Search query string
        required: true
      tags:
      - Search
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductMeiliSearchResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/slide:
    get:
      operationId: api_v1_slide_list
      description: Retrieve a list of slides with filtering and search capabilities.
      summary: List slides
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slider
        schema:
          type: integer
      tags:
      - Slides
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSlideList'
          description: ''
    post:
      operationId: api_v1_slide_create
      description: Create a new slide for a slider. Requires authentication.
      summary: Create a slide
      tags:
      - Slides
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/slide{format}:
    get:
      operationId: api_v1_slide_formatted_list
      description: Retrieve a list of slides with filtering and search capabilities.
      summary: List slides
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: slider
        schema:
          type: integer
      tags:
      - Slides
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSlideList'
          description: ''
    post:
      operationId: api_v1_slide_formatted_create
      description: Create a new slide for a slider. Requires authentication.
      summary: Create a slide
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Slides
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/slide/{id}:
    get:
      operationId: api_v1_slide_retrieve
      description: Get detailed information about a specific slide.
      summary: Retrieve a slide
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Slides
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_slide_update
      description: Update slide information. Requires authentication.
      summary: Update a slide
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Slides
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_slide_partial_update
      description: Partially update slide information. Requires authentication.
      summary: Partially update a slide
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Slides
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_slide_destroy
      description: Delete a slide. Requires authentication.
      summary: Delete a slide
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Slides
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/slide/{id}{format}:
    get:
      operationId: api_v1_slide_formatted_retrieve
      description: Get detailed information about a specific slide.
      summary: Retrieve a slide
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Slides
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_slide_formatted_update
      description: Update slide information. Requires authentication.
      summary: Update a slide
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Slides
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slide'
          application/json:
            schema:
              $ref: '#/components/schemas/Slide'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_slide_formatted_partial_update
      description: Partially update slide information. Requires authentication.
      summary: Partially update a slide
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Slides
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlide'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slide'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_slide_formatted_destroy
      description: Delete a slide. Requires authentication.
      summary: Delete a slide
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Slides
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/slider:
    get:
      operationId: api_v1_slider_list
      description: Retrieve a list of sliders with filtering and search capabilities.
      summary: List sliders
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Sliders
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSliderList'
          description: ''
    post:
      operationId: api_v1_slider_create
      description: Create a new slider. Requires authentication.
      summary: Create a slider
      tags:
      - Sliders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/slider{format}:
    get:
      operationId: api_v1_slider_formatted_list
      description: Retrieve a list of sliders with filtering and search capabilities.
      summary: List sliders
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Sliders
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSliderList'
          description: ''
    post:
      operationId: api_v1_slider_formatted_create
      description: Create a new slider. Requires authentication.
      summary: Create a slider
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Sliders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/slider/{id}:
    get:
      operationId: api_v1_slider_retrieve
      description: Get detailed information about a specific slider.
      summary: Retrieve a slider
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Sliders
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_slider_update
      description: Update slider information. Requires authentication.
      summary: Update a slider
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Sliders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_slider_partial_update
      description: Partially update slider information. Requires authentication.
      summary: Partially update a slider
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Sliders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_slider_destroy
      description: Delete a slider. Requires authentication.
      summary: Delete a slider
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Sliders
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/slider/{id}{format}:
    get:
      operationId: api_v1_slider_formatted_retrieve
      description: Get detailed information about a specific slider.
      summary: Retrieve a slider
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Sliders
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_slider_formatted_update
      description: Update slider information. Requires authentication.
      summary: Update a slider
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Sliders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Slider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Slider'
          application/json:
            schema:
              $ref: '#/components/schemas/Slider'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_slider_formatted_partial_update
      description: Partially update slider information. Requires authentication.
      summary: Partially update a slider
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Sliders
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSlider'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slider'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_slider_formatted_destroy
      description: Delete a slider. Requires authentication.
      summary: Delete a slider
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Sliders
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/tip:
    get:
      operationId: api_v1_tip_list
      description: Retrieve a list of tips with filtering and search capabilities.
      summary: List tips
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: kind
        schema:
          type: string
          enum:
          - ERROR
          - INFO
          - SUCCESS
          - WARNING
        description: |-
          * `SUCCESS` - Success
          * `INFO` - Info
          * `ERROR` - Error
          * `WARNING` - Warning
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Tips
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTipList'
          description: ''
    post:
      operationId: api_v1_tip_create
      description: Create a new tip. Requires authentication.
      summary: Create a tip
      tags:
      - Tips
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/tip{format}:
    get:
      operationId: api_v1_tip_formatted_list
      description: Retrieve a list of tips with filtering and search capabilities.
      summary: List tips
      parameters:
      - in: query
        name: active
        schema:
          type: boolean
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: kind
        schema:
          type: string
          enum:
          - ERROR
          - INFO
          - SUCCESS
          - WARNING
        description: |-
          * `SUCCESS` - Success
          * `INFO` - Info
          * `ERROR` - Error
          * `WARNING` - Warning
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Tips
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTipList'
          description: ''
    post:
      operationId: api_v1_tip_formatted_create
      description: Create a new tip. Requires authentication.
      summary: Create a tip
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Tips
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/tip/{id}:
    get:
      operationId: api_v1_tip_retrieve
      description: Get detailed information about a specific tip.
      summary: Retrieve a tip
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Tips
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_tip_update
      description: Update tip information. Requires authentication.
      summary: Update a tip
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Tips
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_tip_partial_update
      description: Partially update tip information. Requires authentication.
      summary: Partially update a tip
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Tips
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTip'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_tip_destroy
      description: Delete a tip. Requires authentication.
      summary: Delete a tip
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Tips
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/tip/{id}{format}:
    get:
      operationId: api_v1_tip_formatted_retrieve
      description: Get detailed information about a specific tip.
      summary: Retrieve a tip
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Tips
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_tip_formatted_update
      description: Update tip information. Requires authentication.
      summary: Update a tip
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Tips
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tip'
          application/json:
            schema:
              $ref: '#/components/schemas/Tip'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_tip_formatted_partial_update
      description: Partially update tip information. Requires authentication.
      summary: Partially update a tip
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Tips
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTip'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTip'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tip'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_tip_formatted_destroy
      description: Delete a tip. Requires authentication.
      summary: Delete a tip
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Tips
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account:
    get:
      operationId: api_v1_user_account_list
      description: Retrieve a list of user accounts. Only accessible by staff users
        or users viewing their own account.
      summary: List user accounts
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuthenticationList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: api_v1_user_account_create
      description: Create a new user account.
      summary: Create a user account
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Authentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Authentication'
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account{format}:
    get:
      operationId: api_v1_user_account_formatted_list
      description: Retrieve a list of user accounts. Only accessible by staff users
        or users viewing their own account.
      summary: List user accounts
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAuthenticationList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: api_v1_user_account_formatted_create
      description: Create a new user account.
      summary: Create a user account
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Authentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Authentication'
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}:
    get:
      operationId: api_v1_user_account_retrieve
      description: Get detailed information about a specific user account. Users can
        only access their own account unless they are staff.
      summary: Retrieve a user account
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_user_account_update
      description: Update user account information. Users can only update their own
        account unless they are staff.
      summary: Update a user account
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Authentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Authentication'
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_user_account_partial_update
      description: Partially update user account information. Users can only update
        their own account unless they are staff.
      summary: Partially update a user account
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_user_account_destroy
      description: Delete a user account. Users can only delete their own account
        unless they are staff.
      summary: Delete a user account
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}{format}:
    get:
      operationId: api_v1_user_account_formatted_retrieve
      description: Get detailed information about a specific user account. Users can
        only access their own account unless they are staff.
      summary: Retrieve a user account
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_user_account_formatted_update
      description: Update user account information. Users can only update their own
        account unless they are staff.
      summary: Update a user account
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Authentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Authentication'
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_user_account_formatted_partial_update
      description: Partially update user account information. Users can only update
        their own account unless they are staff.
      summary: Partially update a user account
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAuthentication'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_user_account_formatted_destroy
      description: Delete a user account. Users can only delete their own account
        unless they are staff.
      summary: Delete a user account
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/addresses:
    get:
      operationId: api_v1_user_account_addresses_list
      description: Get all addresses for a specific user.
      summary: Get user's addresses
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAddressList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/addresses{format}:
    get:
      operationId: api_v1_user_account_addresses_formatted_list
      description: Get all addresses for a specific user.
      summary: Get user's addresses
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAddressList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/blog_post_comments:
    get:
      operationId: api_v1_user_account_blog_post_comments_list
      description: Get all blog post comments written by a specific user.
      summary: Get user's blog comments
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/blog_post_comments{format}:
    get:
      operationId: api_v1_user_account_blog_post_comments_formatted_list
      description: Get all blog post comments written by a specific user.
      summary: Get user's blog comments
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogCommentList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/change_username:
    post:
      operationId: api_v1_user_account_change_username_create
      description: Change the username for a specific user.
      summary: Change username
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameUpdateResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/change_username{format}:
    post:
      operationId: api_v1_user_account_change_username_formatted_create
      description: Change the username for a specific user.
      summary: Change username
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Accounts
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameUpdateResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/favourite_products:
    get:
      operationId: api_v1_user_account_favourite_products_list
      description: Get all favourite products for a specific user.
      summary: Get user's favourite products
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/favourite_products{format}:
    get:
      operationId: api_v1_user_account_favourite_products_formatted_list
      description: Get all favourite products for a specific user.
      summary: Get user's favourite products
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductFavouriteList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/liked_blog_posts:
    get:
      operationId: api_v1_user_account_liked_blog_posts_list
      description: Get all blog posts liked by a specific user.
      summary: Get user's liked blog posts
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/liked_blog_posts{format}:
    get:
      operationId: api_v1_user_account_liked_blog_posts_formatted_list
      description: Get all blog posts liked by a specific user.
      summary: Get user's liked blog posts
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBlogPostList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/notifications:
    get:
      operationId: api_v1_user_account_notifications_list
      description: Get all notifications for a specific user.
      summary: Get user's notifications
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationUserList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/notifications{format}:
    get:
      operationId: api_v1_user_account_notifications_formatted_list
      description: Get all notifications for a specific user.
      summary: Get user's notifications
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationUserList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/orders:
    get:
      operationId: api_v1_user_account_orders_list
      description: Get all orders for a specific user.
      summary: Get user's orders
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/orders{format}:
    get:
      operationId: api_v1_user_account_orders_formatted_list
      description: Get all orders for a specific user.
      summary: Get user's orders
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/product_reviews:
    get:
      operationId: api_v1_user_account_product_reviews_list
      description: Get all product reviews written by a specific user.
      summary: Get user's product reviews
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/account/{id}/product_reviews{format}:
    get:
      operationId: api_v1_user_account_product_reviews_formatted_list
      description: Get all product reviews written by a specific user.
      summary: Get user's product reviews
      parameters:
      - in: query
        name: email
        schema:
          type: string
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - User Accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductReviewList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address:
    get:
      operationId: api_v1_user_address_list
      description: Retrieve a list of addresses for the authenticated user.
      summary: List user addresses
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city name (partial match)
      - in: query
        name: country
        schema:
          type: number
        description: Filter by country ID
      - in: query
        name: countryCode
        schema:
          type: string
        description: Filter by country code (e.g., 'US', 'CA')
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date
        description: Filter addresses created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date
        description: Filter addresses created before this date
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isMain
        schema:
          type: boolean
        description: Filter by main address status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: locationType
        schema:
          type: string
        description: Filter by location type (exact match, case insensitive)
      - in: query
        name: locationTypeContains
        schema:
          type: string
        description: Filter by location type (partial match)
      - in: query
        name: mobilePhone
        schema:
          type: string
        description: Filter by mobile phone number (partial match)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phone
        schema:
          type: string
        description: Filter by phone number (partial match)
      - in: query
        name: region
        schema:
          type: number
        description: Filter by region ID
      - in: query
        name: regionName
        schema:
          type: string
        description: Filter by region name (partial match)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: street
        schema:
          type: string
        description: Filter by street name (partial match)
      - in: query
        name: streetNumber
        schema:
          type: string
        description: Filter by street number
      - in: query
        name: title
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date
        description: Filter addresses updated after this date
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date
        description: Filter addresses updated before this date
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcodeExact
        schema:
          type: string
        description: Filter by exact zipcode
      tags:
      - User Addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAddressList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: api_v1_user_address_create
      description: Create a new address for the authenticated user.
      summary: Create a user address
      tags:
      - User Addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address{format}:
    get:
      operationId: api_v1_user_address_formatted_list
      description: Retrieve a list of addresses for the authenticated user.
      summary: List user addresses
      parameters:
      - in: query
        name: city
        schema:
          type: string
        description: Filter by city name (partial match)
      - in: query
        name: country
        schema:
          type: number
        description: Filter by country ID
      - in: query
        name: countryCode
        schema:
          type: string
        description: Filter by country code (e.g., 'US', 'CA')
      - in: query
        name: countryName
        schema:
          type: string
        description: Filter by country name (partial match)
      - in: query
        name: createdAfter
        schema:
          type: string
          format: date
        description: Filter addresses created after this date
      - in: query
        name: createdBefore
        schema:
          type: string
          format: date
        description: Filter addresses created before this date
      - in: query
        name: firstName
        schema:
          type: string
        description: Filter by first name (partial match)
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: fullName
        schema:
          type: string
        description: Filter by full name (first + last name)
      - in: query
        name: id
        schema:
          type: integer
      - in: query
        name: isMain
        schema:
          type: boolean
        description: Filter by main address status
      - in: query
        name: lastName
        schema:
          type: string
        description: Filter by last name (partial match)
      - in: query
        name: locationType
        schema:
          type: string
        description: Filter by location type (exact match, case insensitive)
      - in: query
        name: locationTypeContains
        schema:
          type: string
        description: Filter by location type (partial match)
      - in: query
        name: mobilePhone
        schema:
          type: string
        description: Filter by mobile phone number (partial match)
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: phone
        schema:
          type: string
        description: Filter by phone number (partial match)
      - in: query
        name: region
        schema:
          type: number
        description: Filter by region ID
      - in: query
        name: regionName
        schema:
          type: string
        description: Filter by region name (partial match)
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: street
        schema:
          type: string
        description: Filter by street name (partial match)
      - in: query
        name: streetNumber
        schema:
          type: string
        description: Filter by street number
      - in: query
        name: title
        schema:
          type: string
      - in: query
        name: updatedAfter
        schema:
          type: string
          format: date
        description: Filter addresses updated after this date
      - in: query
        name: updatedBefore
        schema:
          type: string
          format: date
        description: Filter addresses updated before this date
      - in: query
        name: zipcode
        schema:
          type: string
        description: Filter by zipcode (partial match)
      - in: query
        name: zipcodeExact
        schema:
          type: string
        description: Filter by exact zipcode
      tags:
      - User Addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserAddressList'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    post:
      operationId: api_v1_user_address_formatted_create
      description: Create a new address for the authenticated user.
      summary: Create a user address
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - User Addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address/{id}:
    get:
      operationId: api_v1_user_address_retrieve
      description: Get detailed information about a specific user address.
      summary: Retrieve a user address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_user_address_update
      description: Update user address information.
      summary: Update a user address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_user_address_partial_update
      description: Partially update user address information.
      summary: Partially update a user address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_user_address_destroy
      description: Delete a user address.
      summary: Delete a user address
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address/{id}{format}:
    get:
      operationId: api_v1_user_address_formatted_retrieve
      description: Get detailed information about a specific user address.
      summary: Retrieve a user address
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_user_address_formatted_update
      description: Update user address information.
      summary: Update a user address
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_user_address_formatted_partial_update
      description: Partially update user address information.
      summary: Partially update a user address
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAddressUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_user_address_formatted_destroy
      description: Delete a user address.
      summary: Delete a user address
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address/{id}/set_main:
    post:
      operationId: api_v1_user_address_set_main_create
      description: Set this address as the user's main address.
      summary: Set address as main
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/address/{id}/set_main{format}:
    post:
      operationId: api_v1_user_address_set_main_formatted_create
      description: Set this address as the user's main address.
      summary: Set address as main
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Addresses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/user/subscription:
    get:
      operationId: api_v1_user_subscription_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - bounced
          - pending
          - unsubscribed
        description: |-
          * `active` - Active
          * `pending` - Pending Confirmation
          * `unsubscribed` - Unsubscribed
          * `bounced` - Bounced
      - in: query
        name: topic
        schema:
          type: integer
      - in: query
        name: topic_Category
        schema:
          type: string
          enum:
          - account
          - marketing
          - newsletter
          - other
          - product
          - promotional
          - system
        description: |-
          Category of the subscription topic

          * `marketing` - Marketing Campaigns
          * `product` - Product Updates
          * `account` - Account Updates
          * `system` - System Notifications
          * `newsletter` - Newsletter
          * `promotional` - Promotional
          * `other` - Other
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserSubscriptionList'
          description: ''
    post:
      operationId: api_v1_user_subscription_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscription'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
  /api/v1/user/subscription{format}:
    get:
      operationId: api_v1_user_subscription_formatted_list
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - bounced
          - pending
          - unsubscribed
        description: |-
          * `active` - Active
          * `pending` - Pending Confirmation
          * `unsubscribed` - Unsubscribed
          * `bounced` - Bounced
      - in: query
        name: topic
        schema:
          type: integer
      - in: query
        name: topic_Category
        schema:
          type: string
          enum:
          - account
          - marketing
          - newsletter
          - other
          - product
          - promotional
          - system
        description: |-
          Category of the subscription topic

          * `marketing` - Marketing Campaigns
          * `product` - Product Updates
          * `account` - Account Updates
          * `system` - System Notifications
          * `newsletter` - Newsletter
          * `promotional` - Promotional
          * `other` - Other
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserSubscriptionList'
          description: ''
    post:
      operationId: api_v1_user_subscription_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscription'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
  /api/v1/user/subscription/{id}:
    get:
      operationId: api_v1_user_subscription_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
    put:
      operationId: api_v1_user_subscription_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscription'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
    patch:
      operationId: api_v1_user_subscription_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserSubscription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserSubscription'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
    delete:
      operationId: api_v1_user_subscription_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '204':
          description: No response body
  /api/v1/user/subscription/{id}{format}:
    get:
      operationId: api_v1_user_subscription_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
    put:
      operationId: api_v1_user_subscription_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscription'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
    patch:
      operationId: api_v1_user_subscription_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserSubscription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserSubscription'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
    delete:
      operationId: api_v1_user_subscription_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '204':
          description: No response body
  /api/v1/user/subscription/{id}/confirm:
    post:
      operationId: api_v1_user_subscription_confirm_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscription'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
  /api/v1/user/subscription/{id}/confirm{format}:
    post:
      operationId: api_v1_user_subscription_confirm_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscription'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
  /api/v1/user/subscription/bulk_update:
    post:
      operationId: api_v1_user_subscription_bulk_update_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscription'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
  /api/v1/user/subscription/bulk_update{format}:
    post:
      operationId: api_v1_user_subscription_bulk_update_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSubscription'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscription'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
          description: ''
  /api/v1/user/subscription/topic:
    get:
      operationId: api_v1_user_subscription_topic_list
      parameters:
      - in: query
        name: category
        schema:
          type: string
          enum:
          - account
          - marketing
          - newsletter
          - other
          - product
          - promotional
          - system
        description: |-
          Category of the subscription topic

          * `marketing` - Marketing Campaigns
          * `product` - Product Updates
          * `account` - Account Updates
          * `system` - System Notifications
          * `newsletter` - Newsletter
          * `promotional` - Promotional
          * `other` - Other
      - in: query
        name: isDefault
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: requiresConfirmation
        schema:
          type: boolean
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSubscriptionTopicList'
          description: ''
    post:
      operationId: api_v1_user_subscription_topic_create
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
  /api/v1/user/subscription/topic{format}:
    get:
      operationId: api_v1_user_subscription_topic_formatted_list
      parameters:
      - in: query
        name: category
        schema:
          type: string
          enum:
          - account
          - marketing
          - newsletter
          - other
          - product
          - promotional
          - system
        description: |-
          Category of the subscription topic

          * `marketing` - Marketing Campaigns
          * `product` - Product Updates
          * `account` - Account Updates
          * `system` - System Notifications
          * `newsletter` - Newsletter
          * `promotional` - Promotional
          * `other` - Other
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: isDefault
        schema:
          type: boolean
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: requiresConfirmation
        schema:
          type: boolean
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSubscriptionTopicList'
          description: ''
    post:
      operationId: api_v1_user_subscription_topic_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
  /api/v1/user/subscription/topic/{id}:
    get:
      operationId: api_v1_user_subscription_topic_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
    put:
      operationId: api_v1_user_subscription_topic_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
    patch:
      operationId: api_v1_user_subscription_topic_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSubscriptionTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSubscriptionTopic'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSubscriptionTopic'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
    delete:
      operationId: api_v1_user_subscription_topic_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '204':
          description: No response body
  /api/v1/user/subscription/topic/{id}{format}:
    get:
      operationId: api_v1_user_subscription_topic_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
    put:
      operationId: api_v1_user_subscription_topic_formatted_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
    patch:
      operationId: api_v1_user_subscription_topic_formatted_partial_update
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSubscriptionTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSubscriptionTopic'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSubscriptionTopic'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
    delete:
      operationId: api_v1_user_subscription_topic_formatted_destroy
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      responses:
        '204':
          description: No response body
  /api/v1/user/subscription/topic/{id}/subscribe:
    post:
      operationId: api_v1_user_subscription_topic_subscribe_create
      description: Subscribe to a specific topic.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
  /api/v1/user/subscription/topic/{id}/subscribe{format}:
    post:
      operationId: api_v1_user_subscription_topic_subscribe_formatted_create
      description: Subscribe to a specific topic.
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
  /api/v1/user/subscription/topic/{id}/unsubscribe:
    post:
      operationId: api_v1_user_subscription_topic_unsubscribe_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
  /api/v1/user/subscription/topic/{id}/unsubscribe{format}:
    post:
      operationId: api_v1_user_subscription_topic_unsubscribe_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionTopic'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
  /api/v1/user/subscription/topic/my_subscriptions:
    get:
      operationId: api_v1_user_subscription_topic_my_subscriptions_retrieve
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
  /api/v1/user/subscription/topic/my_subscriptions{format}:
    get:
      operationId: api_v1_user_subscription_topic_my_subscriptions_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTopic'
          description: ''
  /api/v1/user/unsubscribe/{uidb64}/{token}/{topic_slug}:
    get:
      operationId: api_v1_user_unsubscribe_retrieve
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: topicSlug
        schema:
          type: string
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unsubscribe'
          description: ''
  /api/v1/user/unsubscribe/{uidb64}/{token}/{topic_slug}{format}:
    get:
      operationId: api_v1_user_unsubscribe_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: topicSlug
        schema:
          type: string
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        required: true
      tags:
      - api
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unsubscribe'
          description: ''
  /api/v1/vat:
    get:
      operationId: api_v1_vat_list
      description: Retrieve a list of VAT rates with filtering and search capabilities.
      summary: List VAT rates
      parameters:
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: value
        schema:
          type: number
      tags:
      - Vat
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVatList'
          description: ''
    post:
      operationId: api_v1_vat_create
      description: Create a new VAT rate. Requires authentication.
      summary: Create a VAT rate
      tags:
      - Vat
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/vat{format}:
    get:
      operationId: api_v1_vat_formatted_list
      description: Retrieve a list of VAT rates with filtering and search capabilities.
      summary: List VAT rates
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: query
        name: id
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: pageSize
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: value
        schema:
          type: number
      tags:
      - Vat
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVatList'
          description: ''
    post:
      operationId: api_v1_vat_formatted_create
      description: Create a new VAT rate. Requires authentication.
      summary: Create a VAT rate
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - Vat
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/vat/{id}:
    get:
      operationId: api_v1_vat_retrieve
      description: Get detailed information about a specific VAT rate.
      summary: Retrieve a VAT rate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Vat
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_vat_update
      description: Update VAT rate information. Requires authentication.
      summary: Update a VAT rate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Vat
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_vat_partial_update
      description: Partially update VAT rate information. Requires authentication.
      summary: Partially update a VAT rate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Vat
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVat'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_vat_destroy
      description: Delete a VAT rate. Requires authentication.
      summary: Delete a VAT rate
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Vat
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
  /api/v1/vat/{id}{format}:
    get:
      operationId: api_v1_vat_formatted_retrieve
      description: Get detailed information about a specific VAT rate.
      summary: Retrieve a VAT rate
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Vat
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    put:
      operationId: api_v1_vat_formatted_update
      description: Update VAT rate information. Requires authentication.
      summary: Update a VAT rate
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Vat
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vat'
          application/json:
            schema:
              $ref: '#/components/schemas/Vat'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    patch:
      operationId: api_v1_vat_formatted_partial_update
      description: Partially update VAT rate information. Requires authentication.
      summary: Partially update a VAT rate
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Vat
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVat'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVat'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vat'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
    delete:
      operationId: api_v1_vat_formatted_destroy
      description: Delete a VAT rate. Requires authentication.
      summary: Delete a VAT rate
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - Vat
      security:
      - {}
      responses:
        '204':
          description: No response body
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: ''
components:
  schemas:
    Authentication:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
          title: Id
        email:
          type: string
          format: email
          title: Διεύθυνση ηλεκτρονικού ταχυδρομείου
          maxLength: 254
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        id:
          type: integer
          readOnly: true
        username:
          type: string
          nullable: true
          title: Όνομα χρήστη
          description: Required. 30 characters or fewer.Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 30
        image:
          type: string
          format: uri
          nullable: true
          title: Εικόνα
        phone:
          type: string
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        address:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        country:
          type: string
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          title: Region Code
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
        twitter:
          type: string
          format: uri
          title: Twitter Profile
          maxLength: 200
        linkedin:
          type: string
          format: uri
          title: LinkedIn Profile
          maxLength: 200
        facebook:
          type: string
          format: uri
          title: Facebook Profile
          maxLength: 200
        instagram:
          type: string
          format: uri
          title: Instagram Profile
          maxLength: 200
        website:
          type: string
          format: uri
          maxLength: 200
        youtube:
          type: string
          format: uri
          title: Youtube Profile
          maxLength: 200
        github:
          type: string
          format: uri
          title: Github Profile
          maxLength: 200
        bio:
          type: string
        isActive:
          type: boolean
          readOnly: true
          title: Active
        isStaff:
          type: boolean
          readOnly: true
          title: Staff
        isSuperuser:
          type: boolean
          readOnly: true
          title: Κατάσταση υπερχρήστη
          description: Υποδηλώνει ότι ο συγκεκριμένος χρήστης έχει όλα τα δικαιώματα
            χωρίς να χρειάζεται να τα παραχωρήσετε ξεχωριστά.
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
      required:
      - createdAt
      - email
      - id
      - isActive
      - isStaff
      - isSuperuser
      - mainImagePath
      - pk
      - updatedAt
      - uuid
    BlankEnum:
      enum:
      - ''
    BlogAuthorList:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                bio:
                  type: string
            en:
              type: object
              properties:
                bio:
                  type: string
            de:
              type: object
              properties:
                bio:
                  type: string
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/Authentication'
          readOnly: true
        website:
          type: string
          format: uri
          maxLength: 200
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        numberOfPosts:
          type: integer
          readOnly: true
        totalLikesReceived:
          oneOf:
          - type: integer
          - enum:
            - 0
            type: integer
          readOnly: true
        activityLevel:
          type: string
          readOnly: true
        recentPostsCount:
          type: integer
          readOnly: true
        engagementRate:
          type: number
          format: double
          readOnly: true
        isActiveAuthor:
          type: boolean
          readOnly: true
      required:
      - activityLevel
      - createdAt
      - engagementRate
      - id
      - isActiveAuthor
      - numberOfPosts
      - recentPostsCount
      - totalLikesReceived
      - translations
      - updatedAt
      - user
      - uuid
    BlogAuthorStatsResponse:
      type: object
      properties:
        totalPosts:
          type: integer
          description: Total number of posts by this author
        totalLikesReceived:
          type: integer
          description: Total likes received across all posts
        memberSince:
          type: string
          format: date
          description: Date when the author joined
        hasWebsite:
          type: boolean
          description: Whether the author has a website
        fullName:
          type: string
          description: Author's full name
        userActive:
          type: boolean
          description: Whether the user account is active
        postsThisYear:
          type: integer
          description: Number of posts published this year
        averageLikesPerPost:
          type: number
          format: double
          description: Average likes per post
        activityLevel:
          type: string
          description: Author activity level (new, low, medium, high)
        recentActivity:
          type: object
          additionalProperties: {}
          description: Recent activity statistics
      required:
      - activityLevel
      - averageLikesPerPost
      - fullName
      - hasWebsite
      - memberSince
      - postsThisYear
      - recentActivity
      - totalLikesReceived
      - totalPosts
      - userActive
    BlogAuthorWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                bio:
                  type: string
            en:
              type: object
              properties:
                bio:
                  type: string
            de:
              type: object
              properties:
                bio:
                  type: string
        user:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
      required:
      - translations
      - user
    BlogCategory:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        postCount:
          type: integer
          readOnly: true
        hasChildren:
          type: boolean
          readOnly: true
        depthLevel:
          type: integer
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        children:
          type: array
          items: {}
          readOnly: true
        ancestors:
          type: array
          items: {}
          readOnly: true
        siblingsCount:
          type: integer
          readOnly: true
        descendantsCount:
          type: integer
          readOnly: true
        recursivePostCount:
          type: integer
          readOnly: true
        categoryPath:
          type: string
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - absoluteUrl
      - ancestors
      - categoryPath
      - children
      - createdAt
      - depthLevel
      - descendantsCount
      - hasChildren
      - id
      - level
      - mainImagePath
      - postCount
      - recursivePostCount
      - siblingsCount
      - slug
      - sortOrder
      - translations
      - treeId
      - updatedAt
      - uuid
    BlogCategoryReorderItem:
      type: object
      properties:
        id:
          type: integer
          description: Category ID
        sortOrder:
          type: integer
          description: New sort order value
      required:
      - id
      - sortOrder
    BlogCategoryReorderRequest:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/BlogCategoryReorderItem'
          description: List of categories with new sort orders
      required:
      - categories
    BlogCategoryReorderResponse:
      type: object
      properties:
        updatedCount:
          type: integer
          description: Number of categories updated
        message:
          type: string
          description: Success message
      required:
      - message
      - updatedCount
    BlogCategoryStatsResponse:
      type: object
      properties:
        directPostCount:
          type: integer
          description: Number of posts directly in this category
        recursivePostCount:
          type: integer
          description: Total posts in this category and all subcategories
        childrenCount:
          type: integer
          description: Number of direct child categories
        descendantsCount:
          type: integer
          description: Total number of descendant categories
        level:
          type: integer
          description: Depth level in the category tree
        absoluteUrl:
          type: string
          description: Absolute URL for this category
        mainImagePath:
          type: string
          description: Path to the main image
        hasImage:
          type: boolean
          description: Whether this category has an image
        isRoot:
          type: boolean
          description: Whether this is a root category
        isLeaf:
          type: boolean
          description: Whether this is a leaf category (no children)
        categoryPath:
          type: string
          description: Full path from root to this category
        avgPostsPerChild:
          type: number
          format: double
          description: Average number of posts per child category
      required:
      - absoluteUrl
      - avgPostsPerChild
      - categoryPath
      - childrenCount
      - descendantsCount
      - directPostCount
      - hasImage
      - isLeaf
      - isRoot
      - level
      - mainImagePath
      - recursivePostCount
    BlogCategoryWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
          title: Εικόνα
      required:
      - slug
      - sortOrder
      - translations
    BlogComment:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
        user:
          allOf:
          - $ref: '#/components/schemas/Authentication'
          readOnly: true
        postTitle:
          type: string
          readOnly: true
          description: Title of the blog post this comment belongs to
        postSlug:
          type: string
          readOnly: true
          description: Slug of the blog post this comment belongs to
        contentPreview:
          type: string
          nullable: true
          readOnly: true
          description: First 150 characters of the comment content
        isReply:
          type: boolean
          readOnly: true
          description: Whether this comment is a reply to another comment
        parent:
          type: integer
          readOnly: true
          nullable: true
        depthLevel:
          type: string
          readOnly: true
          description: Nesting level in comment hierarchy
        hasReplies:
          type: boolean
          readOnly: true
          description: Whether this comment has replies
        commentUrl:
          type: string
          readOnly: true
          description: URL to view this comment
        isApproved:
          type: boolean
          readOnly: true
        isEdited:
          type: boolean
          readOnly: true
          description: Whether this comment has been edited
        likesCount:
          type: integer
          readOnly: true
        repliesCount:
          type: integer
          readOnly: true
        userHasLiked:
          type: boolean
          readOnly: true
          description: Whether the current user has liked this comment
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        post:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Basic information about the blog post
        parentComment:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
          description: Parent comment if this is a reply
        childrenComments:
          type: array
          items: {}
          readOnly: true
          description: Direct child comments (replies)
        ancestorsPath:
          type: array
          items: {}
          readOnly: true
          description: Path from root comment to this comment
        treePosition:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Position information in the comment tree
        engagementMetrics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Engagement metrics for this comment
      required:
      - ancestorsPath
      - childrenComments
      - commentUrl
      - contentPreview
      - createdAt
      - depthLevel
      - engagementMetrics
      - hasReplies
      - id
      - isApproved
      - isEdited
      - isReply
      - likesCount
      - parent
      - parentComment
      - post
      - postSlug
      - postTitle
      - repliesCount
      - translations
      - treePosition
      - updatedAt
      - user
      - userHasLiked
      - uuid
    BlogCommentDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
        user:
          allOf:
          - $ref: '#/components/schemas/Authentication'
          readOnly: true
        postTitle:
          type: string
          readOnly: true
          description: Title of the blog post this comment belongs to
        postSlug:
          type: string
          readOnly: true
          description: Slug of the blog post this comment belongs to
        contentPreview:
          type: string
          nullable: true
          readOnly: true
          description: First 150 characters of the comment content
        isReply:
          type: boolean
          readOnly: true
          description: Whether this comment is a reply to another comment
        parent:
          type: integer
          readOnly: true
          nullable: true
        depthLevel:
          type: string
          readOnly: true
          description: Nesting level in comment hierarchy
        hasReplies:
          type: boolean
          readOnly: true
          description: Whether this comment has replies
        commentUrl:
          type: string
          readOnly: true
          description: URL to view this comment
        isApproved:
          type: boolean
          readOnly: true
        isEdited:
          type: boolean
          readOnly: true
          description: Whether this comment has been edited
        likesCount:
          type: integer
          readOnly: true
        repliesCount:
          type: integer
          readOnly: true
        userHasLiked:
          type: boolean
          readOnly: true
          description: Whether the current user has liked this comment
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        post:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Basic information about the blog post
        parentComment:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
          description: Parent comment if this is a reply
        childrenComments:
          type: array
          items: {}
          readOnly: true
          description: Direct child comments (replies)
        ancestorsPath:
          type: array
          items: {}
          readOnly: true
          description: Path from root comment to this comment
        treePosition:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Position information in the comment tree
        engagementMetrics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Engagement metrics for this comment
      required:
      - ancestorsPath
      - childrenComments
      - commentUrl
      - contentPreview
      - createdAt
      - depthLevel
      - engagementMetrics
      - hasReplies
      - id
      - isApproved
      - isEdited
      - isReply
      - likesCount
      - parent
      - parentComment
      - post
      - postSlug
      - postTitle
      - repliesCount
      - translations
      - treePosition
      - updatedAt
      - user
      - userHasLiked
      - uuid
    BlogCommentLikedCommentsRequest:
      type: object
      properties:
        commentIds:
          type: array
          items:
            type: integer
          description: List of comment IDs to check like status for
      required:
      - commentIds
    BlogCommentLikedCommentsResponse:
      type: object
      properties:
        likedCommentIds:
          type: array
          items:
            type: integer
          description: List of comment IDs that are liked by the current user
      required:
      - likedCommentIds
    BlogCommentList:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
        user:
          allOf:
          - $ref: '#/components/schemas/Authentication'
          readOnly: true
        postTitle:
          type: string
          readOnly: true
          description: Title of the blog post this comment belongs to
        postSlug:
          type: string
          readOnly: true
          description: Slug of the blog post this comment belongs to
        contentPreview:
          type: string
          nullable: true
          readOnly: true
          description: First 150 characters of the comment content
        isReply:
          type: boolean
          readOnly: true
          description: Whether this comment is a reply to another comment
        parent:
          type: integer
          readOnly: true
          nullable: true
        depthLevel:
          type: string
          readOnly: true
          description: Nesting level in comment hierarchy
        hasReplies:
          type: boolean
          readOnly: true
          description: Whether this comment has replies
        commentUrl:
          type: string
          readOnly: true
          description: URL to view this comment
        isApproved:
          type: boolean
          readOnly: true
        isEdited:
          type: boolean
          readOnly: true
          description: Whether this comment has been edited
        likesCount:
          type: integer
          readOnly: true
        repliesCount:
          type: integer
          readOnly: true
        userHasLiked:
          type: boolean
          readOnly: true
          description: Whether the current user has liked this comment
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - commentUrl
      - contentPreview
      - createdAt
      - depthLevel
      - hasReplies
      - id
      - isApproved
      - isEdited
      - isReply
      - likesCount
      - parent
      - postSlug
      - postTitle
      - repliesCount
      - translations
      - updatedAt
      - user
      - userHasLiked
      - uuid
    BlogCommentMyCommentRequest:
      type: object
      properties:
        post:
          type: integer
          description: Blog post ID to find comment for
      required:
      - post
    BlogCommentWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
        user:
          type: integer
        post:
          type: integer
        parent:
          type: integer
          nullable: true
      required:
      - post
      - translations
    BlogPost:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        likes:
          type: array
          items:
            type: integer
        category:
          type: integer
        tags:
          type: array
          items:
            type: integer
        author:
          type: integer
        featured:
          type: boolean
        viewCount:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        publishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        isVisible:
          type: boolean
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        commentsCount:
          type: integer
          readOnly: true
        tagsCount:
          type: integer
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
      required:
      - absoluteUrl
      - author
      - category
      - commentsCount
      - createdAt
      - id
      - isVisible
      - likes
      - likesCount
      - mainImagePath
      - publishedAt
      - slug
      - tags
      - tagsCount
      - translations
      - updatedAt
      - uuid
    BlogPostLikedPostsRequest:
      type: object
      properties:
        postIds:
          type: array
          items:
            type: integer
          description: List of post IDs to check for likes
      required:
      - postIds
    BlogPostLikedPostsResponse:
      type: object
      properties:
        postIds:
          type: array
          items:
            type: integer
          description: List of liked post IDs
      required:
      - postIds
    BlogPostMeiliSearchResponse:
      type: object
      properties:
        limit:
          type: integer
        offset:
          type: integer
        estimatedTotalHits:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogPostMeiliSearchResult'
      required:
      - estimatedTotalHits
      - limit
      - offset
      - results
    BlogPostMeiliSearchResult:
      type: object
      properties:
        id:
          type: integer
        languageCode:
          type: string
        title:
          type: string
        subtitle:
          type: string
        body:
          type: string
        master:
          type: integer
        absoluteUrl:
          type: string
        mainImagePath:
          type: string
        matchesPosition: {}
        rankingScore:
          type: number
          format: double
          nullable: true
        formatted: {}
      required:
      - absoluteUrl
      - body
      - formatted
      - id
      - languageCode
      - mainImagePath
      - master
      - matchesPosition
      - rankingScore
      - subtitle
      - title
    BlogPostWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        tags:
          type: array
          items:
            type: integer
        author:
          type: integer
        featured:
          type: boolean
        isPublished:
          type: boolean
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
      required:
      - author
      - category
      - slug
      - translations
    BlogTagDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        postsCount:
          type: string
          readOnly: true
          description: Number of blog posts using this tag
        tagUrl:
          type: string
          readOnly: true
          description: URL to view this tag
        popularityScore:
          type: string
          readOnly: true
          description: Popularity score based on usage and activity
        recentUsage:
          type: integer
          readOnly: true
          description: Number of times used in last 30 days
        isTrending:
          type: boolean
          readOnly: true
          description: Whether this tag is currently trending
        usageFrequency:
          type: string
          readOnly: true
          description: Usage frequency classification
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        recentPosts:
          type: array
          items: {}
          readOnly: true
          description: Recent blog posts using this tag
        relatedTags:
          type: array
          items: {}
          readOnly: true
          description: Tags that are commonly used together with this tag
        usageStatistics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed usage statistics for this tag
        tagPerformance:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Performance metrics for this tag
      required:
      - createdAt
      - id
      - isTrending
      - popularityScore
      - postsCount
      - recentPosts
      - recentUsage
      - relatedTags
      - sortOrder
      - tagPerformance
      - tagUrl
      - translations
      - updatedAt
      - usageFrequency
      - usageStatistics
      - uuid
    BlogTagList:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        postsCount:
          type: string
          readOnly: true
          description: Number of blog posts using this tag
        tagUrl:
          type: string
          readOnly: true
          description: URL to view this tag
        popularityScore:
          type: string
          readOnly: true
          description: Popularity score based on usage and activity
        recentUsage:
          type: integer
          readOnly: true
          description: Number of times used in last 30 days
        isTrending:
          type: boolean
          readOnly: true
          description: Whether this tag is currently trending
        usageFrequency:
          type: string
          readOnly: true
          description: Usage frequency classification
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - isTrending
      - popularityScore
      - postsCount
      - recentUsage
      - sortOrder
      - tagUrl
      - translations
      - updatedAt
      - usageFrequency
      - uuid
    BlogTagWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
      required:
      - sortOrder
      - translations
    Cart:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        user:
          type: integer
          readOnly: true
        sessionKey:
          type: string
          readOnly: true
        cartSummary:
          type: string
          readOnly: true
          description: Brief summary of cart contents
        customerInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Customer information
        cartStatus:
          type: string
          readOnly: true
          description: Current status of the cart
        valueCategory:
          type: string
          readOnly: true
          description: Cart value category for analytics
        urgencyLevel:
          type: string
          readOnly: true
          description: Urgency level based on cart age and activity
        conversionPotential:
          type: string
          readOnly: true
          description: Estimated conversion potential
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalDiscountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalVatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalItems:
          oneOf:
          - type: integer
          - enum:
            - 0
            type: integer
          readOnly: true
        totalItemsUnique:
          type: integer
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        lastActivity:
          type: string
          format: date-time
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemDetail'
          readOnly: true
        shippingEstimate:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Estimated shipping cost and delivery information
        recommendations:
          type: array
          items: {}
          readOnly: true
          description: Product recommendations based on cart contents
        cartAnalytics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed cart analytics
        pricingBreakdown:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Complete pricing breakdown
        abandonmentRisk:
          type: string
          readOnly: true
          description: Risk assessment for cart abandonment
        cartItems:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          readOnly: true
      required:
      - abandonmentRisk
      - cartAnalytics
      - cartItems
      - cartStatus
      - cartSummary
      - conversionPotential
      - createdAt
      - customerInfo
      - id
      - items
      - lastActivity
      - pricingBreakdown
      - recommendations
      - sessionKey
      - shippingEstimate
      - totalDiscountValue
      - totalItems
      - totalItemsUnique
      - totalPrice
      - totalVatValue
      - updatedAt
      - urgencyLevel
      - user
      - uuid
      - valueCategory
    CartItem:
      type: object
      properties:
        cart:
          type: integer
          readOnly: true
        id:
          type: integer
          readOnly: true
        productInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Essential product information
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        itemSummary:
          type: string
          readOnly: true
          description: Summary of this cart item
        savingsInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Savings and discount information
        availabilityStatus:
          type: string
          readOnly: true
          description: Product availability status
        weightInfo:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
          description: Weight information for shipping calculations
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        priceSavePercent:
          type: number
          format: double
          readOnly: true
        discountPercent:
          type: number
          format: double
          readOnly: true
        vatPercent:
          type: number
          format: double
          readOnly: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalDiscountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/ProductList'
          readOnly: true
        cartId:
          type: integer
          readOnly: true
        itemAnalytics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Analytics information for this cart item
        recommendations:
          type: array
          items: {}
          readOnly: true
          description: Related products that might interest the customer
        pricingBreakdown:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed pricing breakdown
      required:
      - availabilityStatus
      - cart
      - cartId
      - createdAt
      - discountPercent
      - discountValue
      - finalPrice
      - id
      - itemAnalytics
      - itemSummary
      - price
      - priceSavePercent
      - pricingBreakdown
      - product
      - productInfo
      - recommendations
      - savingsInfo
      - totalDiscountValue
      - totalPrice
      - updatedAt
      - uuid
      - vatPercent
      - vatValue
      - weightInfo
    CartItemCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cart:
          type: integer
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
      required:
      - cart
      - id
      - product
    CartItemDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        productInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Essential product information
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
        itemSummary:
          type: string
          readOnly: true
          description: Summary of this cart item
        savingsInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Savings and discount information
        availabilityStatus:
          type: string
          readOnly: true
          description: Product availability status
        weightInfo:
          type: object
          additionalProperties: {}
          nullable: true
          readOnly: true
          description: Weight information for shipping calculations
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        priceSavePercent:
          type: number
          format: double
          readOnly: true
        discountPercent:
          type: number
          format: double
          readOnly: true
        vatPercent:
          type: number
          format: double
          readOnly: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalDiscountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        product:
          allOf:
          - $ref: '#/components/schemas/ProductList'
          readOnly: true
        cartId:
          type: integer
          readOnly: true
        itemAnalytics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Analytics information for this cart item
        recommendations:
          type: array
          items: {}
          readOnly: true
          description: Related products that might interest the customer
        pricingBreakdown:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed pricing breakdown
      required:
      - availabilityStatus
      - cartId
      - createdAt
      - discountPercent
      - discountValue
      - finalPrice
      - id
      - itemAnalytics
      - itemSummary
      - price
      - priceSavePercent
      - pricingBreakdown
      - product
      - productInfo
      - recommendations
      - savingsInfo
      - totalDiscountValue
      - totalPrice
      - updatedAt
      - uuid
      - vatPercent
      - vatValue
      - weightInfo
    CartWrite:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        sessionKey:
          type: string
          description: Session key for guest users
          maxLength: 40
    CategoryEnum:
      enum:
      - marketing
      - product
      - account
      - system
      - newsletter
      - promotional
      - other
      type: string
      description: |-
        * `marketing` - Marketing Campaigns
        * `product` - Product Updates
        * `account` - Account Updates
        * `system` - System Notifications
        * `newsletter` - Newsletter
        * `promotional` - Promotional
        * `other` - Other
    Contact:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 254
        message:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - email
      - id
      - message
      - name
      - updatedAt
      - uuid
    Country:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha2:
          type: string
          title: Country Code Alpha 2
          pattern: ^[A-Z]{2}$
          maxLength: 2
        alpha3:
          type: string
          title: Country Code Alpha 3
          pattern: ^[A-Z]{3}$
          maxLength: 3
        name:
          type: string
          readOnly: true
          description: Country name in current language
        regionInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Geographic region information
        usageStats:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Usage statistics for this country
        shippingInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Shipping and delivery information
        phoneDisplay:
          type: string
          nullable: true
          readOnly: true
          description: Formatted phone code
        isoCc:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: ISO Country Code
        phoneCode:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        regions:
          type: array
          items: {}
          readOnly: true
          description: Administrative regions/states
        addressFormat:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Address formatting rules
        validationRules:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Country-specific validation rules
        localization:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Localization preferences
        businessInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Business and commerce information
        popularCities:
          type: array
          items: {}
          readOnly: true
          description: Most popular cities for orders
        analytics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed country analytics
      required:
      - addressFormat
      - alpha2
      - alpha3
      - analytics
      - businessInfo
      - createdAt
      - localization
      - mainImagePath
      - name
      - phoneDisplay
      - popularCities
      - regionInfo
      - regions
      - shippingInfo
      - sortOrder
      - translations
      - updatedAt
      - usageStats
      - uuid
      - validationRules
    DocumentTypeEnum:
      enum:
      - RECEIPT
      - INVOICE
      - PROFORMA
      - SHIPPING_LABEL
      - RETURN_LABEL
      - CREDIT_NOTE
      type: string
      description: |-
        * `RECEIPT` - Receipt
        * `INVOICE` - Invoice
        * `PROFORMA` - Proforma Invoice
        * `SHIPPING_LABEL` - Shipping Label
        * `RETURN_LABEL` - Return Label
        * `CREDIT_NOTE` - Credit Note
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
        error:
          type: string
      required:
      - detail
    FloorEnum:
      enum:
      - BASEMENT
      - GROUND_FLOOR
      - FIRST_FLOOR
      - SECOND_FLOOR
      - THIRD_FLOOR
      - FOURTH_FLOOR
      - FIFTH_FLOOR
      - SIXTH_FLOOR_PLUS
      type: string
      description: |-
        * `BASEMENT` - Basement
        * `GROUND_FLOOR` - Ground Floor
        * `FIRST_FLOOR` - First Floor
        * `SECOND_FLOOR` - Second Floor
        * `THIRD_FLOOR` - Third Floor
        * `FOURTH_FLOOR` - Fourth Floor
        * `FIFTH_FLOOR` - Fifth Floor
        * `SIXTH_FLOOR_PLUS` - Sixth Floor Plus
    HealthCheckResponse:
      type: object
      properties:
        database:
          type: boolean
        redis:
          type: boolean
        celery:
          type: boolean
      required:
      - celery
      - database
      - redis
    LocationTypeEnum:
      enum:
      - HOME
      - OFFICE
      - OTHER
      type: string
      description: |-
        * `HOME` - Αρχική
        * `OFFICE` - Office
        * `OTHER` - Other
    Notification:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                message:
                  type: string
        id:
          type: integer
          readOnly: true
        title:
          type: string
          readOnly: true
          description: Notification title in current language
        message:
          type: string
          readOnly: true
          description: Notification message in current language
        link:
          type: string
          format: uri
          maxLength: 200
        kind:
          $ref: '#/components/schemas/NotificationKindEnum'
        notificationStatus:
          type: string
          readOnly: true
          description: Current status of the notification
        urgencyLevel:
          type: string
          readOnly: true
          description: Urgency level based on kind and expiry
        timeInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Time-related information
        isActionable:
          type: boolean
          readOnly: true
          description: Whether this notification requires action
        displayPriority:
          type: integer
          readOnly: true
          description: Display priority for UI ordering
        expiryDate:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        engagementMetrics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Engagement and interaction metrics
        targetingInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Information about notification targeting
        contentAnalysis:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Analysis of notification content
        deliveryStatus:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Delivery and read status information
        relatedNotifications:
          type: array
          items: {}
          readOnly: true
          description: Related or similar notifications
      required:
      - contentAnalysis
      - createdAt
      - deliveryStatus
      - displayPriority
      - engagementMetrics
      - id
      - isActionable
      - message
      - notificationStatus
      - relatedNotifications
      - targetingInfo
      - timeInfo
      - title
      - translations
      - updatedAt
      - urgencyLevel
      - uuid
    NotificationCountResponse:
      type: object
      properties:
        count:
          type: integer
          description: Number of unseen notifications
      required:
      - count
    NotificationInfoResponse:
      type: object
      properties:
        info:
          type: string
          description: Information message about notifications
      required:
      - info
    NotificationKindEnum:
      enum:
      - ERROR
      - SUCCESS
      - INFO
      - WARNING
      - DANGER
      type: string
      description: |-
        * `ERROR` - Error
        * `SUCCESS` - Success
        * `INFO` - Info
        * `WARNING` - Warning
        * `DANGER` - Danger
    NotificationSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation was successful
      required:
      - success
    NotificationUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        notification:
          type: integer
        seen:
          type: boolean
        seenAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - notification
      - updatedAt
      - user
      - uuid
    NotificationUserAction:
      type: object
      properties:
        notificationUserIds:
          type: array
          items:
            type: integer
          description: List of notification user IDs to mark as seen/unseen
      required:
      - notificationUserIds
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        customerName:
          type: string
          readOnly: true
          description: Full name of the customer
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        statusDisplay:
          type: string
          readOnly: true
        itemsCount:
          type: integer
          readOnly: true
          description: Number of items in the order
        orderValueCategory:
          type: string
          readOnly: true
          description: Order value category (low/medium/high/premium)
        orderAge:
          type: string
          readOnly: true
          description: How long ago this order was placed
        canBeModified:
          type: boolean
          readOnly: true
          description: Whether this order can still be modified
        deliveryUrgency:
          type: string
          readOnly: true
          description: Delivery urgency level
        orderSummary:
          type: string
          readOnly: true
          description: Brief summary of the order
        paymentInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Payment status and method information
        shippingInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Basic shipping information
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceItems:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceExtra:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        statusUpdatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        canBeCanceled:
          type: boolean
          readOnly: true
        isPaid:
          type: boolean
          readOnly: true
      required:
      - canBeCanceled
      - canBeModified
      - createdAt
      - customerName
      - deliveryUrgency
      - id
      - isPaid
      - itemsCount
      - orderAge
      - orderSummary
      - orderValueCategory
      - paidAmount
      - paymentInfo
      - shippingInfo
      - shippingPrice
      - statusDisplay
      - statusUpdatedAt
      - totalPriceExtra
      - totalPriceItems
      - updatedAt
      - uuid
    OrderDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        customerName:
          type: string
          readOnly: true
          description: Full name of the customer
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        statusDisplay:
          type: string
          readOnly: true
        itemsCount:
          type: integer
          readOnly: true
          description: Number of items in the order
        orderValueCategory:
          type: string
          readOnly: true
          description: Order value category (low/medium/high/premium)
        orderAge:
          type: string
          readOnly: true
          description: How long ago this order was placed
        canBeModified:
          type: boolean
          readOnly: true
          description: Whether this order can still be modified
        deliveryUrgency:
          type: string
          readOnly: true
          description: Delivery urgency level
        orderSummary:
          type: string
          readOnly: true
          description: Brief summary of the order
        paymentInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Payment status and method information
        shippingInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Basic shipping information
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceItems:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceExtra:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        statusUpdatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        canBeCanceled:
          type: boolean
          readOnly: true
        isPaid:
          type: boolean
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          readOnly: true
        country:
          allOf:
          - $ref: '#/components/schemas/Country'
          readOnly: true
          description: Country information
        region:
          allOf:
          - $ref: '#/components/schemas/Region'
          readOnly: true
          description: Region information
        payWay:
          allOf:
          - $ref: '#/components/schemas/PayWay'
          readOnly: true
          description: Payment method information
        customerDetails:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Complete customer information
        shippingAddress:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Complete shipping address
        orderTimeline:
          type: array
          items: {}
          readOnly: true
          description: Order status timeline and history
        pricingBreakdown:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed pricing breakdown
        trackingDetails:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Tracking and shipping details
        orderMetrics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Order performance metrics
        relatedOrders:
          type: array
          items: {}
          readOnly: true
          description: Other orders from the same customer
        phone:
          type: string
          readOnly: true
        mobilePhone:
          type: string
          readOnly: true
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        paymentId:
          type: string
          maxLength: 255
        paymentStatus:
          oneOf:
          - $ref: '#/components/schemas/PaymentStatusEnum'
          - $ref: '#/components/schemas/BlankEnum'
        paymentMethod:
          type: string
          maxLength: 50
        trackingNumber:
          type: string
          maxLength: 255
        shippingCarrier:
          type: string
          maxLength: 255
        customerFullName:
          type: string
          readOnly: true
        isCompleted:
          type: boolean
          readOnly: true
        isCanceled:
          type: boolean
          readOnly: true
        fullAddress:
          type: string
          readOnly: true
      required:
      - canBeCanceled
      - canBeModified
      - country
      - createdAt
      - customerDetails
      - customerFullName
      - customerName
      - deliveryUrgency
      - fullAddress
      - id
      - isCanceled
      - isCompleted
      - isPaid
      - items
      - itemsCount
      - mobilePhone
      - orderAge
      - orderMetrics
      - orderSummary
      - orderTimeline
      - orderValueCategory
      - paidAmount
      - payWay
      - paymentInfo
      - phone
      - pricingBreakdown
      - region
      - relatedOrders
      - shippingAddress
      - shippingInfo
      - shippingPrice
      - statusDisplay
      - statusUpdatedAt
      - totalPriceExtra
      - totalPriceItems
      - trackingDetails
      - updatedAt
      - uuid
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        originalQuantity:
          type: integer
          readOnly: true
          nullable: true
        isRefunded:
          type: boolean
          readOnly: true
        refundedQuantity:
          type: integer
          readOnly: true
        netQuantity:
          type: integer
          readOnly: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        totalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        refundedAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        netPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        notes:
          type: string
      required:
      - createdAt
      - id
      - isRefunded
      - netPrice
      - netQuantity
      - originalQuantity
      - price
      - product
      - refundedAmount
      - refundedQuantity
      - sortOrder
      - totalPrice
      - updatedAt
      - uuid
    OrderItemCreateUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        notes:
          type: string
      required:
      - id
      - product
    OrderList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        customerName:
          type: string
          readOnly: true
          description: Full name of the customer
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        statusDisplay:
          type: string
          readOnly: true
        itemsCount:
          type: integer
          readOnly: true
          description: Number of items in the order
        orderValueCategory:
          type: string
          readOnly: true
          description: Order value category (low/medium/high/premium)
        orderAge:
          type: string
          readOnly: true
          description: How long ago this order was placed
        canBeModified:
          type: boolean
          readOnly: true
          description: Whether this order can still be modified
        deliveryUrgency:
          type: string
          readOnly: true
          description: Delivery urgency level
        orderSummary:
          type: string
          readOnly: true
          description: Brief summary of the order
        paymentInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Payment status and method information
        shippingInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Basic shipping information
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceItems:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        totalPriceExtra:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        statusUpdatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        canBeCanceled:
          type: boolean
          readOnly: true
        isPaid:
          type: boolean
          readOnly: true
      required:
      - canBeCanceled
      - canBeModified
      - createdAt
      - customerName
      - deliveryUrgency
      - id
      - isPaid
      - itemsCount
      - orderAge
      - orderSummary
      - orderValueCategory
      - paidAmount
      - paymentInfo
      - shippingInfo
      - shippingPrice
      - statusDisplay
      - statusUpdatedAt
      - totalPriceExtra
      - totalPriceItems
      - updatedAt
      - uuid
    OrderStatusEnum:
      enum:
      - PENDING
      - PROCESSING
      - SHIPPED
      - DELIVERED
      - COMPLETED
      - CANCELED
      - RETURNED
      - REFUNDED
      type: string
      description: |-
        * `PENDING` - Pending
        * `PROCESSING` - Processing
        * `SHIPPED` - Shipped
        * `DELIVERED` - Delivered
        * `COMPLETED` - Completed
        * `CANCELED` - Canceled
        * `RETURNED` - Returned
        * `REFUNDED` - Refunded
    OrderWrite:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        country:
          type: string
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          title: Region Code
          nullable: true
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        payWay:
          type: integer
          nullable: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        zipcode:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        phone:
          type: string
        mobilePhone:
          type: string
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        customerNotes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreateUpdate'
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        paymentId:
          type: string
        paymentStatus:
          type: string
        paymentMethod:
          type: string
        trackingNumber:
          type: string
          maxLength: 255
        shippingCarrier:
          type: string
          maxLength: 255
      required:
      - city
      - email
      - firstName
      - items
      - lastName
      - phone
      - shippingPrice
      - street
      - streetNumber
      - zipcode
    PaginatedAuthenticationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Authentication'
    PaginatedBlogAuthorListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogAuthorList'
    PaginatedBlogCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogCategory'
    PaginatedBlogCommentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogComment'
    PaginatedBlogCommentListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogCommentList'
    PaginatedBlogPostList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogPost'
    PaginatedBlogTagListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BlogTagList'
    PaginatedCartItemList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    PaginatedCountryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Country'
    PaginatedNotificationUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/NotificationUser'
    PaginatedOrderItemList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
    PaginatedOrderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    PaginatedOrderListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderList'
    PaginatedPayWayList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PayWay'
    PaginatedProductCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductCategory'
    PaginatedProductFavouriteList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductFavourite'
    PaginatedProductImageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
    PaginatedProductListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductList'
    PaginatedProductReviewList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductReview'
    PaginatedRegionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Region'
    PaginatedSlideList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Slide'
    PaginatedSliderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Slider'
    PaginatedSubscriptionTopicList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionTopic'
    PaginatedTagList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    PaginatedTipList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tip'
    PaginatedUserAddressList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserAddress'
    PaginatedUserSubscriptionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserSubscription'
    PaginatedVatList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Vat'
    PatchedAuthentication:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
          title: Id
        email:
          type: string
          format: email
          title: Διεύθυνση ηλεκτρονικού ταχυδρομείου
          maxLength: 254
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        id:
          type: integer
          readOnly: true
        username:
          type: string
          nullable: true
          title: Όνομα χρήστη
          description: Required. 30 characters or fewer.Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 30
        image:
          type: string
          format: uri
          nullable: true
          title: Εικόνα
        phone:
          type: string
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        address:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        country:
          type: string
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          title: Region Code
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
        twitter:
          type: string
          format: uri
          title: Twitter Profile
          maxLength: 200
        linkedin:
          type: string
          format: uri
          title: LinkedIn Profile
          maxLength: 200
        facebook:
          type: string
          format: uri
          title: Facebook Profile
          maxLength: 200
        instagram:
          type: string
          format: uri
          title: Instagram Profile
          maxLength: 200
        website:
          type: string
          format: uri
          maxLength: 200
        youtube:
          type: string
          format: uri
          title: Youtube Profile
          maxLength: 200
        github:
          type: string
          format: uri
          title: Github Profile
          maxLength: 200
        bio:
          type: string
        isActive:
          type: boolean
          readOnly: true
          title: Active
        isStaff:
          type: boolean
          readOnly: true
          title: Staff
        isSuperuser:
          type: boolean
          readOnly: true
          title: Κατάσταση υπερχρήστη
          description: Υποδηλώνει ότι ο συγκεκριμένος χρήστης έχει όλα τα δικαιώματα
            χωρίς να χρειάζεται να τα παραχωρήσετε ξεχωριστά.
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
    PatchedBlogAuthorWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                bio:
                  type: string
            en:
              type: object
              properties:
                bio:
                  type: string
            de:
              type: object
              properties:
                bio:
                  type: string
        user:
          type: integer
        website:
          type: string
          format: uri
          maxLength: 200
    PatchedBlogCategoryWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
          title: Εικόνα
    PatchedBlogCommentWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                content:
                  type: string
            en:
              type: object
              properties:
                content:
                  type: string
            de:
              type: object
              properties:
                content:
                  type: string
        user:
          type: integer
        post:
          type: integer
        parent:
          type: integer
          nullable: true
    PatchedBlogPostWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                subtitle:
                  type: string
                body:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        tags:
          type: array
          items:
            type: integer
        author:
          type: integer
        featured:
          type: boolean
        isPublished:
          type: boolean
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
    PatchedBlogTagWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
    PatchedCartItemCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cart:
          type: integer
        product:
          type: integer
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
    PatchedCartWrite:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        sessionKey:
          type: string
          description: Session key for guest users
          maxLength: 40
    PatchedCountry:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha2:
          type: string
          title: Country Code Alpha 2
          pattern: ^[A-Z]{2}$
          maxLength: 2
        alpha3:
          type: string
          title: Country Code Alpha 3
          pattern: ^[A-Z]{3}$
          maxLength: 3
        name:
          type: string
          readOnly: true
          description: Country name in current language
        regionInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Geographic region information
        usageStats:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Usage statistics for this country
        shippingInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Shipping and delivery information
        phoneDisplay:
          type: string
          nullable: true
          readOnly: true
          description: Formatted phone code
        isoCc:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: ISO Country Code
        phoneCode:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
        regions:
          type: array
          items: {}
          readOnly: true
          description: Administrative regions/states
        addressFormat:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Address formatting rules
        validationRules:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Country-specific validation rules
        localization:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Localization preferences
        businessInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Business and commerce information
        popularCities:
          type: array
          items: {}
          readOnly: true
          description: Most popular cities for orders
        analytics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed country analytics
    PatchedNotificationUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        notification:
          type: integer
        seen:
          type: boolean
        seenAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PatchedOrderWrite:
      type: object
      properties:
        user:
          type: integer
          nullable: true
        country:
          type: string
          title: Country Code Alpha 2
          nullable: true
        region:
          type: string
          title: Region Code
          nullable: true
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        payWay:
          type: integer
          nullable: true
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        zipcode:
          type: string
          maxLength: 255
        place:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        phone:
          type: string
        mobilePhone:
          type: string
        paidAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        customerNotes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreateUpdate'
        shippingPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        documentType:
          $ref: '#/components/schemas/DocumentTypeEnum'
        paymentId:
          type: string
        paymentStatus:
          type: string
        paymentMethod:
          type: string
        trackingNumber:
          type: string
          maxLength: 255
        shippingCarrier:
          type: string
          maxLength: 255
    PatchedPayWay:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
          description: Payment method name in current language
        description:
          type: string
          readOnly: true
          description: Payment method description in current language
        active:
          type: boolean
        paymentInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Payment method information summary
        usageStats:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Usage statistics for this payment method
        availabilityStatus:
          type: string
          readOnly: true
          description: Current availability status
        costDisplay:
          type: string
          readOnly: true
          description: Formatted cost information
        providerInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Payment provider information
        cost:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        freeForOrderAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        icon:
          type: string
          format: uri
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        iconAbsoluteUrl:
          type: string
          readOnly: true
        iconFilename:
          type: string
          readOnly: true
        providerCode:
          type: string
          description: Code used to identify the payment provider in the system (e.g.,
            'stripe', 'paypal')
          maxLength: 50
        isOnlinePayment:
          type: boolean
          description: Whether this payment method is processed online
        requiresConfirmation:
          type: boolean
          description: Whether this payment method requires manual confirmation (e.g.,
            bank transfer)
        configurationDetails:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Payment method configuration
        analytics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed analytics and performance metrics
        integrationInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Integration and technical details
        customerFeedback:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Customer satisfaction metrics
        financialMetrics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Financial performance metrics
        complianceInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Compliance and regulatory information
        configuration:
          nullable: true
          title: Provider Configuration
          description: Provider-specific configuration (API keys, webhooks, etc.)
    PatchedProductCategory:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        children:
          oneOf:
          - type: object
            additionalProperties: {}
          - type: array
            items: {}
          readOnly: true
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        categoryMenuImageOnePath:
          type: string
          readOnly: true
        categoryMenuImageTwoPath:
          type: string
          readOnly: true
        categoryMenuMainBannerPath:
          type: string
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
        recursiveProductCount:
          type: integer
          readOnly: true
    PatchedProductFavourite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        product:
          type: integer
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PatchedProductImage:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        image:
          type: string
          format: uri
          title: Εικόνα
        isMain:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
    PatchedProductReview:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                comment:
                  type: string
            en:
              type: object
              properties:
                comment:
                  type: string
            de:
              type: object
              properties:
                comment:
                  type: string
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        user:
          type: integer
        rate:
          allOf:
          - $ref: '#/components/schemas/RateEnum'
          minimum: 0
          maximum: 32767
        status:
          $ref: '#/components/schemas/ProductReviewStatusEnum'
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        publishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        isVisible:
          type: boolean
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PatchedProductWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vat:
          type: integer
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        active:
          type: boolean
    PatchedRegion:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha:
          type: string
          title: Region Code
          maxLength: 10
        name:
          type: string
          readOnly: true
          description: Region name in current language
        country:
          type: string
          title: Country Code Alpha 2
        regionInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Additional region information
        usageStats:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Usage statistics for this region
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        geographicDetails:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Geographic and administrative details
        deliveryInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Delivery and shipping information
    PatchedSlide:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
        id:
          type: integer
          readOnly: true
        slider:
          type: integer
        discount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        showButton:
          type: boolean
        dateStart:
          type: string
          format: date-time
        dateEnd:
          type: string
          format: date-time
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
    PatchedSlider:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
        video:
          type: string
          format: uri
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
    PatchedSubscriptionTopic:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        slug:
          type: string
          description: Unique identifier for the topic (e.g., 'weekly-newsletter')
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          allOf:
          - $ref: '#/components/schemas/CategoryEnum'
          description: |-
            Category of the subscription topic

            * `marketing` - Marketing Campaigns
            * `product` - Product Updates
            * `account` - Account Updates
            * `system` - System Notifications
            * `newsletter` - Newsletter
            * `promotional` - Promotional
            * `other` - Other
        isActive:
          type: boolean
          title: Active
          description: Whether this topic is currently available for subscription
        isDefault:
          type: boolean
          title: Default Subscription
          description: Whether new users are automatically subscribed to this topic
        requiresConfirmation:
          type: boolean
          description: Whether subscription to this topic requires email confirmation
        subscriberCount:
          type: integer
          description: |-
            Get the count of active subscribers for a topic.

            Handles both model instances and dictionaries.
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    PatchedTip:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
        kind:
          $ref: '#/components/schemas/TipKindEnum'
        icon:
          type: string
          format: uri
          nullable: true
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PatchedUserAddressUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
        mobilePhone:
          type: string
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
          readOnly: true
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
    PatchedUserSubscription:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
          title: Χρήστης
        topic:
          type: integer
        topicDetails:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTopic'
          readOnly: true
        status:
          $ref: '#/components/schemas/UserSubscriptionStatusEnum'
        subscribedAt:
          type: string
          format: date-time
          readOnly: true
        unsubscribedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        metadata:
          description: Additional subscription preferences or data
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    PatchedVat:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        value:
          type: number
          format: double
          maximum: 100.0
          minimum: 0.0
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
    PayWay:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                instructions:
                  type: string
        id:
          type: integer
          readOnly: true
        name:
          type: string
          readOnly: true
          description: Payment method name in current language
        description:
          type: string
          readOnly: true
          description: Payment method description in current language
        active:
          type: boolean
        paymentInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Payment method information summary
        usageStats:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Usage statistics for this payment method
        availabilityStatus:
          type: string
          readOnly: true
          description: Current availability status
        costDisplay:
          type: string
          readOnly: true
          description: Formatted cost information
        providerInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Payment provider information
        cost:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        freeForOrderAmount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        icon:
          type: string
          format: uri
          nullable: true
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        iconAbsoluteUrl:
          type: string
          readOnly: true
        iconFilename:
          type: string
          readOnly: true
        providerCode:
          type: string
          description: Code used to identify the payment provider in the system (e.g.,
            'stripe', 'paypal')
          maxLength: 50
        isOnlinePayment:
          type: boolean
          description: Whether this payment method is processed online
        requiresConfirmation:
          type: boolean
          description: Whether this payment method requires manual confirmation (e.g.,
            bank transfer)
        configurationDetails:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Payment method configuration
        analytics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed analytics and performance metrics
        integrationInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Integration and technical details
        customerFeedback:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Customer satisfaction metrics
        financialMetrics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Financial performance metrics
        complianceInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Compliance and regulatory information
        configuration:
          nullable: true
          title: Provider Configuration
          description: Provider-specific configuration (API keys, webhooks, etc.)
      required:
      - analytics
      - availabilityStatus
      - complianceInfo
      - configurationDetails
      - cost
      - costDisplay
      - createdAt
      - customerFeedback
      - description
      - financialMetrics
      - freeForOrderAmount
      - iconAbsoluteUrl
      - iconFilename
      - id
      - integrationInfo
      - name
      - paymentInfo
      - providerInfo
      - sortOrder
      - translations
      - updatedAt
      - usageStats
      - uuid
    PaymentStatusEnum:
      enum:
      - PENDING
      - PROCESSING
      - COMPLETED
      - FAILED
      - REFUNDED
      - PARTIALLY_REFUNDED
      - CANCELED
      type: string
      description: |-
        * `PENDING` - Pending
        * `PROCESSING` - Processing
        * `COMPLETED` - Completed
        * `FAILED` - Failed
        * `REFUNDED` - Refunded
        * `PARTIALLY_REFUNDED` - Partially Refunded
        * `CANCELED` - Canceled
    PaymentStatusResponse:
      type: object
      properties:
        orderId:
          type: integer
        paymentStatus:
          type: string
        isPaid:
          type: boolean
        statusDetails:
          type: object
          additionalProperties: {}
      required:
      - isPaid
      - orderId
      - paymentStatus
      - statusDetails
    ProcessPaymentRequest:
      type: object
      properties:
        payWayId:
          type: integer
          description: ID of the payment method to use
        paymentData:
          type: object
          additionalProperties: {}
          description: Additional payment data required by the payment provider
      required:
      - payWayId
    ProcessPaymentResponse:
      type: object
      properties:
        detail:
          type: string
        orderId:
          type: integer
        paymentStatus:
          type: string
        paymentId:
          type: string
        requiresConfirmation:
          type: boolean
        isOnlinePayment:
          type: boolean
        providerData:
          type: object
          additionalProperties: {}
      required:
      - detail
      - isOnlinePayment
      - orderId
      - paymentId
      - paymentStatus
      - providerData
      - requiresConfirmation
    Product:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        categoryName:
          type: string
          readOnly: true
          description: Name of the product category
        categorySlug:
          type: string
          readOnly: true
          description: Slug of the product category
        productUrl:
          type: string
          readOnly: true
          description: URL to view this product
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        isOnSale:
          type: boolean
          readOnly: true
          description: Whether this product is currently on sale
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        stockStatus:
          type: string
          readOnly: true
          description: Stock availability status
        popularityScore:
          type: number
          format: double
          readOnly: true
          description: Popularity score based on views and reviews
        priceRangeCategory:
          type: string
          readOnly: true
          description: Price range category for filtering
        ratingCategory:
          type: string
          readOnly: true
          description: Rating category based on review average
        isNew:
          type: boolean
          readOnly: true
          description: Whether this product is newly added (last 30 days)
        discountBadge:
          type: string
          readOnly: true
          description: Discount badge text for display
        mainImagePath:
          type: string
          readOnly: true
        reviewAverage:
          type: number
          format: double
          readOnly: true
        reviewCount:
          type: integer
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        viewCount:
          type: integer
          readOnly: true
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        category:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed category information
        vatInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: VAT information
        relatedProducts:
          type: array
          items: {}
          readOnly: true
          description: Related products in the same category
        recentReviews:
          type: array
          items: {}
          readOnly: true
          description: Recent customer reviews
        productImages:
          type: array
          items: {}
          readOnly: true
          description: All product images
        pricingBreakdown:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed pricing breakdown
        inventoryInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Inventory and stock information
        seoData:
          type: object
          additionalProperties: {}
          readOnly: true
          description: SEO metadata for this product
        productTags:
          type: array
          items: {}
          readOnly: true
          description: Tags associated with this product
        engagementMetrics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Engagement metrics for this product
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        absoluteUrl:
          type: string
          readOnly: true
      required:
      - absoluteUrl
      - category
      - categoryName
      - categorySlug
      - createdAt
      - discountBadge
      - discountValue
      - engagementMetrics
      - finalPrice
      - id
      - inventoryInfo
      - isNew
      - isOnSale
      - likesCount
      - mainImagePath
      - popularityScore
      - price
      - priceRangeCategory
      - pricingBreakdown
      - productImages
      - productTags
      - productUrl
      - ratingCategory
      - recentReviews
      - relatedProducts
      - reviewAverage
      - reviewCount
      - seoData
      - slug
      - stockStatus
      - translations
      - updatedAt
      - uuid
      - vatInfo
      - vatValue
      - viewCount
    ProductCategory:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        children:
          oneOf:
          - type: object
            additionalProperties: {}
          - type: array
            items: {}
          readOnly: true
        parent:
          type: integer
          nullable: true
        level:
          type: integer
          readOnly: true
        treeId:
          type: integer
          readOnly: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        categoryMenuImageOnePath:
          type: string
          readOnly: true
        categoryMenuImageTwoPath:
          type: string
          readOnly: true
        categoryMenuMainBannerPath:
          type: string
          readOnly: true
        absoluteUrl:
          type: string
          readOnly: true
        recursiveProductCount:
          type: integer
          readOnly: true
      required:
      - absoluteUrl
      - categoryMenuImageOnePath
      - categoryMenuImageTwoPath
      - categoryMenuMainBannerPath
      - children
      - createdAt
      - id
      - level
      - recursiveProductCount
      - slug
      - translations
      - treeId
      - updatedAt
      - uuid
    ProductDetail:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        categoryName:
          type: string
          readOnly: true
          description: Name of the product category
        categorySlug:
          type: string
          readOnly: true
          description: Slug of the product category
        productUrl:
          type: string
          readOnly: true
          description: URL to view this product
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        isOnSale:
          type: boolean
          readOnly: true
          description: Whether this product is currently on sale
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        stockStatus:
          type: string
          readOnly: true
          description: Stock availability status
        popularityScore:
          type: number
          format: double
          readOnly: true
          description: Popularity score based on views and reviews
        priceRangeCategory:
          type: string
          readOnly: true
          description: Price range category for filtering
        ratingCategory:
          type: string
          readOnly: true
          description: Rating category based on review average
        isNew:
          type: boolean
          readOnly: true
          description: Whether this product is newly added (last 30 days)
        discountBadge:
          type: string
          readOnly: true
          description: Discount badge text for display
        mainImagePath:
          type: string
          readOnly: true
        reviewAverage:
          type: number
          format: double
          readOnly: true
        reviewCount:
          type: integer
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        viewCount:
          type: integer
          readOnly: true
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        category:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed category information
        vatInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: VAT information
        relatedProducts:
          type: array
          items: {}
          readOnly: true
          description: Related products in the same category
        recentReviews:
          type: array
          items: {}
          readOnly: true
          description: Recent customer reviews
        productImages:
          type: array
          items: {}
          readOnly: true
          description: All product images
        pricingBreakdown:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Detailed pricing breakdown
        inventoryInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Inventory and stock information
        seoData:
          type: object
          additionalProperties: {}
          readOnly: true
          description: SEO metadata for this product
        productTags:
          type: array
          items: {}
          readOnly: true
          description: Tags associated with this product
        engagementMetrics:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Engagement metrics for this product
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        absoluteUrl:
          type: string
          readOnly: true
      required:
      - absoluteUrl
      - category
      - categoryName
      - categorySlug
      - createdAt
      - discountBadge
      - discountValue
      - engagementMetrics
      - finalPrice
      - id
      - inventoryInfo
      - isNew
      - isOnSale
      - likesCount
      - mainImagePath
      - popularityScore
      - price
      - priceRangeCategory
      - pricingBreakdown
      - productImages
      - productTags
      - productUrl
      - ratingCategory
      - recentReviews
      - relatedProducts
      - reviewAverage
      - reviewCount
      - seoData
      - slug
      - stockStatus
      - translations
      - updatedAt
      - uuid
      - vatInfo
      - vatValue
      - viewCount
    ProductFavourite:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        product:
          type: integer
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - product
      - updatedAt
      - user
      - uuid
    ProductFavouriteByProductsRequest:
      type: object
      properties:
        productIds:
          type: array
          items:
            type: integer
          description: List of product IDs to check for favorites
      required:
      - productIds
    ProductImage:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        image:
          type: string
          format: uri
          title: Εικόνα
        isMain:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
      required:
      - createdAt
      - id
      - image
      - mainImagePath
      - product
      - sortOrder
      - translations
      - updatedAt
      - uuid
    ProductList:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        categoryName:
          type: string
          readOnly: true
          description: Name of the product category
        categorySlug:
          type: string
          readOnly: true
          description: Slug of the product category
        productUrl:
          type: string
          readOnly: true
          description: URL to view this product
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        finalPrice:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        discountValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vatValue:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          readOnly: true
        isOnSale:
          type: boolean
          readOnly: true
          description: Whether this product is currently on sale
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        stockStatus:
          type: string
          readOnly: true
          description: Stock availability status
        popularityScore:
          type: number
          format: double
          readOnly: true
          description: Popularity score based on views and reviews
        priceRangeCategory:
          type: string
          readOnly: true
          description: Price range category for filtering
        ratingCategory:
          type: string
          readOnly: true
          description: Rating category based on review average
        isNew:
          type: boolean
          readOnly: true
          description: Whether this product is newly added (last 30 days)
        discountBadge:
          type: string
          readOnly: true
          description: Discount badge text for display
        mainImagePath:
          type: string
          readOnly: true
        reviewAverage:
          type: number
          format: double
          readOnly: true
        reviewCount:
          type: integer
          readOnly: true
        likesCount:
          type: integer
          readOnly: true
        viewCount:
          type: integer
          readOnly: true
        active:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - categoryName
      - categorySlug
      - createdAt
      - discountBadge
      - discountValue
      - finalPrice
      - id
      - isNew
      - isOnSale
      - likesCount
      - mainImagePath
      - popularityScore
      - price
      - priceRangeCategory
      - productUrl
      - ratingCategory
      - reviewAverage
      - reviewCount
      - slug
      - stockStatus
      - translations
      - updatedAt
      - uuid
      - vatValue
      - viewCount
    ProductMeiliSearchResponse:
      type: object
      properties:
        limit:
          type: integer
        offset:
          type: integer
        estimatedTotalHits:
          type: integer
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductMeiliSearchResult'
      required:
      - estimatedTotalHits
      - limit
      - offset
      - results
    ProductMeiliSearchResult:
      type: object
      properties:
        id:
          type: integer
        languageCode:
          type: string
        name:
          type: string
        description:
          type: string
        master:
          type: integer
        absoluteUrl:
          type: string
        mainImagePath:
          type: string
        matchesPosition: {}
        rankingScore:
          type: number
          format: double
          nullable: true
        formatted: {}
      required:
      - absoluteUrl
      - description
      - formatted
      - id
      - languageCode
      - mainImagePath
      - master
      - matchesPosition
      - name
      - rankingScore
    ProductReview:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                comment:
                  type: string
            en:
              type: object
              properties:
                comment:
                  type: string
            de:
              type: object
              properties:
                comment:
                  type: string
        id:
          type: integer
          readOnly: true
        product:
          type: integer
        user:
          type: integer
        rate:
          allOf:
          - $ref: '#/components/schemas/RateEnum'
          minimum: 0
          maximum: 32767
        status:
          $ref: '#/components/schemas/ProductReviewStatusEnum'
        isPublished:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        publishedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        isVisible:
          type: boolean
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - isVisible
      - product
      - publishedAt
      - rate
      - translations
      - updatedAt
      - user
      - uuid
    ProductReviewStatusEnum:
      enum:
      - NEW
      - 'TRUE'
      - 'FALSE'
      type: string
      description: |-
        * `NEW` - New
        * `TRUE` - True
        * `FALSE` - False
    ProductWrite:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          type: integer
        price:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        vat:
          type: integer
        stock:
          type: integer
          maximum: 2147483647
          minimum: 0
        weight:
          type: object
          properties:
            unit:
              type: string
            value:
              type: number
          example:
            unit: kg
            value: 1.0
          nullable: true
        discountPercent:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        seoTitle:
          type: string
          maxLength: 70
        seoDescription:
          type: string
          maxLength: 300
        seoKeywords:
          type: string
          maxLength: 255
        active:
          type: boolean
      required:
      - category
      - price
      - slug
      - translations
      - vat
    RateEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      type: integer
      description: |-
        * `1` - One
        * `2` - Two
        * `3` - Three
        * `4` - Four
        * `5` - Five
        * `6` - Six
        * `7` - Seven
        * `8` - Eight
        * `9` - Nine
        * `10` - Ten
    RefundRequest:
      type: object
      properties:
        amount:
          type: number
          format: double
          maximum: 100000000
          minimum: -100000000
          exclusiveMaximum: true
          exclusiveMinimum: true
          description: Refund amount (optional, defaults to full refund)
        currency:
          type: string
          description: Currency code (required if amount is specified)
          maxLength: 3
    RefundResponse:
      type: object
      properties:
        detail:
          type: string
        orderId:
          type: integer
        paymentStatus:
          type: string
        refundId:
          type: string
        refundDetails:
          type: object
          additionalProperties: {}
      required:
      - detail
      - orderId
      - paymentStatus
      - refundDetails
      - refundId
    Region:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
        alpha:
          type: string
          title: Region Code
          maxLength: 10
        name:
          type: string
          readOnly: true
          description: Region name in current language
        country:
          type: string
          title: Country Code Alpha 2
        regionInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Additional region information
        usageStats:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Usage statistics for this region
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        geographicDetails:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Geographic and administrative details
        deliveryInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Delivery and shipping information
      required:
      - alpha
      - country
      - createdAt
      - deliveryInfo
      - geographicDetails
      - name
      - regionInfo
      - sortOrder
      - translations
      - updatedAt
      - usageStats
      - uuid
    Slide:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                subtitle:
                  type: string
                description:
                  type: string
                buttonLabel:
                  type: string
        id:
          type: integer
          readOnly: true
        slider:
          type: integer
        discount:
          type: number
          format: double
          maximum: 1000000000
          minimum: -1000000000
          exclusiveMaximum: true
          exclusiveMinimum: true
        showButton:
          type: boolean
        dateStart:
          type: string
          format: date-time
        dateEnd:
          type: string
          format: date-time
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
      required:
      - createdAt
      - dateEnd
      - dateStart
      - id
      - mainImagePath
      - slider
      - sortOrder
      - translations
      - updatedAt
      - uuid
    Slider:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                url:
                  type: string
                title:
                  type: string
                description:
                  type: string
        video:
          type: string
          format: uri
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        mainImagePath:
          type: string
          readOnly: true
      required:
      - createdAt
      - id
      - mainImagePath
      - translations
      - updatedAt
      - uuid
    SubscriptionTopic:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            en:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            de:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
        id:
          type: integer
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        slug:
          type: string
          description: Unique identifier for the topic (e.g., 'weekly-newsletter')
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        category:
          allOf:
          - $ref: '#/components/schemas/CategoryEnum'
          description: |-
            Category of the subscription topic

            * `marketing` - Marketing Campaigns
            * `product` - Product Updates
            * `account` - Account Updates
            * `system` - System Notifications
            * `newsletter` - Newsletter
            * `promotional` - Promotional
            * `other` - Other
        isActive:
          type: boolean
          title: Active
          description: Whether this topic is currently available for subscription
        isDefault:
          type: boolean
          title: Default Subscription
          description: Whether new users are automatically subscribed to this topic
        requiresConfirmation:
          type: boolean
          description: Whether subscription to this topic requires email confirmation
        subscriberCount:
          type: integer
          description: |-
            Get the count of active subscribers for a topic.

            Handles both model instances and dictionaries.
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
      - createdAt
      - id
      - slug
      - subscriberCount
      - translations
      - updatedAt
      - uuid
    Tag:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        id:
          type: integer
          readOnly: true
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                label:
                  type: string
            en:
              type: object
              properties:
                label:
                  type: string
            de:
              type: object
              properties:
                label:
                  type: string
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - sortOrder
      - translations
      - updatedAt
      - uuid
    Tip:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        translations:
          type: object
          properties:
            el:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
            en:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
            de:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                url:
                  type: string
        kind:
          $ref: '#/components/schemas/TipKindEnum'
        icon:
          type: string
          format: uri
          nullable: true
        active:
          type: boolean
        sortOrder:
          type: integer
          readOnly: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - kind
      - sortOrder
      - translations
      - updatedAt
      - uuid
    TipKindEnum:
      enum:
      - SUCCESS
      - INFO
      - ERROR
      - WARNING
      type: string
      description: |-
        * `SUCCESS` - Success
        * `INFO` - Info
        * `ERROR` - Error
        * `WARNING` - Warning
    Unsubscribe:
      type: object
      properties:
        message:
          type: string
        topic:
          type: string
        userEmail:
          type: string
          format: email
        topicSlug:
          type: string
        error:
          type: string
      required:
      - message
    UserAddress:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
        mobilePhone:
          type: string
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
          readOnly: true
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
        addressSummary:
          type: string
          readOnly: true
          description: Formatted address summary
        usageInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Address usage information
        validationStatus:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Address validation status
        geographicInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Geographic and location information
        contactInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Contact information summary
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
        deliveryPreferences:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Delivery and shipping preferences
        orderHistory:
          type: array
          items: {}
          readOnly: true
          description: Order history for this address
        securityInfo:
          type: object
          additionalProperties: {}
          readOnly: true
          description: Security and verification information
        optimizationSuggestions:
          type: array
          items: {}
          readOnly: true
          description: Suggestions for improving address
      required:
      - addressSummary
      - city
      - contactInfo
      - country
      - createdAt
      - deliveryPreferences
      - firstName
      - geographicInfo
      - id
      - lastName
      - optimizationSuggestions
      - orderHistory
      - phone
      - region
      - securityInfo
      - street
      - streetNumber
      - title
      - updatedAt
      - usageInfo
      - user
      - uuid
      - validationStatus
      - zipcode
    UserAddressCreate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
        mobilePhone:
          type: string
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
      required:
      - city
      - country
      - firstName
      - lastName
      - phone
      - street
      - streetNumber
      - title
      - user
      - zipcode
    UserAddressUpdate:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        firstName:
          type: string
          maxLength: 255
        lastName:
          type: string
          maxLength: 255
        street:
          type: string
          maxLength: 255
        streetNumber:
          type: string
          maxLength: 255
        city:
          type: string
          maxLength: 255
        zipcode:
          type: string
          title: Zip Code
          maxLength: 255
        floor:
          oneOf:
          - $ref: '#/components/schemas/FloorEnum'
          - $ref: '#/components/schemas/BlankEnum'
        locationType:
          oneOf:
          - $ref: '#/components/schemas/LocationTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
        mobilePhone:
          type: string
        notes:
          type: string
          maxLength: 255
        isMain:
          type: boolean
          default: false
        user:
          type: integer
          readOnly: true
        country:
          type: string
          title: Country Code Alpha 2
        region:
          type: string
          title: Region Code
      required:
      - city
      - country
      - firstName
      - lastName
      - phone
      - street
      - streetNumber
      - title
      - user
      - zipcode
    UserProductReviewRequest:
      type: object
      properties:
        product:
          type: integer
          description: ID of the product to get user's review for
      required:
      - product
    UserSubscription:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
          title: Χρήστης
        topic:
          type: integer
        topicDetails:
          allOf:
          - $ref: '#/components/schemas/SubscriptionTopic'
          readOnly: true
        status:
          $ref: '#/components/schemas/UserSubscriptionStatusEnum'
        subscribedAt:
          type: string
          format: date-time
          readOnly: true
        unsubscribedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        metadata:
          description: Additional subscription preferences or data
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
      - createdAt
      - id
      - subscribedAt
      - topic
      - topicDetails
      - unsubscribedAt
      - updatedAt
      - user
    UserSubscriptionStatusEnum:
      enum:
      - active
      - pending
      - unsubscribed
      - bounced
      type: string
      description: |-
        * `active` - Active
        * `pending` - Pending Confirmation
        * `unsubscribed` - Unsubscribed
        * `bounced` - Bounced
    UsernameUpdate:
      type: object
      properties:
        username:
          type: string
          description: New username
          maxLength: 150
      required:
      - username
    UsernameUpdateResponse:
      type: object
      properties:
        detail:
          type: string
          description: Success message for username update
      required:
      - detail
    Vat:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        value:
          type: number
          format: double
          maximum: 100.0
          minimum: 0.0
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        uuid:
          type: string
          format: uuid
          readOnly: true
      required:
      - createdAt
      - id
      - updatedAt
      - uuid
